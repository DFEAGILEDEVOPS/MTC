require 'cucumber/rake/task'
require_relative '../test/features/support/browserstack_settings'
require 'json'
require 'pry'
require 'parallel'
require 'colorize'

File.truncate('rerun.txt', 0) if File.exist?('rerun.txt')

BrowserstackSettings.browser_caps.keys.each_with_index do |browser, index|
  Cucumber::Rake::Task.new("bs_#{browser}".to_sym) do |task|
    task.cucumber_opts = "--format=pretty DRIVER=bs_#{browser} -f rerun -o rerun.txt"
    task.cucumber_opts << " #{ENV['OPTS']}" unless ENV['OPTS'].nil?
  end
end

Cucumber::Rake::Task.new(:features) do |t|
  t.cucumber_opts = "--format pretty -f rerun -o rerun.txt DRIVER=#{(ENV['DRIVER']) ? ENV['DRIVER'] : 'headless_chrome'}"
  t.cucumber_opts << " #{ENV['OPTS']}" unless ENV['OPTS'].nil?
end

desc 're run failing test'
Cucumber::Rake::Task.new :failing_tests, 'Re-run failing tests from the rerun.txt file' do |t|
  t.cucumber_opts = "@rerun.txt -f pretty DRIVER=#{(Rake.application.top_level_tasks.first == 'features') ? 'headless_chrome' : Rake.application.top_level_tasks.first}"
end


desc "Runs test in"
task(:parallel) do
  run_parallel_scenarios
end


def array_of_scenarios
  opts= ''
  opts = ENV['OPTS'].dup unless ENV['OPTS'].nil?
  results = `bundle exec cucumber -d -f json #{opts} -r features/support/env -r features/step_definitions -r features/support/env.rb -t ~@non_parallel`
  results = JSON.parse results
  results.map {|s| s['elements'].map {|e| s['uri'] + ':' + e['line'].to_s}}.flatten
end

def calculate_exit_code(status_codes_array)
  status_codes_array.any? {|code| code > 0} ? 1 : 0
end

def run_scenario_group(scenario_group, rerun_file, output_file)
  scenario_under_run = scenario_group.join(' ')
  command = "bundle exec cucumber #{scenario_under_run} -f pretty -o  #{output_file} -r features/step_definitions -r features/support -f rerun -o #{rerun_file} #{ENV['OPTS']}"
  system(command)
end

def rerun_failing_scenarios(rerun_file)
  rerun_output_file = "reports/rerun_output_#{Time.now.strftime('%I_%M_%S_%L')}.txt"
  command = "bundle exec cucumber -f pretty -o #{rerun_output_file} @#{rerun_file} -r features/step_definitions -r features/support #{ENV['OPTS']}"
  sh command do
  end unless File.read(rerun_file).empty?
end

def run_non_parallel_scenarios
  command = "bundle exec cucumber -t @non_parallel -f pretty -r features/step_definitions -r features/support -f rerun -o reports/rerun_fails_x.txt #{ENV['OPTS']}"
  system(command)
end

def run_parallel_scenarios
  start_time = Time.now.strftime('%I:%M:%S')
  puts start_time
  size = (ENV['GROUP_SIZE'] || 1).to_i
  nodes = (ENV['NODES'] || 1).to_i
  grouped_scenarios = array_of_scenarios.each_slice(size)
  @group_index = 0
  @exitcodes_array = []
  puts "\n###################################################################".light_green
  puts "## Running Scenarios in Parallel with #{nodes} NODES and in GROUPS of #{size} ##".green
  puts "###################################################################\n\n".light_green
  Parallel.each(grouped_scenarios, :in_threads => nodes) do |scenario_group|
    @group_index +=1
    rerun_file = "reports/rerun_fails_#{@group_index}.txt"
    output_file = "reports/test_output_#{@group_index}.txt"
    run_scenario_group(scenario_group, rerun_file, output_file)
  end
  puts "\n####################################".light_green; puts "## Non Parallel scenario's output ##".green
  puts "####################################\n\n".light_green
  run_non_parallel_scenarios
  output_files = Dir['reports/test_output_*']
  re_run_files = Dir['reports/rerun_fails_*']
  re_run_files.each do |file|
    rerun_failing_scenarios(file) unless File.read(file).empty?
    @exitcodes_array << $?.exitstatus
  end
  re_run_output_files = Dir['reports/rerun_output_*']
  puts "\n################################".light_green; puts "## Parallel execution output ##".green
  puts "################################\n\n".light_green
  output_files.each {|file| puts File.read(file)}
  (puts "\n###################".light_red; puts "## Re-run output ##\n".red
  puts "###################\n\n".light_red) unless re_run_output_files.empty?
  re_run_output_files.each {|file| puts File.read(file)}
  time_taken_in_secs = (Time.parse(Time.now.strftime('%I:%M:%S')) - Time.parse(start_time))

  puts "\n##############################".light_green
  puts "## Execution time: #{Time.at(time_taken_in_secs).utc.strftime('%H:%M:%S')} ##".green
  puts "##############################\n\n".light_green
  (output_files+re_run_files+ re_run_output_files).each {|file| File.delete(file)}
  @exit_code = calculate_exit_code(@exitcodes_array)
end

at_exit do
  begin
    puts "\n**** RE RUNNING FAILING TESTS ****\n\n" unless File.read('rerun.txt').empty?
    Rake::Task[:failing_tests].invoke unless File.read('rerun.txt').empty?
  rescue Exception => e
    puts "#{e.class}: #{e.message}"
  end
  colour = @exit_code == 0 ? 'green' : 'red'
  puts "\n#################################".send(colour)
  puts "## Exiting with status code: #{@exit_code} ##".send(colour)
  puts "#################################\n\n".send(colour)
  exit @exit_code
end
