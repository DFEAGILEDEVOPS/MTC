import typescriptEslint from "@typescript-eslint/eslint-plugin";
import jest from "eslint-plugin-jest";
import globals from "globals";
import tsParser from "@typescript-eslint/parser";
import path from "node:path";
import { fileURLToPath } from "node:url";
import js from "@eslint/js";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const compat = new FlatCompat({
    baseDirectory: __dirname,
    recommendedConfig: js.configs.recommended,
    allConfig: js.configs.all
});

export default [{
  // TODO why ignore all JS?
    ignores: ["**/dist/", "**/public/", "**/*.js"],
}, ...compat.extends("plugin:jest/recommended", "plugin:jest/style"), {
    plugins: {
        "@typescript-eslint": typescriptEslint,
        jest,
    },

    languageOptions: {
        globals: {
            ...globals.node,
            ...globals.jest,
            ...globals.browser, // TODO this suppresses uses of window, but can we narrow it to just the browser scripts folders?
        },

        parser: tsParser,
        ecmaVersion: 5,
        sourceType: "commonjs",

        parserOptions: {
            tsconfigRootDir: ".",
            project: "./tsconfig.json",
            warnOnUnsupportedTypeScriptVersion: true,
        },
    },

    rules: {
        "no-return-await": "off",
        "@typescript-eslint/no-extraneous-class": "off",
        "@typescript-eslint/return-await": ["error", "in-try-catch"],
        "@typescript-eslint/prefer-ts-expect-error": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/method-signature-style": "off",
        "@typescript-eslint/restrict-template-expressions": "off",
        "@typescript-eslint/strict-boolean-expressions": "off",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "off",

        "@typescript-eslint/ban-ts-comment": ["warn", {
            "ts-expect-error": true,
            "ts-ignore": "allow-with-description",
            "ts-nocheck": true,
            "ts-check": false,
            minimumDescriptionLength: 5,
        }],

        "jest/consistent-test-it": ["error", {
            fn: "test",
            withinDescribe: "test",
        }],

        "jest/no-conditional-expect": "off",
        "jest/no-jasmine-globals": "off",

        "jest/no-restricted-matchers": ["error", {
            toBeFalsy: "Ambiguous expectation. Use `toBe(false)` for boolean and `toBeDefined()` for instance verification.",
            toBeTruthy: "Ambiguous expectation. Use `toBe(true)` for boolean and `toBeDefined()` for instance verification.",
            "not.toHaveBeenCalledWith": "narrow expectation by using `toHaveBeenCalledWith`",
        }],

        "jest/no-test-return-statement": "error",
        "jest/no-try-expect": "off",
        "jest/prefer-called-with": "warn",
        "jest/prefer-spy-on": "warn",
        "jest/prefer-strict-equal": "error",
        "jest/prefer-todo": "error",
        "jest/require-to-throw-message": "warn",
        "jest/require-top-level-describe": "error",
    },
}];
