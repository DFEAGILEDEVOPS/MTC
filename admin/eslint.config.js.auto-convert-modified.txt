// Auto converted by @eslint/migrate-config from .eslintrc.js
const tsEsLint = require('@typescript-eslint/eslint-plugin')
const jest = require('eslint-plugin-jest')
const globals = require('globals')
const tsParser = require('@typescript-eslint/parser')
// const path = require('node:path')
// const fileURLToPath = require('node:url').fileURLToPath
const js = require('@eslint/js')
const FlatCompat = require('@eslint/eslintrc').FlatCompat
// const __filename = fileURLToPath(import.meta.url)
// const __dirname = path.dirname(__filename)
const compat = new FlatCompat({
  baseDirectory: __dirname,
  recommendedConfig: js.configs.recommended,
  allConfig: js.configs.all
})

module.exports = [
  {
    ignores: ['**/dist/', '**/public/', '**/*.js'],
    includes: ['**/*.ts']
  },
  ...compat.extends('plugin:jest/recommended', 'plugin:jest/style'),
  {
  plugins: {
    '@typescript-eslint': tsEsLint,
    jest
  },

  languageOptions: {
    globals: {
      ...globals.node,
      ...globals.jest,
      ...globals.browser
    },

    parser: tsParser,
    ecmaVersion: 5,
    sourceType: 'commonjs',

    parserOptions: {
      tsconfigRootDir: '.',
      project: './tsconfig.json',
      warnOnUnsupportedTypeScriptVersion: true
    }
  },

  rules: {
    'no-return-await': 'off',
    '@typescript-eslint/no-extraneous-class': 'off',
    '@typescript-eslint/return-await': ['error', 'in-try-catch'],
    '@typescript-eslint/prefer-ts-expect-error': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/no-var-requires': 'off',
    '@typescript-eslint/method-signature-style': 'off',
    '@typescript-eslint/restrict-template-expressions': 'off',
    '@typescript-eslint/strict-boolean-expressions': 'off',
    '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'off',

    '@typescript-eslint/ban-ts-comment': ['warn', {
      'ts-expect-error': true,
      'ts-ignore': 'allow-with-description',
      'ts-nocheck': true,
      'ts-check': false,
      minimumDescriptionLength: 5
    }],

    'jest/consistent-test-it': ['error', {
      fn: 'test',
      withinDescribe: 'test'
    }],

    'jest/no-conditional-expect': 'off',
    'jest/no-jasmine-globals': 'off',

    'jest/no-restricted-matchers': ['error', {
      toBeFalsy: 'Ambiguous expectation. Use `toBe(false)` for boolean and `toBeDefined()` for instance verification.',
      toBeTruthy: 'Ambiguous expectation. Use `toBe(true)` for boolean and `toBeDefined()` for instance verification.',
      'not.toHaveBeenCalledWith': 'narrow expectation by using `toHaveBeenCalledWith`'
    }],

    'jest/no-test-return-statement': 'error',
    'jest/no-try-expect': 'off',
    'jest/prefer-called-with': 'warn',
    'jest/prefer-spy-on': 'warn',
    'jest/prefer-strict-equal': 'error',
    'jest/prefer-todo': 'error',
    'jest/require-to-throw-message': 'warn',
    'jest/require-top-level-describe': 'error'
  }
}]
