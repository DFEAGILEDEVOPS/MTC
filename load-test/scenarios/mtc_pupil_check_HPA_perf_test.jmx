<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Pupil check" enabled="true">
        <stringProp name="TestPlan.comments">							</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,2)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(ramp,1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">../scenarios/data/pupilLogins.csv</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">schoolPin,pupilPin</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Pupil log in" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;schoolPin&quot;: &quot;${schoolPin}&quot;,&#xd;
  &quot;pupilPin&quot;: &quot;${pupilPin}&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(host,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">3003</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/auth</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">checkCode</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.pupil.checkCode</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Scope.variable"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">checkStartToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokens.checkStarted.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">checkCompleteToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokens.checkComplete.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">questions</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.questions</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">school</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.school</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">tokens</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokens</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check start" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;QueueMessage&gt;&lt;MessageText&gt;${__base64Encode(${checkStartJson})}&lt;/MessageText&gt;&lt;/QueueMessage&gt;&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(host,strgt1dvmtcas)}.queue.core.windows.net</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/check-started/messages?${checkStartToken}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="601235430">currentTime</stringProp>
              <stringProp name="2026642163">checkStartJsonString</stringProp>
              <stringProp name="-289634238">checkStartJson</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-782417066">
                <stringProp name="-2051715600">${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SS&apos;Z&apos;)}</stringProp>
                <stringProp name="-1502721665">{&quot;checkCode&quot;:&quot;${checkCode}&quot;,&quot;clientCheckStartedAt&quot;:&quot;${currentTime}&quot;}</stringProp>
                <stringProp name="330607931">${__evalVar(checkStartJsonString)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check submission" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;QueueMessage&gt;&lt;MessageText&gt;${__base64Encode(${checkSubmissionJson})}&lt;/MessageText&gt;&lt;/QueueMessage&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(host,strgt1dvmtcas)}.queue.core.windows.net</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/check-complete/messages?${checkCompleteToken}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="838546999">jsonDynamic</stringProp>
              <stringProp name="-2105255556">checkSubmissionJson</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-364476460">
                <stringProp name="-1882988712">&quot;pupil&quot;: {&quot;checkCode&quot;: &quot;${checkCode}&quot;}, &quot;questions&quot;: ${questions}, &quot;school&quot;: ${school}, &quot;tokens&quot;: ${tokens}, &quot;checkCode&quot;: &quot;${checkCode}&quot;</stringProp>
                <stringProp name="-554445429">{     &quot;answers&quot;: [         {             &quot;factor1&quot;: 2,             &quot;factor2&quot;: 5,             &quot;answer&quot;: &quot;1&quot;,             &quot;sequenceNumber&quot;: 1,             &quot;question&quot;: &quot;2x5&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:34.309Z&quot;         },         {             &quot;factor1&quot;: 11,             &quot;factor2&quot;: 2,             &quot;answer&quot;: &quot;&quot;,             &quot;sequenceNumber&quot;: 2,             &quot;question&quot;: &quot;11x2&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:43.324Z&quot;         },         {             &quot;factor1&quot;: 5,             &quot;factor2&quot;: 10,             &quot;answer&quot;: &quot;&quot;,             &quot;sequenceNumber&quot;: 3,             &quot;question&quot;: &quot;5x10&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:52.344Z&quot;         },         {             &quot;factor1&quot;: 4,             &quot;factor2&quot;: 4,             &quot;answer&quot;: &quot;&quot;,             &quot;sequenceNumber&quot;: 4,             &quot;question&quot;: &quot;4x4&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:01.359Z&quot;         },         {             &quot;factor1&quot;: 3,             &quot;factor2&quot;: 9,             &quot;answer&quot;: &quot;8&quot;,             &quot;sequenceNumber&quot;: 5,             &quot;question&quot;: &quot;3x9&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:06.376Z&quot;         },         {             &quot;factor1&quot;: 2,             &quot;factor2&quot;: 4,             &quot;answer&quot;: &quot;7&quot;,             &quot;sequenceNumber&quot;: 6,             &quot;question&quot;: &quot;2x4&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:11.061Z&quot;         },         {             &quot;factor1&quot;: 3,             &quot;factor2&quot;: 3,             &quot;answer&quot;: &quot;8&quot;,             &quot;sequenceNumber&quot;: 7,             &quot;question&quot;: &quot;3x3&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:15.883Z&quot;         },         {             &quot;factor1&quot;: 4,             &quot;factor2&quot;: 9,             &quot;answer&quot;: &quot;8&quot;,             &quot;sequenceNumber&quot;: 8,             &quot;question&quot;: &quot;4x9&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:20.233Z&quot;         },         {             &quot;factor1&quot;: 6,             &quot;factor2&quot;: 5,             &quot;answer&quot;: &quot;8&quot;,             &quot;sequenceNumber&quot;: 9,             &quot;question&quot;: &quot;6x5&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:24.821Z&quot;         },         {             &quot;factor1&quot;: 12,             &quot;factor2&quot;: 12,             &quot;answer&quot;: &quot;8&quot;,             &quot;sequenceNumber&quot;: 10,             &quot;question&quot;: &quot;12x12&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:29.383Z&quot;         }     ],     &quot;audit&quot;: [         {             &quot;type&quot;: &quot;WarmupStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:11.458Z&quot;         },         {             &quot;type&quot;: &quot;WarmupIntroRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:11.577Z&quot;         },         {             &quot;type&quot;: &quot;PauseRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:13.340Z&quot;,             &quot;data&quot;: {                 &quot;practiseSequenceNumber&quot;: 1,                 &quot;question&quot;: &quot;1x7&quot;             }         },         {             &quot;type&quot;: &quot;QuestionRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:16.361Z&quot;,             &quot;data&quot;: {                 &quot;practiseSequenceNumber&quot;: 1,                 &quot;question&quot;: &quot;1x7&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:16.361Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 1,                 &quot;question&quot;: &quot;1x7&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerCancelled&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:17.859Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 1,                 &quot;question&quot;: &quot;1x7&quot;             }         },         {             &quot;type&quot;: &quot;QuestionAnswered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:17.859Z&quot;,             &quot;data&quot;: {                 &quot;practiseSequenceNumber&quot;: 1,                 &quot;question&quot;: &quot;1x7&quot;             }         },         {             &quot;type&quot;: &quot;PauseRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:17.863Z&quot;,             &quot;data&quot;: {                 &quot;practiseSequenceNumber&quot;: 2,                 &quot;question&quot;: &quot;3x10&quot;             }         },         {             &quot;type&quot;: &quot;QuestionRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:20.874Z&quot;,             &quot;data&quot;: {                 &quot;practiseSequenceNumber&quot;: 2,                 &quot;question&quot;: &quot;3x10&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:20.875Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 2,                 &quot;question&quot;: &quot;3x10&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerCancelled&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:21.410Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 2,                 &quot;question&quot;: &quot;3x10&quot;             }         },         {             &quot;type&quot;: &quot;QuestionAnswered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:21.411Z&quot;,             &quot;data&quot;: {                 &quot;practiseSequenceNumber&quot;: 2,                 &quot;question&quot;: &quot;3x10&quot;             }         },         {             &quot;type&quot;: &quot;PauseRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:21.415Z&quot;,             &quot;data&quot;: {                 &quot;practiseSequenceNumber&quot;: 3,                 &quot;question&quot;: &quot;2x6&quot;             }         },         {             &quot;type&quot;: &quot;QuestionRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:24.426Z&quot;,             &quot;data&quot;: {                 &quot;practiseSequenceNumber&quot;: 3,                 &quot;question&quot;: &quot;2x6&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:24.426Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 3,                 &quot;question&quot;: &quot;2x6&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerCancelled&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:24.579Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 3,                 &quot;question&quot;: &quot;2x6&quot;             }         },         {             &quot;type&quot;: &quot;QuestionAnswered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:24.579Z&quot;,             &quot;data&quot;: {                 &quot;practiseSequenceNumber&quot;: 3,                 &quot;question&quot;: &quot;2x6&quot;             }         },         {             &quot;type&quot;: &quot;WarmupCompleteRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:24.584Z&quot;         },         {             &quot;type&quot;: &quot;QuestionIntroRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:26.306Z&quot;         },         {             &quot;type&quot;: &quot;CheckStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:30.576Z&quot;         },         {             &quot;type&quot;: &quot;CheckStartedApiCalled&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:30.580Z&quot;         },         {             &quot;type&quot;: &quot;PauseRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:30.607Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 1,                 &quot;question&quot;: &quot;2x5&quot;             }         },         {             &quot;type&quot;: &quot;CheckStartedAPICallSucceeded&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:30.919Z&quot;         },         {             &quot;type&quot;: &quot;QuestionRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:33.619Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 1,                 &quot;question&quot;: &quot;2x5&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:33.619Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 1,                 &quot;question&quot;: &quot;2x5&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerCancelled&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:34.308Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 1,                 &quot;question&quot;: &quot;2x5&quot;             }         },         {             &quot;type&quot;: &quot;QuestionAnswered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:34.308Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 1,                 &quot;question&quot;: &quot;2x5&quot;             }         },         {             &quot;type&quot;: &quot;PauseRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:34.312Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 2,                 &quot;question&quot;: &quot;11x2&quot;             }         },         {             &quot;type&quot;: &quot;QuestionRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:37.321Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 2,                 &quot;question&quot;: &quot;11x2&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:37.321Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 2,                 &quot;question&quot;: &quot;11x2&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerEnded&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:43.324Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 2,                 &quot;question&quot;: &quot;11x2&quot;             }         },         {             &quot;type&quot;: &quot;PauseRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:43.326Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 3,                 &quot;question&quot;: &quot;5x10&quot;             }         },         {             &quot;type&quot;: &quot;QuestionRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:46.338Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 3,                 &quot;question&quot;: &quot;5x10&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:46.339Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 3,                 &quot;question&quot;: &quot;5x10&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerEnded&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:52.343Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 3,                 &quot;question&quot;: &quot;5x10&quot;             }         },         {             &quot;type&quot;: &quot;PauseRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:52.347Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 4,                 &quot;question&quot;: &quot;4x4&quot;             }         },         {             &quot;type&quot;: &quot;QuestionRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:55.355Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 4,                 &quot;question&quot;: &quot;4x4&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:55.357Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 4,                 &quot;question&quot;: &quot;4x4&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerEnded&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:01.358Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 4,                 &quot;question&quot;: &quot;4x4&quot;             }         },         {             &quot;type&quot;: &quot;PauseRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:01.362Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 5,                 &quot;question&quot;: &quot;3x9&quot;             }         },         {             &quot;type&quot;: &quot;QuestionRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:04.371Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 5,                 &quot;question&quot;: &quot;3x9&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:04.371Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 5,                 &quot;question&quot;: &quot;3x9&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerCancelled&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:06.374Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 5,                 &quot;question&quot;: &quot;3x9&quot;             }         },         {             &quot;type&quot;: &quot;QuestionAnswered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:06.375Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 5,                 &quot;question&quot;: &quot;3x9&quot;             }         },         {             &quot;type&quot;: &quot;PauseRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:06.381Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 6,                 &quot;question&quot;: &quot;2x4&quot;             }         },         {             &quot;type&quot;: &quot;QuestionRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:09.389Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 6,                 &quot;question&quot;: &quot;2x4&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:09.389Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 6,                 &quot;question&quot;: &quot;2x4&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerCancelled&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:11.060Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 6,                 &quot;question&quot;: &quot;2x4&quot;             }         },         {             &quot;type&quot;: &quot;QuestionAnswered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:11.061Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 6,                 &quot;question&quot;: &quot;2x4&quot;             }         },         {             &quot;type&quot;: &quot;PauseRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:11.065Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 7,                 &quot;question&quot;: &quot;3x3&quot;             }         },         {             &quot;type&quot;: &quot;QuestionRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:14.072Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 7,                 &quot;question&quot;: &quot;3x3&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:14.074Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 7,                 &quot;question&quot;: &quot;3x3&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerCancelled&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:15.882Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 7,                 &quot;question&quot;: &quot;3x3&quot;             }         },         {             &quot;type&quot;: &quot;QuestionAnswered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:15.883Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 7,                 &quot;question&quot;: &quot;3x3&quot;             }         },         {             &quot;type&quot;: &quot;PauseRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:15.887Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 8,                 &quot;question&quot;: &quot;4x9&quot;             }         },         {             &quot;type&quot;: &quot;QuestionRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:18.894Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 8,                 &quot;question&quot;: &quot;4x9&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:18.896Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 8,                 &quot;question&quot;: &quot;4x9&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerCancelled&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:20.232Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 8,                 &quot;question&quot;: &quot;4x9&quot;             }         },         {             &quot;type&quot;: &quot;QuestionAnswered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:20.233Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 8,                 &quot;question&quot;: &quot;4x9&quot;             }         },         {             &quot;type&quot;: &quot;PauseRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:20.238Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 9,                 &quot;question&quot;: &quot;6x5&quot;             }         },         {             &quot;type&quot;: &quot;QuestionRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:23.248Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 9,                 &quot;question&quot;: &quot;6x5&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:23.249Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 9,                 &quot;question&quot;: &quot;6x5&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerCancelled&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:24.820Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 9,                 &quot;question&quot;: &quot;6x5&quot;             }         },         {             &quot;type&quot;: &quot;QuestionAnswered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:24.820Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 9,                 &quot;question&quot;: &quot;6x5&quot;             }         },         {             &quot;type&quot;: &quot;PauseRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:24.824Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 10,                 &quot;question&quot;: &quot;12x12&quot;             }         },         {             &quot;type&quot;: &quot;QuestionRendered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:27.831Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 10,                 &quot;question&quot;: &quot;12x12&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerStarted&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:27.832Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 10,                 &quot;question&quot;: &quot;12x12&quot;             }         },         {             &quot;type&quot;: &quot;QuestionTimerCancelled&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:29.381Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 10,                 &quot;question&quot;: &quot;12x12&quot;             }         },         {             &quot;type&quot;: &quot;QuestionAnswered&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:29.382Z&quot;,             &quot;data&quot;: {                 &quot;sequenceNumber&quot;: 10,                 &quot;question&quot;: &quot;12x12&quot;             }         },         {             &quot;type&quot;: &quot;CheckSubmissionPending&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:29.384Z&quot;         },         {             &quot;type&quot;: &quot;CheckSubmissionApiCalled&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:29.400Z&quot;         }     ],     &quot;config&quot;: {         &quot;questionTime&quot;: 6,         &quot;loadingTime&quot;: 3,         &quot;speechSynthesis&quot;: false,         &quot;audibleSounds&quot;: false,         &quot;numpadRemoval&quot;: false,         &quot;fontSize&quot;: false,         &quot;colourContrast&quot;: false     },     &quot;device&quot;: {         &quot;battery&quot;: {             &quot;isCharging&quot;: false,             &quot;levelPercent&quot;: 39,             &quot;chargingTime&quot;: null,             &quot;dischargingTime&quot;: 10500         },         &quot;cpu&quot;: {             &quot;hardwareConcurrency&quot;: 4         },         &quot;navigator&quot;: {             &quot;userAgent&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36&quot;,             &quot;platform&quot;: &quot;MacIntel&quot;,             &quot;language&quot;: &quot;en-GB&quot;,             &quot;cookieEnabled&quot;: true,             &quot;doNotTrack&quot;: null         },         &quot;networkConnection&quot;: {             &quot;downlink&quot;: 8.1,             &quot;effectiveType&quot;: &quot;4g&quot;,             &quot;rtt&quot;: 50         },         &quot;screen&quot;: {             &quot;screenWidth&quot;: 1440,             &quot;screenHeight&quot;: 900,             &quot;outerWidth&quot;: 1372,             &quot;outerHeight&quot;: 682,             &quot;innerWidth&quot;: 1372,             &quot;innerHeight&quot;: 682,             &quot;colorDepth&quot;: 24,             &quot;orientation&quot;: &quot;landscape-primary&quot;         }     },     &quot;inputs&quot;: [         {             &quot;input&quot;: &quot;1&quot;,             &quot;eventType&quot;: &quot;keydown&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:34.092Z&quot;,             &quot;question&quot;: &quot;2x5&quot;,             &quot;sequenceNumber&quot;: 1         },         {             &quot;input&quot;: &quot;Enter&quot;,             &quot;eventType&quot;: &quot;keydown&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:12:34.307Z&quot;,             &quot;question&quot;: &quot;2x5&quot;,             &quot;sequenceNumber&quot;: 1         },         {             &quot;input&quot;: &quot;left click&quot;,             &quot;eventType&quot;: &quot;mousedown&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:05.603Z&quot;,             &quot;question&quot;: &quot;3x9&quot;,             &quot;sequenceNumber&quot;: 5         },         {             &quot;input&quot;: &quot;8&quot;,             &quot;eventType&quot;: &quot;click&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:05.695Z&quot;,             &quot;question&quot;: &quot;3x9&quot;,             &quot;sequenceNumber&quot;: 5         },         {             &quot;input&quot;: &quot;left click&quot;,             &quot;eventType&quot;: &quot;mousedown&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:06.270Z&quot;,             &quot;question&quot;: &quot;3x9&quot;,             &quot;sequenceNumber&quot;: 5         },         {             &quot;input&quot;: &quot;Enter&quot;,             &quot;eventType&quot;: &quot;click&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:06.374Z&quot;,             &quot;question&quot;: &quot;3x9&quot;,             &quot;sequenceNumber&quot;: 5         },         {             &quot;input&quot;: &quot;left click&quot;,             &quot;eventType&quot;: &quot;mousedown&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:10.094Z&quot;,             &quot;question&quot;: &quot;2x4&quot;,             &quot;sequenceNumber&quot;: 6         },         {             &quot;input&quot;: &quot;7&quot;,             &quot;eventType&quot;: &quot;click&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:10.173Z&quot;,             &quot;question&quot;: &quot;2x4&quot;,             &quot;sequenceNumber&quot;: 6         },         {             &quot;input&quot;: &quot;left click&quot;,             &quot;eventType&quot;: &quot;mousedown&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:10.941Z&quot;,             &quot;question&quot;: &quot;2x4&quot;,             &quot;sequenceNumber&quot;: 6         },         {             &quot;input&quot;: &quot;Enter&quot;,             &quot;eventType&quot;: &quot;click&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:11.060Z&quot;,             &quot;question&quot;: &quot;2x4&quot;,             &quot;sequenceNumber&quot;: 6         },         {             &quot;input&quot;: &quot;left click&quot;,             &quot;eventType&quot;: &quot;mousedown&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:14.975Z&quot;,             &quot;question&quot;: &quot;3x3&quot;,             &quot;sequenceNumber&quot;: 7         },         {             &quot;input&quot;: &quot;8&quot;,             &quot;eventType&quot;: &quot;click&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:15.062Z&quot;,             &quot;question&quot;: &quot;3x3&quot;,             &quot;sequenceNumber&quot;: 7         },         {             &quot;input&quot;: &quot;left click&quot;,             &quot;eventType&quot;: &quot;mousedown&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:15.795Z&quot;,             &quot;question&quot;: &quot;3x3&quot;,             &quot;sequenceNumber&quot;: 7         },         {             &quot;input&quot;: &quot;Enter&quot;,             &quot;eventType&quot;: &quot;click&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:15.882Z&quot;,             &quot;question&quot;: &quot;3x3&quot;,             &quot;sequenceNumber&quot;: 7         },         {             &quot;input&quot;: &quot;left click&quot;,             &quot;eventType&quot;: &quot;mousedown&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:19.501Z&quot;,             &quot;question&quot;: &quot;4x9&quot;,             &quot;sequenceNumber&quot;: 8         },         {             &quot;input&quot;: &quot;8&quot;,             &quot;eventType&quot;: &quot;click&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:19.572Z&quot;,             &quot;question&quot;: &quot;4x9&quot;,             &quot;sequenceNumber&quot;: 8         },         {             &quot;input&quot;: &quot;left click&quot;,             &quot;eventType&quot;: &quot;mousedown&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:20.154Z&quot;,             &quot;question&quot;: &quot;4x9&quot;,             &quot;sequenceNumber&quot;: 8         },         {             &quot;input&quot;: &quot;Enter&quot;,             &quot;eventType&quot;: &quot;click&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:20.232Z&quot;,             &quot;question&quot;: &quot;4x9&quot;,             &quot;sequenceNumber&quot;: 8         },         {             &quot;input&quot;: &quot;left click&quot;,             &quot;eventType&quot;: &quot;mousedown&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:23.948Z&quot;,             &quot;question&quot;: &quot;6x5&quot;,             &quot;sequenceNumber&quot;: 9         },         {             &quot;input&quot;: &quot;8&quot;,             &quot;eventType&quot;: &quot;click&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:24.035Z&quot;,             &quot;question&quot;: &quot;6x5&quot;,             &quot;sequenceNumber&quot;: 9         },         {             &quot;input&quot;: &quot;left click&quot;,             &quot;eventType&quot;: &quot;mousedown&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:24.707Z&quot;,             &quot;question&quot;: &quot;6x5&quot;,             &quot;sequenceNumber&quot;: 9         },         {             &quot;input&quot;: &quot;Enter&quot;,             &quot;eventType&quot;: &quot;click&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:24.818Z&quot;,             &quot;question&quot;: &quot;6x5&quot;,             &quot;sequenceNumber&quot;: 9         },         {             &quot;input&quot;: &quot;left click&quot;,             &quot;eventType&quot;: &quot;mousedown&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:28.518Z&quot;,             &quot;question&quot;: &quot;12x12&quot;,             &quot;sequenceNumber&quot;: 10         },         {             &quot;input&quot;: &quot;8&quot;,             &quot;eventType&quot;: &quot;click&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:28.596Z&quot;,             &quot;question&quot;: &quot;12x12&quot;,             &quot;sequenceNumber&quot;: 10         },         {             &quot;input&quot;: &quot;left click&quot;,             &quot;eventType&quot;: &quot;mousedown&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:29.261Z&quot;,             &quot;question&quot;: &quot;12x12&quot;,             &quot;sequenceNumber&quot;: 10         },         {             &quot;input&quot;: &quot;Enter&quot;,             &quot;eventType&quot;: &quot;click&quot;,             &quot;clientTimestamp&quot;: &quot;2018-09-27T20:13:29.381Z&quot;,             &quot;question&quot;: &quot;12x12&quot;,             &quot;sequenceNumber&quot;: 10         }     ],     ${__evalVar(jsonDynamic)} }</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
