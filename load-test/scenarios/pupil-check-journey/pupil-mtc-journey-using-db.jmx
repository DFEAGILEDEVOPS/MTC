<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Pupil-Login-using-db" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="OFFSET_VALUE_NODE" elementType="Argument">
            <stringProp name="Argument.name">OFFSET_VALUE_NODE</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;FLOOD_NODE_INDEX&quot;) + &quot;000&quot; )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OFFSET_VALUE" elementType="Argument">
            <stringProp name="Argument.name">OFFSET_VALUE</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PUPIL_LOGIN_FILE" elementType="Argument">
            <stringProp name="Argument.name">PUPIL_LOGIN_FILE</stringProp>
            <stringProp name="Argument.value">${__BeanShell( System.getenv(&quot;FLOOD_NODE_INDEX&quot;) + &quot;-pupilLogins.csv&quot; )}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">mtc-admin</stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://${__P(MSSQLHost)}:${__P(MSSQLPort)};database=${__P(DBName)}</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">${__P(dbPassword)}</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${__P(dbUserName)}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group - Prepare Pupil Data" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request - Select Pupil Credentials" enabled="true">
          <stringProp name="dataSource">mtc-admin</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT p.val as [pupilPin], s.pin as [schoolPin] FROM mtc_admin.checkPin cp
INNER JOIN mtc_admin.pin p ON cp.pin_id = p.id
INNER JOIN mtc_admin.school s ON s.id = cp.school_id
ORDER BY p.val
OFFSET ${OFFSET_VALUE_NODE} ROWS
FETCH NEXT 1000 ROWS ONLY</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
          <stringProp name="variableNames">pupilPin,schoolPin</stringProp>
          <stringProp name="resultVariable">resultSet</stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor - Export Results To CSV" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">resultSet = vars.getObject(&quot;resultSet&quot;)
result = new StringBuilder()

def randomRow = resultSet.get(org.apache.commons.lang3.RandomUtils.nextInt(0,resultSet.size()))

randomRow.each { k, v -&gt;
    result.append(&quot;${k}&quot;).append(&quot;,&quot;)
}
result.append(System.getProperty(&quot;line.separator&quot;))

for (Object row : resultSet ) {
    iter = row.entrySet().iterator()
    while (iter.hasNext()) {
        pair = iter.next()
        result.append(pair.getValue())
        result.append(&quot;,&quot;)
    }
    result.append(System.getProperty(&quot;line.separator&quot;))
}
org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;/data/flood/files/&quot;, &quot;${PUPIL_LOGIN_FILE}&quot;), result.toString(), &quot;UTF-8&quot;)
//Use the below to write the file to your local file system
//org.apache.commons.io.FileUtils.writeStringToFile(new File(&quot;apache-jmeter-4.0/bin&quot;, &quot;${PUPIL_LOGIN_FILE}&quot;), result.toString(), &quot;UTF-8&quot;)</stringProp>
        </JSR223PostProcessor>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Pupil Check Journey" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threads,10)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampup,1)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(duration,300)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(pupilAPIHost,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(port,3001)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Pupil Logins DataSet" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">${PUPIL_LOGIN_FILE}</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">pupilPin,schoolPin</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST-Pupil-Sign-In" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;schoolPin&quot;:&quot;${schoolPin}&quot;,&#xd;
 &quot;pupilPin&quot;:&quot;${pupilPin}&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/auth</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${__P(pupilSiteUrl)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${__P(pupilSiteUrl)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - CheckStartToken" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">checkStartToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokens.checkStarted.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor -CheckCode" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">checkCode</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.pupil.checkCode</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - CheckCompleteToken" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">checkCompleteToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokens.checkComplete.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - School" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">school</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.school</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - Questions" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">questions</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.questions</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - Tokens" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">tokens</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokens</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor - FeedbackToken" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">feedbackToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokens.pupilFeedback.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST-Check-Start" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;QueueMessage&gt;&lt;MessageText&gt;${__base64Encode(${checkStartMessage})}&lt;/MessageText&gt;&lt;/QueueMessage&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(pupilAppHost,localAppHost)}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">check-started/messages?${checkStartToken}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="601235430">currentTime</stringProp>
              <stringProp name="701838925">checkCodeStart</stringProp>
              <stringProp name="-1933611411">checkStartMessage</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1160061552">
                <stringProp name="-2051715600">${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss.SS&apos;Z&apos;)}</stringProp>
                <stringProp name="-1502721665">{&quot;checkCode&quot;:&quot;${checkCode}&quot;,&quot;clientCheckStartedAt&quot;:&quot;${currentTime}&quot;}</stringProp>
                <stringProp name="-127461099">${__evalVar(checkCodeStart)}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers"/>
          </HeaderManager>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">20000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST-Check-Complete" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;QueueMessage&gt;&lt;MessageText&gt;${__base64Encode(${CheckSumbissionMessage})}&lt;/MessageText&gt;&lt;/QueueMessage&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(pupilAppHost,localAppHost)}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">check-complete/messages?${checkCompleteToken}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="1366119698">JsonParameters</stringProp>
              <stringProp name="1172499977">CheckSumbissionMessage</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="533247174">
                <stringProp name="-1882988712">&quot;pupil&quot;: {&quot;checkCode&quot;: &quot;${checkCode}&quot;}, &quot;questions&quot;: ${questions}, &quot;school&quot;: ${school}, &quot;tokens&quot;: ${tokens}, &quot;checkCode&quot;: &quot;${checkCode}&quot;</stringProp>
                <stringProp name="401953880">{ &quot;access_arrangements&quot;:{&quot;fontSize&quot;:&quot;regular&quot;,&quot;contrast&quot;:&quot;bow&quot;},&quot;answers&quot;:[{&quot;factor1&quot;:2,&quot;factor2&quot;:5,&quot;answer&quot;:&quot;10&quot;,&quot;sequenceNumber&quot;:1,&quot;question&quot;:&quot;2x5&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:35.566Z&quot;},{&quot;factor1&quot;:11,&quot;factor2&quot;:2,&quot;answer&quot;:&quot;22&quot;,&quot;sequenceNumber&quot;:2,&quot;question&quot;:&quot;11x2&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:43.645Z&quot;},{&quot;factor1&quot;:5,&quot;factor2&quot;:10,&quot;answer&quot;:&quot;50&quot;,&quot;sequenceNumber&quot;:3,&quot;question&quot;:&quot;5x10&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:52.659Z&quot;},{&quot;factor1&quot;:4,&quot;factor2&quot;:4,&quot;answer&quot;:&quot;16&quot;,&quot;sequenceNumber&quot;:4,&quot;question&quot;:&quot;4x4&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:00.798Z&quot;},{&quot;factor1&quot;:3,&quot;factor2&quot;:9,&quot;answer&quot;:&quot;27&quot;,&quot;sequenceNumber&quot;:5,&quot;question&quot;:&quot;3x9&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:08.381Z&quot;},{&quot;factor1&quot;:2,&quot;factor2&quot;:4,&quot;answer&quot;:&quot;8&quot;,&quot;sequenceNumber&quot;:6,&quot;question&quot;:&quot;2x4&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:14.403Z&quot;},{&quot;factor1&quot;:3,&quot;factor2&quot;:3,&quot;answer&quot;:&quot;9&quot;,&quot;sequenceNumber&quot;:7,&quot;question&quot;:&quot;3x3&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:20.571Z&quot;},{&quot;factor1&quot;:4,&quot;factor2&quot;:9,&quot;answer&quot;:&quot;36&quot;,&quot;sequenceNumber&quot;:8,&quot;question&quot;:&quot;4x9&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:27.425Z&quot;},{&quot;factor1&quot;:6,&quot;factor2&quot;:5,&quot;answer&quot;:&quot;30&quot;,&quot;sequenceNumber&quot;:9,&quot;question&quot;:&quot;6x5&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:36.187Z&quot;},{&quot;factor1&quot;:12,&quot;factor2&quot;:12,&quot;answer&quot;:&quot;144&quot;,&quot;sequenceNumber&quot;:10,&quot;question&quot;:&quot;12x12&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:45.006Z&quot;}],&quot;audit&quot;:[{&quot;type&quot;:&quot;WarmupStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:02.068Z&quot;},{&quot;type&quot;:&quot;WarmupIntroRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:02.073Z&quot;},{&quot;type&quot;:&quot;PauseRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:03.135Z&quot;,&quot;data&quot;:{&quot;practiseSequenceNumber&quot;:1,&quot;question&quot;:&quot;1x7&quot;}},{&quot;type&quot;:&quot;QuestionRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:06.141Z&quot;,&quot;data&quot;:{&quot;practiseSequenceNumber&quot;:1,&quot;question&quot;:&quot;1x7&quot;}},{&quot;type&quot;:&quot;QuestionTimerStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:06.141Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:1,&quot;question&quot;:&quot;1x7&quot;}},{&quot;type&quot;:&quot;QuestionTimerCancelled&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:09.050Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:1,&quot;question&quot;:&quot;1x7&quot;}},{&quot;type&quot;:&quot;QuestionAnswered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:09.050Z&quot;,&quot;data&quot;:{&quot;practiseSequenceNumber&quot;:1,&quot;question&quot;:&quot;1x7&quot;}},{&quot;type&quot;:&quot;PauseRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:09.051Z&quot;,&quot;data&quot;:{&quot;practiseSequenceNumber&quot;:2,&quot;question&quot;:&quot;3x10&quot;}},{&quot;type&quot;:&quot;QuestionRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:12.055Z&quot;,&quot;data&quot;:{&quot;practiseSequenceNumber&quot;:2,&quot;question&quot;:&quot;3x10&quot;}},{&quot;type&quot;:&quot;QuestionTimerStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:12.055Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:2,&quot;question&quot;:&quot;3x10&quot;}},{&quot;type&quot;:&quot;QuestionTimerCancelled&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:15.550Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:2,&quot;question&quot;:&quot;3x10&quot;}},{&quot;type&quot;:&quot;QuestionAnswered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:15.550Z&quot;,&quot;data&quot;:{&quot;practiseSequenceNumber&quot;:2,&quot;question&quot;:&quot;3x10&quot;}},{&quot;type&quot;:&quot;PauseRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:15.551Z&quot;,&quot;data&quot;:{&quot;practiseSequenceNumber&quot;:3,&quot;question&quot;:&quot;2x6&quot;}},{&quot;type&quot;:&quot;QuestionRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:18.559Z&quot;,&quot;data&quot;:{&quot;practiseSequenceNumber&quot;:3,&quot;question&quot;:&quot;2x6&quot;}},{&quot;type&quot;:&quot;QuestionTimerStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:18.559Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:3,&quot;question&quot;:&quot;2x6&quot;}},{&quot;type&quot;:&quot;QuestionTimerCancelled&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:24.221Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:3,&quot;question&quot;:&quot;2x6&quot;}},{&quot;type&quot;:&quot;QuestionAnswered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:24.221Z&quot;,&quot;data&quot;:{&quot;practiseSequenceNumber&quot;:3,&quot;question&quot;:&quot;2x6&quot;}},{&quot;type&quot;:&quot;WarmupCompleteRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:24.223Z&quot;},{&quot;type&quot;:&quot;QuestionIntroRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:26.240Z&quot;},{&quot;type&quot;:&quot;CheckStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:27.401Z&quot;},{&quot;type&quot;:&quot;CheckStartedApiCalled&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:27.401Z&quot;},{&quot;type&quot;:&quot;PauseRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:27.404Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:1,&quot;question&quot;:&quot;2x5&quot;}},{&quot;type&quot;:&quot;CheckStartedAPICallSucceeded&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:27.660Z&quot;},{&quot;type&quot;:&quot;QuestionRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:30.407Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:1,&quot;question&quot;:&quot;2x5&quot;}},{&quot;type&quot;:&quot;QuestionTimerStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:30.407Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:1,&quot;question&quot;:&quot;2x5&quot;}},{&quot;type&quot;:&quot;QuestionTimerCancelled&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:35.565Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:1,&quot;question&quot;:&quot;2x5&quot;}},{&quot;type&quot;:&quot;QuestionAnswered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:35.566Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:1,&quot;question&quot;:&quot;2x5&quot;}},{&quot;type&quot;:&quot;PauseRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:35.567Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:2,&quot;question&quot;:&quot;11x2&quot;}},{&quot;type&quot;:&quot;QuestionRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:38.574Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:2,&quot;question&quot;:&quot;11x2&quot;}},{&quot;type&quot;:&quot;QuestionTimerStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:38.574Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:2,&quot;question&quot;:&quot;11x2&quot;}},{&quot;type&quot;:&quot;QuestionTimerCancelled&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:43.645Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:2,&quot;question&quot;:&quot;11x2&quot;}},{&quot;type&quot;:&quot;QuestionAnswered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:43.645Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:2,&quot;question&quot;:&quot;11x2&quot;}},{&quot;type&quot;:&quot;PauseRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:43.646Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:3,&quot;question&quot;:&quot;5x10&quot;}},{&quot;type&quot;:&quot;QuestionRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:46.654Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:3,&quot;question&quot;:&quot;5x10&quot;}},{&quot;type&quot;:&quot;QuestionTimerStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:46.654Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:3,&quot;question&quot;:&quot;5x10&quot;}},{&quot;type&quot;:&quot;QuestionTimerEnded&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:52.658Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:3,&quot;question&quot;:&quot;5x10&quot;}},{&quot;type&quot;:&quot;PauseRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:52.660Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:4,&quot;question&quot;:&quot;4x4&quot;}},{&quot;type&quot;:&quot;QuestionRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:55.664Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:4,&quot;question&quot;:&quot;4x4&quot;}},{&quot;type&quot;:&quot;QuestionTimerStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:55.664Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:4,&quot;question&quot;:&quot;4x4&quot;}},{&quot;type&quot;:&quot;QuestionTimerCancelled&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:00.798Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:4,&quot;question&quot;:&quot;4x4&quot;}},{&quot;type&quot;:&quot;QuestionAnswered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:00.798Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:4,&quot;question&quot;:&quot;4x4&quot;}},{&quot;type&quot;:&quot;PauseRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:00.799Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:5,&quot;question&quot;:&quot;3x9&quot;}},{&quot;type&quot;:&quot;QuestionRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:03.807Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:5,&quot;question&quot;:&quot;3x9&quot;}},{&quot;type&quot;:&quot;QuestionTimerStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:03.807Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:5,&quot;question&quot;:&quot;3x9&quot;}},{&quot;type&quot;:&quot;QuestionTimerCancelled&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:08.380Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:5,&quot;question&quot;:&quot;3x9&quot;}},{&quot;type&quot;:&quot;QuestionAnswered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:08.381Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:5,&quot;question&quot;:&quot;3x9&quot;}},{&quot;type&quot;:&quot;PauseRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:08.382Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:6,&quot;question&quot;:&quot;2x4&quot;}},{&quot;type&quot;:&quot;QuestionRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:11.390Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:6,&quot;question&quot;:&quot;2x4&quot;}},{&quot;type&quot;:&quot;QuestionTimerStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:11.390Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:6,&quot;question&quot;:&quot;2x4&quot;}},{&quot;type&quot;:&quot;QuestionTimerCancelled&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:14.402Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:6,&quot;question&quot;:&quot;2x4&quot;}},{&quot;type&quot;:&quot;QuestionAnswered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:14.402Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:6,&quot;question&quot;:&quot;2x4&quot;}},{&quot;type&quot;:&quot;PauseRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:14.404Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:7,&quot;question&quot;:&quot;3x3&quot;}},{&quot;type&quot;:&quot;QuestionRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:17.407Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:7,&quot;question&quot;:&quot;3x3&quot;}},{&quot;type&quot;:&quot;QuestionTimerStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:17.407Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:7,&quot;question&quot;:&quot;3x3&quot;}},{&quot;type&quot;:&quot;QuestionTimerCancelled&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:20.571Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:7,&quot;question&quot;:&quot;3x3&quot;}},{&quot;type&quot;:&quot;QuestionAnswered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:20.571Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:7,&quot;question&quot;:&quot;3x3&quot;}},{&quot;type&quot;:&quot;PauseRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:20.573Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:8,&quot;question&quot;:&quot;4x9&quot;}},{&quot;type&quot;:&quot;QuestionRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:23.575Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:8,&quot;question&quot;:&quot;4x9&quot;}},{&quot;type&quot;:&quot;QuestionTimerStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:23.576Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:8,&quot;question&quot;:&quot;4x9&quot;}},{&quot;type&quot;:&quot;QuestionTimerCancelled&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:27.424Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:8,&quot;question&quot;:&quot;4x9&quot;}},{&quot;type&quot;:&quot;QuestionAnswered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:27.424Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:8,&quot;question&quot;:&quot;4x9&quot;}},{&quot;type&quot;:&quot;PauseRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:27.426Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:9,&quot;question&quot;:&quot;6x5&quot;}},{&quot;type&quot;:&quot;QuestionRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:30.433Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:9,&quot;question&quot;:&quot;6x5&quot;}},{&quot;type&quot;:&quot;QuestionTimerStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:30.434Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:9,&quot;question&quot;:&quot;6x5&quot;}},{&quot;type&quot;:&quot;QuestionTimerCancelled&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:36.187Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:9,&quot;question&quot;:&quot;6x5&quot;}},{&quot;type&quot;:&quot;QuestionAnswered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:36.187Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:9,&quot;question&quot;:&quot;6x5&quot;}},{&quot;type&quot;:&quot;PauseRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:36.189Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:10,&quot;question&quot;:&quot;12x12&quot;}},{&quot;type&quot;:&quot;QuestionRendered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:39.195Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:10,&quot;question&quot;:&quot;12x12&quot;}},{&quot;type&quot;:&quot;QuestionTimerStarted&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:39.195Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:10,&quot;question&quot;:&quot;12x12&quot;}},{&quot;type&quot;:&quot;QuestionTimerCancelled&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:45.005Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:10,&quot;question&quot;:&quot;12x12&quot;}},{&quot;type&quot;:&quot;QuestionAnswered&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:45.006Z&quot;,&quot;data&quot;:{&quot;sequenceNumber&quot;:10,&quot;question&quot;:&quot;12x12&quot;}},{&quot;type&quot;:&quot;CheckSubmissionPending&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:45.006Z&quot;},{&quot;type&quot;:&quot;CheckSubmissionApiCalled&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:45.009Z&quot;}],&quot;check_start_time&quot;:1553244447401,&quot;config&quot;:{&quot;audibleSounds&quot;:false,&quot;checkTime&quot;:30,&quot;colourContrast&quot;:false,&quot;fontSize&quot;:false,&quot;inputAssistance&quot;:false,&quot;loadingTime&quot;:3,&quot;nextBetweenQuestions&quot;:false,&quot;numpadRemoval&quot;:false,&quot;practice&quot;:false,&quot;questionReader&quot;:false,&quot;questionTime&quot;:6,&quot;speechSynthesis&quot;:false},&quot;device&quot;:{&quot;battery&quot;:{&quot;isCharging&quot;:true,&quot;levelPercent&quot;:100,&quot;chargingTime&quot;:0,&quot;dischargingTime&quot;:null},&quot;cpu&quot;:{&quot;hardwareConcurrency&quot;:8},&quot;navigator&quot;:{&quot;userAgent&quot;:&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&quot;,&quot;platform&quot;:&quot;MacIntel&quot;,&quot;language&quot;:&quot;en-GB&quot;,&quot;cookieEnabled&quot;:true,&quot;doNotTrack&quot;:null},&quot;networkConnection&quot;:{&quot;downlink&quot;:10,&quot;effectiveType&quot;:&quot;4g&quot;,&quot;rtt&quot;:100},&quot;screen&quot;:{&quot;screenWidth&quot;:1680,&quot;screenHeight&quot;:1050,&quot;outerWidth&quot;:1658,&quot;outerHeight&quot;:852,&quot;innerWidth&quot;:507,&quot;innerHeight&quot;:852,&quot;colorDepth&quot;:24,&quot;orientation&quot;:&quot;landscape-primary&quot;},&quot;appUsageCounter&quot;:11},&quot;inputs&quot;:[{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:33.876Z&quot;,&quot;question&quot;:&quot;2x5&quot;,&quot;sequenceNumber&quot;:1},{&quot;input&quot;:&quot;1&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:33.881Z&quot;,&quot;question&quot;:&quot;2x5&quot;,&quot;sequenceNumber&quot;:1},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:34.778Z&quot;,&quot;question&quot;:&quot;2x5&quot;,&quot;sequenceNumber&quot;:1},{&quot;input&quot;:&quot;0&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:34.784Z&quot;,&quot;question&quot;:&quot;2x5&quot;,&quot;sequenceNumber&quot;:1},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:35.559Z&quot;,&quot;question&quot;:&quot;2x5&quot;,&quot;sequenceNumber&quot;:1},{&quot;input&quot;:&quot;Enter&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:35.565Z&quot;,&quot;question&quot;:&quot;2x5&quot;,&quot;sequenceNumber&quot;:1},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:42.298Z&quot;,&quot;question&quot;:&quot;11x2&quot;,&quot;sequenceNumber&quot;:2},{&quot;input&quot;:&quot;2&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:42.305Z&quot;,&quot;question&quot;:&quot;11x2&quot;,&quot;sequenceNumber&quot;:2},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:42.403Z&quot;,&quot;question&quot;:&quot;11x2&quot;,&quot;sequenceNumber&quot;:2},{&quot;input&quot;:&quot;2&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:42.410Z&quot;,&quot;question&quot;:&quot;11x2&quot;,&quot;sequenceNumber&quot;:2},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:43.639Z&quot;,&quot;question&quot;:&quot;11x2&quot;,&quot;sequenceNumber&quot;:2},{&quot;input&quot;:&quot;Enter&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:43.645Z&quot;,&quot;question&quot;:&quot;11x2&quot;,&quot;sequenceNumber&quot;:2},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:51.102Z&quot;,&quot;question&quot;:&quot;5x10&quot;,&quot;sequenceNumber&quot;:3},{&quot;input&quot;:&quot;5&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:51.108Z&quot;,&quot;question&quot;:&quot;5x10&quot;,&quot;sequenceNumber&quot;:3},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:51.988Z&quot;,&quot;question&quot;:&quot;5x10&quot;,&quot;sequenceNumber&quot;:3},{&quot;input&quot;:&quot;0&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:51.994Z&quot;,&quot;question&quot;:&quot;5x10&quot;,&quot;sequenceNumber&quot;:3},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:59.133Z&quot;,&quot;question&quot;:&quot;4x4&quot;,&quot;sequenceNumber&quot;:4},{&quot;input&quot;:&quot;1&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:59.139Z&quot;,&quot;question&quot;:&quot;4x4&quot;,&quot;sequenceNumber&quot;:4},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:59.938Z&quot;,&quot;question&quot;:&quot;4x4&quot;,&quot;sequenceNumber&quot;:4},{&quot;input&quot;:&quot;6&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:47:59.945Z&quot;,&quot;question&quot;:&quot;4x4&quot;,&quot;sequenceNumber&quot;:4},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:00.792Z&quot;,&quot;question&quot;:&quot;4x4&quot;,&quot;sequenceNumber&quot;:4},{&quot;input&quot;:&quot;Enter&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:00.797Z&quot;,&quot;question&quot;:&quot;4x4&quot;,&quot;sequenceNumber&quot;:4},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:06.497Z&quot;,&quot;question&quot;:&quot;3x9&quot;,&quot;sequenceNumber&quot;:5},{&quot;input&quot;:&quot;2&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:06.504Z&quot;,&quot;question&quot;:&quot;3x9&quot;,&quot;sequenceNumber&quot;:5},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:07.318Z&quot;,&quot;question&quot;:&quot;3x9&quot;,&quot;sequenceNumber&quot;:5},{&quot;input&quot;:&quot;7&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:07.324Z&quot;,&quot;question&quot;:&quot;3x9&quot;,&quot;sequenceNumber&quot;:5},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:08.375Z&quot;,&quot;question&quot;:&quot;3x9&quot;,&quot;sequenceNumber&quot;:5},{&quot;input&quot;:&quot;Enter&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:08.380Z&quot;,&quot;question&quot;:&quot;3x9&quot;,&quot;sequenceNumber&quot;:5},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:13.706Z&quot;,&quot;question&quot;:&quot;2x4&quot;,&quot;sequenceNumber&quot;:6},{&quot;input&quot;:&quot;8&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:13.722Z&quot;,&quot;question&quot;:&quot;2x4&quot;,&quot;sequenceNumber&quot;:6},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:14.397Z&quot;,&quot;question&quot;:&quot;2x4&quot;,&quot;sequenceNumber&quot;:6},{&quot;input&quot;:&quot;Enter&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:14.402Z&quot;,&quot;question&quot;:&quot;2x4&quot;,&quot;sequenceNumber&quot;:6},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:19.809Z&quot;,&quot;question&quot;:&quot;3x3&quot;,&quot;sequenceNumber&quot;:7},{&quot;input&quot;:&quot;9&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:19.815Z&quot;,&quot;question&quot;:&quot;3x3&quot;,&quot;sequenceNumber&quot;:7},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:20.565Z&quot;,&quot;question&quot;:&quot;3x3&quot;,&quot;sequenceNumber&quot;:7},{&quot;input&quot;:&quot;Enter&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:20.571Z&quot;,&quot;question&quot;:&quot;3x3&quot;,&quot;sequenceNumber&quot;:7},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:25.525Z&quot;,&quot;question&quot;:&quot;4x9&quot;,&quot;sequenceNumber&quot;:8},{&quot;input&quot;:&quot;3&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:25.532Z&quot;,&quot;question&quot;:&quot;4x9&quot;,&quot;sequenceNumber&quot;:8},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:26.208Z&quot;,&quot;question&quot;:&quot;4x9&quot;,&quot;sequenceNumber&quot;:8},{&quot;input&quot;:&quot;6&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:26.213Z&quot;,&quot;question&quot;:&quot;4x9&quot;,&quot;sequenceNumber&quot;:8},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:27.419Z&quot;,&quot;question&quot;:&quot;4x9&quot;,&quot;sequenceNumber&quot;:8},{&quot;input&quot;:&quot;Enter&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:27.424Z&quot;,&quot;question&quot;:&quot;4x9&quot;,&quot;sequenceNumber&quot;:8},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:32.395Z&quot;,&quot;question&quot;:&quot;6x5&quot;,&quot;sequenceNumber&quot;:9},{&quot;input&quot;:&quot;3&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:32.400Z&quot;,&quot;question&quot;:&quot;6x5&quot;,&quot;sequenceNumber&quot;:9},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:33.354Z&quot;,&quot;question&quot;:&quot;6x5&quot;,&quot;sequenceNumber&quot;:9},{&quot;input&quot;:&quot;0&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:33.361Z&quot;,&quot;question&quot;:&quot;6x5&quot;,&quot;sequenceNumber&quot;:9},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:36.180Z&quot;,&quot;question&quot;:&quot;6x5&quot;,&quot;sequenceNumber&quot;:9},{&quot;input&quot;:&quot;Enter&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:36.187Z&quot;,&quot;question&quot;:&quot;6x5&quot;,&quot;sequenceNumber&quot;:9},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:41.261Z&quot;,&quot;question&quot;:&quot;12x12&quot;,&quot;sequenceNumber&quot;:10},{&quot;input&quot;:&quot;1&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:41.267Z&quot;,&quot;question&quot;:&quot;12x12&quot;,&quot;sequenceNumber&quot;:10},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:42.123Z&quot;,&quot;question&quot;:&quot;12x12&quot;,&quot;sequenceNumber&quot;:10},{&quot;input&quot;:&quot;4&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:42.128Z&quot;,&quot;question&quot;:&quot;12x12&quot;,&quot;sequenceNumber&quot;:10},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:42.245Z&quot;,&quot;question&quot;:&quot;12x12&quot;,&quot;sequenceNumber&quot;:10},{&quot;input&quot;:&quot;4&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:42.251Z&quot;,&quot;question&quot;:&quot;12x12&quot;,&quot;sequenceNumber&quot;:10},{&quot;input&quot;:&quot;left click&quot;,&quot;eventType&quot;:&quot;mousedown&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:45.000Z&quot;,&quot;question&quot;:&quot;12x12&quot;,&quot;sequenceNumber&quot;:10},{&quot;input&quot;:&quot;Enter&quot;,&quot;eventType&quot;:&quot;click&quot;,&quot;clientTimestamp&quot;:&quot;2019-03-22T08:48:45.005Z&quot;,&quot;question&quot;:&quot;12x12&quot;,&quot;sequenceNumber&quot;:10}], ${__evalVar(JsonParameters)} }</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">30000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST-Submit-Feedback" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;QueueMessage&gt;&lt;MessageText&gt;${__base64Encode(${feedbackMessage})}&lt;/MessageText&gt;&lt;/QueueMessage&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(pupilAppHost,localAppHost)}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(protocol,http)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">pupil-feedback/messages?${feedbackToken}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-233071422">feedbackMessage</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-555930384">
                <stringProp name="-238277401">{&quot;inputType&quot;:2,&quot;satisfactionRating&quot;:1,&quot;comments&quot;:&quot;loadTest&quot;,&quot;checkCode&quot;:&quot;${checkCode}&quot;,&quot;accessToken&quot;:&quot;token-disabled&quot;}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">10000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
