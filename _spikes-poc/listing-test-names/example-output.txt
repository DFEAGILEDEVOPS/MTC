"async-retry default behaviour function should execute and return as expected when no error is thrown"
"async-retry default behaviour subsequent attempts should not be made by default"
"async-retry default behaviour total number of attempts should match retry strategy"
"async-retry default behaviour should complete if retry attempts do not exceed maximum number of retries in strategy"
"async-retry default behaviour should fail if retries made exceeds configured maximum number of retries"
"async-retry sql specific behaviour should not attempt retry if not one of mssql error types"
"async-retry sql specific behaviour should not attempt retry if mssql connection error not a timeout"
"async-retry sql specific behaviour should not attempt retry if mssql request error not a timeout"
"async-retry sql specific behaviour should not attempt retry if mssql prepared statement error not a timeout"
"async-retry sql specific behaviour should not attempt retry if mssql transaction error not a timeout"
"async-retry sql specific behaviour should attempt retry if mssql connection error a timeout"
"async-retry sql specific behaviour should attempt retry if mssql request error a timeout"
"async-retry sql specific behaviour should attempt retry if mssql prepared statement error a timeout"
"async-retry sql specific behaviour should attempt retry if mssql transaction error a timeout"
"pupil-login.service subject should be defined"
"pupil-login.service error is thrown if message version is not supported"
"pupil-login.service data service called if live check"
"pupil-login.service data service  called if practice check"
"pupil-login.service entry is added to pupilEvent table"
"pupil-prefs.service subject should be defined"
"pupil-prefs.service all updates should be sent in one call to data service"
"pupil-prefs.service colour contrast only update makes relevant data change"
"pupil-prefs.service colour contrast only update makes relevant data change"
"school-results-cache-determiner.service it is defined"
"school-results-cache-determiner.service no schools are cached when the config is set to 0"
"school-results-cache-determiner.service it sends messages to cache all schools when the config is set to 2 "
"school-results-cache-determiner.service it does not send any messages to cache schools when the config is set to 1 (default) but the datetime is too early"
"school-results-cache-determiner.service it does not send any messages to cache schools when the config is set to 1 (default) but the datetime is too late"
"school-results-cache-determiner.service it sends messages to cache schools when the config is set to 1 (default) and the date is between the live check close and the first monday after at 6am"
"school-results-cache-determiner.service it throws an error if the schools object is not an array"
"school-results-cache-determiner.service if an unknown config value is provided it calls `dateRangeCheckAndCache()`"
"batch-request-builder/v2 should be defined"
"batch-request-builder/v2 checkComplete notification type should create corresponding requests and be executed"
"batch-request-builder/v2 checkInvalid notification type should create corresponding requests and be executed"
"batch-request-builder/v2 checkReceived notification type should create corresponding requests and be executed"
"batch-request-builder/v2 processing multiple message should create corresponding number of requests"
"prepared-check-sync.service subject should be defined"
"prepared-check-sync.service active checks for pupil are looked up and returns early if none found"
"prepared-check-sync.service each active check is sent to the merger service"
"prepared-check-sync.service updated check is submitted back to redis with TTL preserved"
"prepared-check-sync.service error is thrown if preparedCheck is not found"
"prepared-check-sync.service error is thrown if ttl is not found"
"school-pin-replenishment.service should be defined"
"school-pin-replenishment.service should create a new pin for each school that requires one when no school uuid provided"
"school-pin-replenishment.service it should fail after making configured number of attempts"
"school-pin-replenishment.service if no schools to process, service returns early"
"school-pin-replenishment.service only updates single school specified when schoolUUID passed as param"
"school-pin-replenishment.service returns generated pin when single schoolUUID passed as param"
"check-validator/v1 subject under test should be defined"
"check-validator/v1 error should be thrown when receivedCheck reference is an empty array"
"check-validator/v1 validation error is recorded on receivedCheck entity when archive property is missing"
"check-validator/v1 archive is decompressesed when archive property present"
"check-validator/v1 submitted check with missing properties are recorded as validation errors against the entity"
"check-validator/v1 validation errors are reported to check notification queue"
"check-validator/v1 submitted check with no validation errors is marked as valid"
"check-validator/v1 submitted check with no validation errors has answers added to receivedCheck entity"
"check-validator/v1 check marking message is created and added to output binding array"
"check-allocator/v1 it should be defined"
"check-allocator/v1 an error is thrown when school UUID is not a valid UUID"
"check-allocator/v1 it should fetch all pupils within specified school from data service"
"check-allocator/v1 an allocation is created for all pupils when none have one"
"check-allocator/v1 an allocation is only created for pupils that do not currently have one"
"check-allocator/v1 the top level object is stamped with last utc datetime of last replenishment"
"check-allocator/v1 the cache is updated with all school pupils"
"result.service status it is defined"
"result.service status it has a public `status` property"
"result.service status calling status() returns an object that describes the pupils status's"
"result.service sort it has a method called sort"
"result.service getPupilResultDataFromDb returns an object"
"result.service getPupilResultDataFromDb it has a generatedAt prop"
"result.service getPupilResultDataFromDb it has a schoolGuid prop"
"result.service getPupilResultDataFromDb it throws an error if the school is not found"
"result.service getPupilResultDataFromDb it sorts the pupils alphabetically"
"result.service getPupilResultDataFromDb it sorts the pupils alphabetically - if the lastNames are the same it then sorts by foreName"
"result.service getPupilResultDataFromDb sorts the pupils alphabetically - if the lastname and forenames are the same it sorts by dob"
"result.service getPupilResultDataFromDb sorts the pupils alphabetically - if the lastname, forename and dob are the same it sorts by middlenames"
"result.service getPupilResultDataFromDb returns the pupil group_id"
"result.service getPupilResultDataFromDb returns the pupil full name"
"result.service getPupilResultDataFromDb returns the pupil full name with middle names if pupil differentiation requires a middleName sort"
"result.service getPupilResultDataFromDb it returns a status field for each pupil"
"result.service getPupilResultDataFromDb it returns a score field for each pupil that took the check"
"result.service cacheResultData it throws an error if schoolGuid is not provided"
"result.service cacheResultData it saves the result to redis if it queried the database"
"result.service createPupilData it assigns a score to a pupil with a completed check"
"result.service assignStatus it describes complete pupils with no status"
"result.service assignStatus it describes incomplete pupils with an incomplete status"
"result.service assignStatus it describes pupils who did not take a check"
"result.service assignStatus it describes pupils who are marked as not attending"
"school-pin-sampler subject should be defined"
"school-pin-sampler returns a set of generated pins equal to the size requested"
"school-pin-sampler throws error if sample size is larger than all available timezones"
"school-pin-sampler each sample has a pin and expiry time"
"school-pin-sampler does not randomise if not specified"
"school-pin-sampler does randomise if specified"
"GiasSyncService subject should be defined"
"GiasSyncService GetExtract:should propogate original error details when a fault occurs"
"GiasSyncService GetExtract: soapMessage should reflect extract specification"
"GiasSyncService when namespace is not defined an error is thrown"
"GiasSyncService when serviceUrl is not defined an error is thrown"
"GiasSyncService when username is not defined an error is thrown"
"GiasSyncService when password is not defined an error is thrown"
"GiasSyncService GetExtract: verify returned data structure"
"GiasSyncService GetExtract:should return an empty object if no results"
"GiasSyncService e2e:GetEstablishment"
"GiasSyncService e2e:GetExtract"
"check-marker/v1 subject under test should be defined"
"check-marker/v1 error is thrown when receivedCheck reference is not found"
"check-marker/v1 error is recorded against entity when answers is empty"
"check-marker/v1 error is recorded against entity when answers is not an array"
"check-marker/v1 error is recorded against entity when checkForm cannot be found by checkCode"
"check-marker/v1 error is recorded against entity when checkForm data is not valid JSON"
"check-marker/v1 error is recorded against entity when checkForm lookup throws error"
"check-marker/v1 error is recorded against entity when checkForm data is not a populated array"
"check-marker/v1 marking updates entity with mark, maxMarks and timestamp: both answers correct"
"check-marker/v1 marking updates entity with mark, maxMarks and timestamp: one answer wrong"
"check-marker/v1 marking updates check result entity with mark, maxMarks and timestamp: both answers wrong"
"check-marker/v1 check notification is dispatched when marking successful"
"check-marker/v1 check notification is dispatched when marking unsuccessful"
"check-marker/v1 marking uses the first provided answer if there are duplicates"
"check-marker/v1 marking is correct even if an answer is missing from the input"
"pupil-identification.service If two pupils have the same surname and forename, it uses the date of birth to differentiate"
"pupil-identification.service If two pupils have the same surname, forename and date of birth, it differentiates on the middle names"
"pupil-identification.service if the names are different it doenst show dob or middle names"
"pupil-identification.service it formats the dateOfBirth property to be the GDS short date"
"soap-message-builder subject should be defined"
"soap-message-builder returns an xml structure with namespace as specified"
"soap-message-builder when credentials specified a security header is included containing credentials"
"soap-message-builder when message expiry specified security header details creation and expiry values"
"soap-message-builder message should have a body defined"
"soap-message-builder body should contain parameters when specified"
"pupil-auth.service subject is defined"
"pupil-auth.service 401 returned if request body missing"
"pupil-auth.service 401 returned if pupilPin missing"
"pupil-auth.service 401 returned if schoolPin missing"
"pupil-auth.service options method returns 204"
"pupil-auth.service post method attempts redis lookup of preparedCheck"
"pupil-auth.service invalid credentials returns 401"
"pupil-auth.service valid credentials returns 200"
"pupil-auth.service expire if live check"
"pupil-auth.service pupilLogin message is put on the queue"
"pupil-auth.service expected headers are set when returning prepared check"
"check-started.service should be defined"
"check-started.service it appends the check-started entry to azure table storage output binding"
"check-started.service it drops preparedCheck from redis if a live check"
"check-started.service it does not drop preparedCheck from redis if a practice check"
"check-started.service it does not attempt to drop from redis if no prepared check found"
"sas token service should be defined"
"sas token service should return url provided by queue service implementation"
"sas token service should return token provided by queue service implementation"
"sas token service should throw an error when expiryDate is invalid"
"random-generator subject should be defined"
"random-generator generateFromChars returns a random string"
"random-generator generateFromChars throws an error if chars are not given"
"random-generator generateFromChars throws an error if chars are too long"
"random-generator generateNumberFromRange should generate a random number in specific range"
"multipart message parser subject should be defined"
"multipart message parser extractBoundaryIdFrom error thrown if content-type not found"
"multipart message parser extractBoundaryIdFrom throw error if response not multipart message"
"multipart message parser extractBoundaryIdFrom throw error if boundary id not defined"
"multipart message parser extractBoundaryIdFrom boundary id is extracted when present in header"
"multipart message parser parse returns parts array"
"pupil feedback service subject should be defined"
"pupil feedback service unsupported message version throws error"
"pupil feedback service feedback message should be added to feedback table binding"
"pupil feedback service all expected message properties should be inserted into feedback table"
"school-requires-new-pin-predicate subject should be defined"
"school-requires-new-pin-predicate indicates pin required when pin is undefined"
"school-requires-new-pin-predicate indicates pin required when pin is undefined"
"school-requires-new-pin-predicate indicates pin not required when expiry date in future"
"school-requires-new-pin-predicate indicates pin required when expiry date in future but pin not defined"
"school-requires-new-pin-predicate indicates pin required when expiry date not defined"
"school-requires-new-pin-predicate indicates pin required when expiry date has passed"
"attachmentId parser subject should be defined"
"attachmentId parser error is thrown when argument not provided"
"attachmentId parser error is thrown when extract data incomplete"
"attachmentId parser attachment id is returned when found"
"attachmentId parser html encoded @ char is decoded before return"
"school-pin-generator subject is defined"
"school-pin-generator school pin must be 8 chars in length"
"school-pin-generator school pin must be 3 char word + 2 digits + 3 char word"
"school-pin-generator it sources 2 digit number and both random words from generator on each call"
"prepared-check-merge.service subject should be defined"
"prepared-check-merge.service if no new AA config passed in, defaults are returned"
"prepared-check-merge.service creates a new config based on the new aa settings and the config supplied"
"check-notifier/v1 should be defined"
"check-notifier/v1 checkComplete notification should update check as complete"
"check-notifier/v1 checkInvalid notification should update check as processing failed"
"check-notifier/v1 checkReceived notification should update check as received"
"primitiveToBoolean should be true if its 1 / \"1\" or \"true\""
"primitiveToBoolean should be false if its 0 / \"0\" or \"false\""
"primitiveToBoolean should be false if its null or undefined"
"primitiveToBoolean shoultoBool.d pass through booleans - useful for undefined checks"
"school-pin-expiry-generator subject should be defined"
"school-pin-expiry-generator if current time between 0000 - 1600, set to 1600 same day"
"school-pin-expiry-generator if current time between 1600 - 2359, set to 1600 next day"
"school-pin-expiry-generator if override expiry flag set to true, expire at end of day"
"school-pin-expiry-generator sce schools if current time between 0000 - 1600, set to 1600 same day"
"school-pin-expiry-generator sce schools if current time between 1600 - 2359, set to 1600 next day"
"school-pin-expiry-generator sce schools if override expiry flag set to true, expire at end of day"
"max-attemps-calculator subject should be defined"
"max-attemps-calculator returns zero if word count is zero"
"max-attemps-calculator returns zero if number char count is zero"
"max-attemps-calculator calculates max attempts based upon combination of two word sets and two sets of chars"
"PupilAllocationService subject should be defined"
"PupilAllocationService a pin should be generated for a pupil"
"PupilAllocationService a form should be allocated for a pupil"
"PupilAllocationService the allocation should be timestamped with current UTC"
"check-window.service should be defined"
"check-window.service check window is retrieved from database when not found in cache"
"check-window.service check window is added to cache after retrieving from database"
"check-window.service check window is returned straight from cache when present"
"allowed-words.service subject should be defined"
"allowed-words.service allowed words must be a minimum set of 5"
"allowed-words.service allowed words must be sanitised for banned words before use"
"CheckPinExpiryService instantiates an object"
"CheckPinExpiryService has a method called process"
"CheckPinExpiryService modifies the database"
"utc-offset-resolver should be defined"
"utc-offset-resolver it should resolve utc offset correctly"
"compression-service should be defined"
"compression-service should compress a string"
