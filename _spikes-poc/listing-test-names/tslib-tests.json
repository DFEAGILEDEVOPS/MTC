{
  "numFailedTestSuites": 0,
  "numFailedTests": 0,
  "numPassedTestSuites": 35,
  "numPassedTests": 216,
  "numPendingTestSuites": 0,
  "numPendingTests": 4,
  "numRuntimeErrorTestSuites": 0,
  "numTodoTests": 1,
  "numTotalTestSuites": 35,
  "numTotalTests": 221,
  "openHandles": [],
  "snapshot": {
    "added": 0,
    "didUpdate": false,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0
  },
  "startTime": 1600940511782,
  "success": true,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "async-retry",
            "default behaviour"
          ],
          "failureMessages": [],
          "fullName": "async-retry default behaviour function should execute and return as expected when no error is thrown",
          "location": null,
          "status": "passed",
          "title": "function should execute and return as expected when no error is thrown"
        },
        {
          "ancestorTitles": [
            "async-retry",
            "default behaviour"
          ],
          "failureMessages": [],
          "fullName": "async-retry default behaviour subsequent attempts should not be made by default",
          "location": null,
          "status": "passed",
          "title": "subsequent attempts should not be made by default"
        },
        {
          "ancestorTitles": [
            "async-retry",
            "default behaviour"
          ],
          "failureMessages": [],
          "fullName": "async-retry default behaviour total number of attempts should match retry strategy",
          "location": null,
          "status": "passed",
          "title": "total number of attempts should match retry strategy"
        },
        {
          "ancestorTitles": [
            "async-retry",
            "default behaviour"
          ],
          "failureMessages": [],
          "fullName": "async-retry default behaviour should complete if retry attempts do not exceed maximum number of retries in strategy",
          "location": null,
          "status": "passed",
          "title": "should complete if retry attempts do not exceed maximum number of retries in strategy"
        },
        {
          "ancestorTitles": [
            "async-retry",
            "default behaviour"
          ],
          "failureMessages": [],
          "fullName": "async-retry default behaviour should fail if retries made exceeds configured maximum number of retries",
          "location": null,
          "status": "passed",
          "title": "should fail if retries made exceeds configured maximum number of retries"
        },
        {
          "ancestorTitles": [
            "async-retry",
            "sql specific behaviour"
          ],
          "failureMessages": [],
          "fullName": "async-retry sql specific behaviour should not attempt retry if not one of mssql error types",
          "location": null,
          "status": "passed",
          "title": "should not attempt retry if not one of mssql error types"
        },
        {
          "ancestorTitles": [
            "async-retry",
            "sql specific behaviour"
          ],
          "failureMessages": [],
          "fullName": "async-retry sql specific behaviour should not attempt retry if mssql connection error not a timeout",
          "location": null,
          "status": "passed",
          "title": "should not attempt retry if mssql connection error not a timeout"
        },
        {
          "ancestorTitles": [
            "async-retry",
            "sql specific behaviour"
          ],
          "failureMessages": [],
          "fullName": "async-retry sql specific behaviour should not attempt retry if mssql request error not a timeout",
          "location": null,
          "status": "passed",
          "title": "should not attempt retry if mssql request error not a timeout"
        },
        {
          "ancestorTitles": [
            "async-retry",
            "sql specific behaviour"
          ],
          "failureMessages": [],
          "fullName": "async-retry sql specific behaviour should not attempt retry if mssql prepared statement error not a timeout",
          "location": null,
          "status": "passed",
          "title": "should not attempt retry if mssql prepared statement error not a timeout"
        },
        {
          "ancestorTitles": [
            "async-retry",
            "sql specific behaviour"
          ],
          "failureMessages": [],
          "fullName": "async-retry sql specific behaviour should not attempt retry if mssql transaction error not a timeout",
          "location": null,
          "status": "passed",
          "title": "should not attempt retry if mssql transaction error not a timeout"
        },
        {
          "ancestorTitles": [
            "async-retry",
            "sql specific behaviour"
          ],
          "failureMessages": [],
          "fullName": "async-retry sql specific behaviour should attempt retry if mssql connection error a timeout",
          "location": null,
          "status": "passed",
          "title": "should attempt retry if mssql connection error a timeout"
        },
        {
          "ancestorTitles": [
            "async-retry",
            "sql specific behaviour"
          ],
          "failureMessages": [],
          "fullName": "async-retry sql specific behaviour should attempt retry if mssql request error a timeout",
          "location": null,
          "status": "passed",
          "title": "should attempt retry if mssql request error a timeout"
        },
        {
          "ancestorTitles": [
            "async-retry",
            "sql specific behaviour"
          ],
          "failureMessages": [],
          "fullName": "async-retry sql specific behaviour should attempt retry if mssql prepared statement error a timeout",
          "location": null,
          "status": "passed",
          "title": "should attempt retry if mssql prepared statement error a timeout"
        },
        {
          "ancestorTitles": [
            "async-retry",
            "sql specific behaviour"
          ],
          "failureMessages": [],
          "fullName": "async-retry sql specific behaviour should attempt retry if mssql transaction error a timeout",
          "location": null,
          "status": "passed",
          "title": "should attempt retry if mssql transaction error a timeout"
        }
      ],
      "endTime": 1600940516309,
      "message": "",
      "name": "tslib/src/sql/async-retry.spec.ts",
      "startTime": 1600940512743,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "pupil-login.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-login.service subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "pupil-login.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-login.service error is thrown if message version is not supported",
          "location": null,
          "status": "passed",
          "title": "error is thrown if message version is not supported"
        },
        {
          "ancestorTitles": [
            "pupil-login.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-login.service data service called if live check",
          "location": null,
          "status": "passed",
          "title": "data service called if live check"
        },
        {
          "ancestorTitles": [
            "pupil-login.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-login.service data service  called if practice check",
          "location": null,
          "status": "passed",
          "title": "data service  called if practice check"
        },
        {
          "ancestorTitles": [
            "pupil-login.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-login.service entry is added to pupilEvent table",
          "location": null,
          "status": "passed",
          "title": "entry is added to pupilEvent table"
        }
      ],
      "endTime": 1600940516325,
      "message": "",
      "name": "tslib/src/functions/pupil-login/pupil-login.service.spec.ts",
      "startTime": 1600940512764,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "pupil-prefs.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-prefs.service subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "pupil-prefs.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-prefs.service all updates should be sent in one call to data service",
          "location": null,
          "status": "passed",
          "title": "all updates should be sent in one call to data service"
        },
        {
          "ancestorTitles": [
            "pupil-prefs.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-prefs.service colour contrast only update makes relevant data change",
          "location": null,
          "status": "passed",
          "title": "colour contrast only update makes relevant data change"
        },
        {
          "ancestorTitles": [
            "pupil-prefs.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-prefs.service colour contrast only update makes relevant data change",
          "location": null,
          "status": "passed",
          "title": "colour contrast only update makes relevant data change"
        }
      ],
      "endTime": 1600940516341,
      "message": "",
      "name": "tslib/src/functions/pupil-prefs/pupil-prefs.service.spec.ts",
      "startTime": 1600940512746,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "school-results-cache-determiner.service"
          ],
          "failureMessages": [],
          "fullName": "school-results-cache-determiner.service it is defined",
          "location": null,
          "status": "passed",
          "title": "it is defined"
        },
        {
          "ancestorTitles": [
            "school-results-cache-determiner.service"
          ],
          "failureMessages": [],
          "fullName": "school-results-cache-determiner.service no schools are cached when the config is set to 0",
          "location": null,
          "status": "passed",
          "title": "no schools are cached when the config is set to 0"
        },
        {
          "ancestorTitles": [
            "school-results-cache-determiner.service"
          ],
          "failureMessages": [],
          "fullName": "school-results-cache-determiner.service it sends messages to cache all schools when the config is set to 2 ",
          "location": null,
          "status": "passed",
          "title": "it sends messages to cache all schools when the config is set to 2 "
        },
        {
          "ancestorTitles": [
            "school-results-cache-determiner.service"
          ],
          "failureMessages": [],
          "fullName": "school-results-cache-determiner.service it does not send any messages to cache schools when the config is set to 1 (default) but the datetime is too early",
          "location": null,
          "status": "passed",
          "title": "it does not send any messages to cache schools when the config is set to 1 (default) but the datetime is too early"
        },
        {
          "ancestorTitles": [
            "school-results-cache-determiner.service"
          ],
          "failureMessages": [],
          "fullName": "school-results-cache-determiner.service it does not send any messages to cache schools when the config is set to 1 (default) but the datetime is too late",
          "location": null,
          "status": "passed",
          "title": "it does not send any messages to cache schools when the config is set to 1 (default) but the datetime is too late"
        },
        {
          "ancestorTitles": [
            "school-results-cache-determiner.service"
          ],
          "failureMessages": [],
          "fullName": "school-results-cache-determiner.service it sends messages to cache schools when the config is set to 1 (default) and the date is between the live check close and the first monday after at 6am",
          "location": null,
          "status": "passed",
          "title": "it sends messages to cache schools when the config is set to 1 (default) and the date is between the live check close and the first monday after at 6am"
        },
        {
          "ancestorTitles": [
            "school-results-cache-determiner.service"
          ],
          "failureMessages": [],
          "fullName": "school-results-cache-determiner.service it throws an error if the schools object is not an array",
          "location": null,
          "status": "passed",
          "title": "it throws an error if the schools object is not an array"
        },
        {
          "ancestorTitles": [
            "school-results-cache-determiner.service"
          ],
          "failureMessages": [],
          "fullName": "school-results-cache-determiner.service if an unknown config value is provided it calls `dateRangeCheckAndCache()`",
          "location": null,
          "status": "passed",
          "title": "if an unknown config value is provided it calls `dateRangeCheckAndCache()`"
        }
      ],
      "endTime": 1600940516343,
      "message": "",
      "name": "tslib/src/functions/school-results-cache-determiner/school-results-cache-determiner.service.spec.ts",
      "startTime": 1600940512772,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "batch-request-builder/v2"
          ],
          "failureMessages": [],
          "fullName": "batch-request-builder/v2 should be defined",
          "location": null,
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": [
            "batch-request-builder/v2"
          ],
          "failureMessages": [],
          "fullName": "batch-request-builder/v2 checkComplete notification type should create corresponding requests and be executed",
          "location": null,
          "status": "passed",
          "title": "checkComplete notification type should create corresponding requests and be executed"
        },
        {
          "ancestorTitles": [
            "batch-request-builder/v2"
          ],
          "failureMessages": [],
          "fullName": "batch-request-builder/v2 checkInvalid notification type should create corresponding requests and be executed",
          "location": null,
          "status": "passed",
          "title": "checkInvalid notification type should create corresponding requests and be executed"
        },
        {
          "ancestorTitles": [
            "batch-request-builder/v2"
          ],
          "failureMessages": [],
          "fullName": "batch-request-builder/v2 checkReceived notification type should create corresponding requests and be executed",
          "location": null,
          "status": "passed",
          "title": "checkReceived notification type should create corresponding requests and be executed"
        },
        {
          "ancestorTitles": [
            "batch-request-builder/v2"
          ],
          "failureMessages": [],
          "fullName": "batch-request-builder/v2 processing multiple message should create corresponding number of requests",
          "location": null,
          "status": "passed",
          "title": "processing multiple message should create corresponding number of requests"
        }
      ],
      "endTime": 1600940516398,
      "message": "",
      "name": "tslib/src/functions/check-notifier-batch/batch-check-notifier.service.spec.ts",
      "startTime": 1600940512780,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "prepared-check-sync.service"
          ],
          "failureMessages": [],
          "fullName": "prepared-check-sync.service subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "prepared-check-sync.service"
          ],
          "failureMessages": [],
          "fullName": "prepared-check-sync.service active checks for pupil are looked up and returns early if none found",
          "location": null,
          "status": "passed",
          "title": "active checks for pupil are looked up and returns early if none found"
        },
        {
          "ancestorTitles": [
            "prepared-check-sync.service"
          ],
          "failureMessages": [],
          "fullName": "prepared-check-sync.service each active check is sent to the merger service",
          "location": null,
          "status": "passed",
          "title": "each active check is sent to the merger service"
        },
        {
          "ancestorTitles": [
            "prepared-check-sync.service"
          ],
          "failureMessages": [],
          "fullName": "prepared-check-sync.service updated check is submitted back to redis with TTL preserved",
          "location": null,
          "status": "passed",
          "title": "updated check is submitted back to redis with TTL preserved"
        },
        {
          "ancestorTitles": [
            "prepared-check-sync.service"
          ],
          "failureMessages": [],
          "fullName": "prepared-check-sync.service error is thrown if preparedCheck is not found",
          "location": null,
          "status": "passed",
          "title": "error is thrown if preparedCheck is not found"
        },
        {
          "ancestorTitles": [
            "prepared-check-sync.service"
          ],
          "failureMessages": [],
          "fullName": "prepared-check-sync.service error is thrown if ttl is not found",
          "location": null,
          "status": "passed",
          "title": "error is thrown if ttl is not found"
        }
      ],
      "endTime": 1600940516403,
      "message": "",
      "name": "tslib/src/functions/check-sync/prepared-check-sync.service.spec.ts",
      "startTime": 1600940512745,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "school-pin-replenishment.service"
          ],
          "failureMessages": [],
          "fullName": "school-pin-replenishment.service should be defined",
          "location": null,
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": [
            "school-pin-replenishment.service"
          ],
          "failureMessages": [],
          "fullName": "school-pin-replenishment.service should create a new pin for each school that requires one when no school uuid provided",
          "location": null,
          "status": "passed",
          "title": "should create a new pin for each school that requires one when no school uuid provided"
        },
        {
          "ancestorTitles": [
            "school-pin-replenishment.service"
          ],
          "failureMessages": [],
          "fullName": "school-pin-replenishment.service it should fail after making configured number of attempts",
          "location": null,
          "status": "passed",
          "title": "it should fail after making configured number of attempts"
        },
        {
          "ancestorTitles": [
            "school-pin-replenishment.service"
          ],
          "failureMessages": [],
          "fullName": "school-pin-replenishment.service if no schools to process, service returns early",
          "location": null,
          "status": "passed",
          "title": "if no schools to process, service returns early"
        },
        {
          "ancestorTitles": [
            "school-pin-replenishment.service"
          ],
          "failureMessages": [],
          "fullName": "school-pin-replenishment.service only updates single school specified when schoolUUID passed as param",
          "location": null,
          "status": "passed",
          "title": "only updates single school specified when schoolUUID passed as param"
        },
        {
          "ancestorTitles": [
            "school-pin-replenishment.service"
          ],
          "failureMessages": [],
          "fullName": "school-pin-replenishment.service returns generated pin when single schoolUUID passed as param",
          "location": null,
          "status": "passed",
          "title": "returns generated pin when single schoolUUID passed as param"
        }
      ],
      "endTime": 1600940516453,
      "message": "",
      "name": "tslib/src/functions/school-pin-generator/school-pin-replenishment.service.spec.ts",
      "startTime": 1600940512765,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "check-validator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-validator/v1 subject under test should be defined",
          "location": null,
          "status": "passed",
          "title": "subject under test should be defined"
        },
        {
          "ancestorTitles": [
            "check-validator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-validator/v1 error should be thrown when receivedCheck reference is an empty array",
          "location": null,
          "status": "passed",
          "title": "error should be thrown when receivedCheck reference is an empty array"
        },
        {
          "ancestorTitles": [
            "check-validator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-validator/v1 validation error is recorded on receivedCheck entity when archive property is missing",
          "location": null,
          "status": "passed",
          "title": "validation error is recorded on receivedCheck entity when archive property is missing"
        },
        {
          "ancestorTitles": [
            "check-validator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-validator/v1 archive is decompressesed when archive property present",
          "location": null,
          "status": "passed",
          "title": "archive is decompressesed when archive property present"
        },
        {
          "ancestorTitles": [
            "check-validator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-validator/v1 submitted check with missing properties are recorded as validation errors against the entity",
          "location": null,
          "status": "passed",
          "title": "submitted check with missing properties are recorded as validation errors against the entity"
        },
        {
          "ancestorTitles": [
            "check-validator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-validator/v1 validation errors are reported to check notification queue",
          "location": null,
          "status": "passed",
          "title": "validation errors are reported to check notification queue"
        },
        {
          "ancestorTitles": [
            "check-validator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-validator/v1 submitted check with no validation errors is marked as valid",
          "location": null,
          "status": "passed",
          "title": "submitted check with no validation errors is marked as valid"
        },
        {
          "ancestorTitles": [
            "check-validator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-validator/v1 submitted check with no validation errors has answers added to receivedCheck entity",
          "location": null,
          "status": "passed",
          "title": "submitted check with no validation errors has answers added to receivedCheck entity"
        },
        {
          "ancestorTitles": [
            "check-validator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-validator/v1 check marking message is created and added to output binding array",
          "location": null,
          "status": "passed",
          "title": "check marking message is created and added to output binding array"
        }
      ],
      "endTime": 1600940516484,
      "message": "",
      "name": "tslib/src/functions/check-validator/check-validator.v1.spec.ts",
      "startTime": 1600940512743,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "check-allocator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-allocator/v1 it should be defined",
          "location": null,
          "status": "passed",
          "title": "it should be defined"
        },
        {
          "ancestorTitles": [
            "check-allocator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-allocator/v1 an error is thrown when school UUID is not a valid UUID",
          "location": null,
          "status": "passed",
          "title": "an error is thrown when school UUID is not a valid UUID"
        },
        {
          "ancestorTitles": [
            "check-allocator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-allocator/v1 it should fetch all pupils within specified school from data service",
          "location": null,
          "status": "passed",
          "title": "it should fetch all pupils within specified school from data service"
        },
        {
          "ancestorTitles": [
            "check-allocator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-allocator/v1 an allocation is created for all pupils when none have one",
          "location": null,
          "status": "passed",
          "title": "an allocation is created for all pupils when none have one"
        },
        {
          "ancestorTitles": [
            "check-allocator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-allocator/v1 an allocation is only created for pupils that do not currently have one",
          "location": null,
          "status": "passed",
          "title": "an allocation is only created for pupils that do not currently have one"
        },
        {
          "ancestorTitles": [
            "check-allocator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-allocator/v1 the top level object is stamped with last utc datetime of last replenishment",
          "location": null,
          "status": "passed",
          "title": "the top level object is stamped with last utc datetime of last replenishment"
        },
        {
          "ancestorTitles": [
            "check-allocator/v1"
          ],
          "failureMessages": [],
          "fullName": "check-allocator/v1 the cache is updated with all school pupils",
          "location": null,
          "status": "passed",
          "title": "the cache is updated with all school pupils"
        }
      ],
      "endTime": 1600940516840,
      "message": "",
      "name": "tslib/src/functions/check-allocator/check-allocator.spec.ts",
      "startTime": 1600940512750,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "result.service",
            "status"
          ],
          "failureMessages": [],
          "fullName": "result.service status it is defined",
          "location": null,
          "status": "passed",
          "title": "it is defined"
        },
        {
          "ancestorTitles": [
            "result.service",
            "status"
          ],
          "failureMessages": [],
          "fullName": "result.service status it has a public `status` property",
          "location": null,
          "status": "passed",
          "title": "it has a public `status` property"
        },
        {
          "ancestorTitles": [
            "result.service",
            "status"
          ],
          "failureMessages": [],
          "fullName": "result.service status calling status() returns an object that describes the pupils status's",
          "location": null,
          "status": "passed",
          "title": "calling status() returns an object that describes the pupils status's"
        },
        {
          "ancestorTitles": [
            "result.service",
            "sort"
          ],
          "failureMessages": [],
          "fullName": "result.service sort it has a method called sort",
          "location": null,
          "status": "passed",
          "title": "it has a method called sort"
        },
        {
          "ancestorTitles": [
            "result.service",
            "getPupilResultDataFromDb"
          ],
          "failureMessages": [],
          "fullName": "result.service getPupilResultDataFromDb returns an object",
          "location": null,
          "status": "passed",
          "title": "returns an object"
        },
        {
          "ancestorTitles": [
            "result.service",
            "getPupilResultDataFromDb"
          ],
          "failureMessages": [],
          "fullName": "result.service getPupilResultDataFromDb it has a generatedAt prop",
          "location": null,
          "status": "passed",
          "title": "it has a generatedAt prop"
        },
        {
          "ancestorTitles": [
            "result.service",
            "getPupilResultDataFromDb"
          ],
          "failureMessages": [],
          "fullName": "result.service getPupilResultDataFromDb it has a schoolGuid prop",
          "location": null,
          "status": "passed",
          "title": "it has a schoolGuid prop"
        },
        {
          "ancestorTitles": [
            "result.service",
            "getPupilResultDataFromDb"
          ],
          "failureMessages": [],
          "fullName": "result.service getPupilResultDataFromDb it throws an error if the school is not found",
          "location": null,
          "status": "passed",
          "title": "it throws an error if the school is not found"
        },
        {
          "ancestorTitles": [
            "result.service",
            "getPupilResultDataFromDb"
          ],
          "failureMessages": [],
          "fullName": "result.service getPupilResultDataFromDb it sorts the pupils alphabetically",
          "location": null,
          "status": "passed",
          "title": "it sorts the pupils alphabetically"
        },
        {
          "ancestorTitles": [
            "result.service",
            "getPupilResultDataFromDb"
          ],
          "failureMessages": [],
          "fullName": "result.service getPupilResultDataFromDb it sorts the pupils alphabetically - if the lastNames are the same it then sorts by foreName",
          "location": null,
          "status": "passed",
          "title": "it sorts the pupils alphabetically - if the lastNames are the same it then sorts by foreName"
        },
        {
          "ancestorTitles": [
            "result.service",
            "getPupilResultDataFromDb"
          ],
          "failureMessages": [],
          "fullName": "result.service getPupilResultDataFromDb sorts the pupils alphabetically - if the lastname and forenames are the same it sorts by dob",
          "location": null,
          "status": "passed",
          "title": "sorts the pupils alphabetically - if the lastname and forenames are the same it sorts by dob"
        },
        {
          "ancestorTitles": [
            "result.service",
            "getPupilResultDataFromDb"
          ],
          "failureMessages": [],
          "fullName": "result.service getPupilResultDataFromDb sorts the pupils alphabetically - if the lastname, forename and dob are the same it sorts by middlenames",
          "location": null,
          "status": "passed",
          "title": "sorts the pupils alphabetically - if the lastname, forename and dob are the same it sorts by middlenames"
        },
        {
          "ancestorTitles": [
            "result.service",
            "getPupilResultDataFromDb"
          ],
          "failureMessages": [],
          "fullName": "result.service getPupilResultDataFromDb returns the pupil group_id",
          "location": null,
          "status": "passed",
          "title": "returns the pupil group_id"
        },
        {
          "ancestorTitles": [
            "result.service",
            "getPupilResultDataFromDb"
          ],
          "failureMessages": [],
          "fullName": "result.service getPupilResultDataFromDb returns the pupil full name",
          "location": null,
          "status": "passed",
          "title": "returns the pupil full name"
        },
        {
          "ancestorTitles": [
            "result.service",
            "getPupilResultDataFromDb"
          ],
          "failureMessages": [],
          "fullName": "result.service getPupilResultDataFromDb returns the pupil full name with middle names if pupil differentiation requires a middleName sort",
          "location": null,
          "status": "passed",
          "title": "returns the pupil full name with middle names if pupil differentiation requires a middleName sort"
        },
        {
          "ancestorTitles": [
            "result.service",
            "getPupilResultDataFromDb"
          ],
          "failureMessages": [],
          "fullName": "result.service getPupilResultDataFromDb it returns a status field for each pupil",
          "location": null,
          "status": "passed",
          "title": "it returns a status field for each pupil"
        },
        {
          "ancestorTitles": [
            "result.service",
            "getPupilResultDataFromDb"
          ],
          "failureMessages": [],
          "fullName": "result.service getPupilResultDataFromDb it returns a score field for each pupil that took the check",
          "location": null,
          "status": "passed",
          "title": "it returns a score field for each pupil that took the check"
        },
        {
          "ancestorTitles": [
            "result.service",
            "cacheResultData"
          ],
          "failureMessages": [],
          "fullName": "result.service cacheResultData it throws an error if schoolGuid is not provided",
          "location": null,
          "status": "passed",
          "title": "it throws an error if schoolGuid is not provided"
        },
        {
          "ancestorTitles": [
            "result.service",
            "cacheResultData"
          ],
          "failureMessages": [],
          "fullName": "result.service cacheResultData it saves the result to redis if it queried the database",
          "location": null,
          "status": "passed",
          "title": "it saves the result to redis if it queried the database"
        },
        {
          "ancestorTitles": [
            "result.service",
            "createPupilData"
          ],
          "failureMessages": [],
          "fullName": "result.service createPupilData it assigns a score to a pupil with a completed check",
          "location": null,
          "status": "passed",
          "title": "it assigns a score to a pupil with a completed check"
        },
        {
          "ancestorTitles": [
            "result.service",
            "assignStatus"
          ],
          "failureMessages": [],
          "fullName": "result.service assignStatus it describes complete pupils with no status",
          "location": null,
          "status": "passed",
          "title": "it describes complete pupils with no status"
        },
        {
          "ancestorTitles": [
            "result.service",
            "assignStatus"
          ],
          "failureMessages": [],
          "fullName": "result.service assignStatus it describes incomplete pupils with an incomplete status",
          "location": null,
          "status": "passed",
          "title": "it describes incomplete pupils with an incomplete status"
        },
        {
          "ancestorTitles": [
            "result.service",
            "assignStatus"
          ],
          "failureMessages": [],
          "fullName": "result.service assignStatus it describes pupils who did not take a check",
          "location": null,
          "status": "passed",
          "title": "it describes pupils who did not take a check"
        },
        {
          "ancestorTitles": [
            "result.service",
            "assignStatus"
          ],
          "failureMessages": [],
          "fullName": "result.service assignStatus it describes pupils who are marked as not attending",
          "location": null,
          "status": "passed",
          "title": "it describes pupils who are marked as not attending"
        }
      ],
      "endTime": 1600940516888,
      "message": "",
      "name": "tslib/src/functions/school-results-cache/services/result.service.spec.ts",
      "startTime": 1600940512749,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "school-pin-sampler"
          ],
          "failureMessages": [],
          "fullName": "school-pin-sampler subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "school-pin-sampler"
          ],
          "failureMessages": [],
          "fullName": "school-pin-sampler returns a set of generated pins equal to the size requested",
          "location": null,
          "status": "passed",
          "title": "returns a set of generated pins equal to the size requested"
        },
        {
          "ancestorTitles": [
            "school-pin-sampler"
          ],
          "failureMessages": [],
          "fullName": "school-pin-sampler throws error if sample size is larger than all available timezones",
          "location": null,
          "status": "passed",
          "title": "throws error if sample size is larger than all available timezones"
        },
        {
          "ancestorTitles": [
            "school-pin-sampler"
          ],
          "failureMessages": [],
          "fullName": "school-pin-sampler each sample has a pin and expiry time",
          "location": null,
          "status": "passed",
          "title": "each sample has a pin and expiry time"
        },
        {
          "ancestorTitles": [
            "school-pin-sampler"
          ],
          "failureMessages": [],
          "fullName": "school-pin-sampler does not randomise if not specified",
          "location": null,
          "status": "passed",
          "title": "does not randomise if not specified"
        },
        {
          "ancestorTitles": [
            "school-pin-sampler"
          ],
          "failureMessages": [],
          "fullName": "school-pin-sampler does randomise if specified",
          "location": null,
          "status": "passed",
          "title": "does randomise if specified"
        }
      ],
      "endTime": 1600940517181,
      "message": "",
      "name": "tslib/src/functions/util-school-pin-sampler/school-pin-sampler.spec.ts",
      "startTime": 1600940516465,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GiasSyncService"
          ],
          "failureMessages": [],
          "fullName": "GiasSyncService subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "GiasSyncService"
          ],
          "failureMessages": [],
          "fullName": "GiasSyncService GetExtract:should propogate original error details when a fault occurs",
          "location": null,
          "status": "passed",
          "title": "GetExtract:should propogate original error details when a fault occurs"
        },
        {
          "ancestorTitles": [
            "GiasSyncService"
          ],
          "failureMessages": [],
          "fullName": "GiasSyncService GetExtract: soapMessage should reflect extract specification",
          "location": null,
          "status": "passed",
          "title": "GetExtract: soapMessage should reflect extract specification"
        },
        {
          "ancestorTitles": [
            "GiasSyncService"
          ],
          "failureMessages": [],
          "fullName": "GiasSyncService when namespace is not defined an error is thrown",
          "location": null,
          "status": "passed",
          "title": "when namespace is not defined an error is thrown"
        },
        {
          "ancestorTitles": [
            "GiasSyncService"
          ],
          "failureMessages": [],
          "fullName": "GiasSyncService when serviceUrl is not defined an error is thrown",
          "location": null,
          "status": "passed",
          "title": "when serviceUrl is not defined an error is thrown"
        },
        {
          "ancestorTitles": [
            "GiasSyncService"
          ],
          "failureMessages": [],
          "fullName": "GiasSyncService when username is not defined an error is thrown",
          "location": null,
          "status": "passed",
          "title": "when username is not defined an error is thrown"
        },
        {
          "ancestorTitles": [
            "GiasSyncService"
          ],
          "failureMessages": [],
          "fullName": "GiasSyncService when password is not defined an error is thrown",
          "location": null,
          "status": "passed",
          "title": "when password is not defined an error is thrown"
        },
        {
          "ancestorTitles": [
            "GiasSyncService"
          ],
          "failureMessages": [],
          "fullName": "GiasSyncService GetExtract: verify returned data structure",
          "location": null,
          "status": "todo",
          "title": "GetExtract: verify returned data structure"
        },
        {
          "ancestorTitles": [
            "GiasSyncService"
          ],
          "failureMessages": [],
          "fullName": "GiasSyncService GetExtract:should return an empty object if no results",
          "location": null,
          "status": "pending",
          "title": "GetExtract:should return an empty object if no results"
        },
        {
          "ancestorTitles": [
            "GiasSyncService"
          ],
          "failureMessages": [],
          "fullName": "GiasSyncService e2e:GetEstablishment",
          "location": null,
          "status": "pending",
          "title": "e2e:GetEstablishment"
        },
        {
          "ancestorTitles": [
            "GiasSyncService"
          ],
          "failureMessages": [],
          "fullName": "GiasSyncService e2e:GetExtract",
          "location": null,
          "status": "pending",
          "title": "e2e:GetExtract"
        }
      ],
      "endTime": 1600940517196,
      "message": "",
      "name": "tslib/src/functions/gias-sync/gias.service.spec.ts",
      "startTime": 1600940516494,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 subject under test should be defined",
          "location": null,
          "status": "passed",
          "title": "subject under test should be defined"
        },
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 error is thrown when receivedCheck reference is not found",
          "location": null,
          "status": "passed",
          "title": "error is thrown when receivedCheck reference is not found"
        },
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 error is recorded against entity when answers is empty",
          "location": null,
          "status": "passed",
          "title": "error is recorded against entity when answers is empty"
        },
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 error is recorded against entity when answers is not an array",
          "location": null,
          "status": "passed",
          "title": "error is recorded against entity when answers is not an array"
        },
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 error is recorded against entity when checkForm cannot be found by checkCode",
          "location": null,
          "status": "passed",
          "title": "error is recorded against entity when checkForm cannot be found by checkCode"
        },
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 error is recorded against entity when checkForm data is not valid JSON",
          "location": null,
          "status": "passed",
          "title": "error is recorded against entity when checkForm data is not valid JSON"
        },
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 error is recorded against entity when checkForm lookup throws error",
          "location": null,
          "status": "passed",
          "title": "error is recorded against entity when checkForm lookup throws error"
        },
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 error is recorded against entity when checkForm data is not a populated array",
          "location": null,
          "status": "passed",
          "title": "error is recorded against entity when checkForm data is not a populated array"
        },
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 marking updates entity with mark, maxMarks and timestamp: both answers correct",
          "location": null,
          "status": "passed",
          "title": "marking updates entity with mark, maxMarks and timestamp: both answers correct"
        },
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 marking updates entity with mark, maxMarks and timestamp: one answer wrong",
          "location": null,
          "status": "passed",
          "title": "marking updates entity with mark, maxMarks and timestamp: one answer wrong"
        },
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 marking updates check result entity with mark, maxMarks and timestamp: both answers wrong",
          "location": null,
          "status": "passed",
          "title": "marking updates check result entity with mark, maxMarks and timestamp: both answers wrong"
        },
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 check notification is dispatched when marking successful",
          "location": null,
          "status": "passed",
          "title": "check notification is dispatched when marking successful"
        },
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 check notification is dispatched when marking unsuccessful",
          "location": null,
          "status": "passed",
          "title": "check notification is dispatched when marking unsuccessful"
        },
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 marking uses the first provided answer if there are duplicates",
          "location": null,
          "status": "passed",
          "title": "marking uses the first provided answer if there are duplicates"
        },
        {
          "ancestorTitles": [
            "check-marker/v1"
          ],
          "failureMessages": [],
          "fullName": "check-marker/v1 marking is correct even if an answer is missing from the input",
          "location": null,
          "status": "passed",
          "title": "marking is correct even if an answer is missing from the input"
        }
      ],
      "endTime": 1600940517345,
      "message": "",
      "name": "tslib/src/functions/check-marker/check-marker.v1.spec.ts",
      "startTime": 1600940512744,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "pupil-identification.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-identification.service If two pupils have the same surname and forename, it uses the date of birth to differentiate",
          "location": null,
          "status": "passed",
          "title": "If two pupils have the same surname and forename, it uses the date of birth to differentiate"
        },
        {
          "ancestorTitles": [
            "pupil-identification.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-identification.service If two pupils have the same surname, forename and date of birth, it differentiates on the middle names",
          "location": null,
          "status": "passed",
          "title": "If two pupils have the same surname, forename and date of birth, it differentiates on the middle names"
        },
        {
          "ancestorTitles": [
            "pupil-identification.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-identification.service if the names are different it doenst show dob or middle names",
          "location": null,
          "status": "passed",
          "title": "if the names are different it doenst show dob or middle names"
        },
        {
          "ancestorTitles": [
            "pupil-identification.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-identification.service it formats the dateOfBirth property to be the GDS short date",
          "location": null,
          "status": "passed",
          "title": "it formats the dateOfBirth property to be the GDS short date"
        }
      ],
      "endTime": 1600940517436,
      "message": "",
      "name": "tslib/src/functions/school-results-cache/services/pupil-identification.service.spec.ts",
      "startTime": 1600940516420,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "soap-message-builder"
          ],
          "failureMessages": [],
          "fullName": "soap-message-builder subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "soap-message-builder"
          ],
          "failureMessages": [],
          "fullName": "soap-message-builder returns an xml structure with namespace as specified",
          "location": null,
          "status": "passed",
          "title": "returns an xml structure with namespace as specified"
        },
        {
          "ancestorTitles": [
            "soap-message-builder"
          ],
          "failureMessages": [],
          "fullName": "soap-message-builder when credentials specified a security header is included containing credentials",
          "location": null,
          "status": "passed",
          "title": "when credentials specified a security header is included containing credentials"
        },
        {
          "ancestorTitles": [
            "soap-message-builder"
          ],
          "failureMessages": [],
          "fullName": "soap-message-builder when message expiry specified security header details creation and expiry values",
          "location": null,
          "status": "passed",
          "title": "when message expiry specified security header details creation and expiry values"
        },
        {
          "ancestorTitles": [
            "soap-message-builder"
          ],
          "failureMessages": [],
          "fullName": "soap-message-builder message should have a body defined",
          "location": null,
          "status": "passed",
          "title": "message should have a body defined"
        },
        {
          "ancestorTitles": [
            "soap-message-builder"
          ],
          "failureMessages": [],
          "fullName": "soap-message-builder body should contain parameters when specified",
          "location": null,
          "status": "passed",
          "title": "body should contain parameters when specified"
        }
      ],
      "endTime": 1600940517484,
      "message": "",
      "name": "tslib/src/functions/gias-sync/soap-message-builder.spec.ts",
      "startTime": 1600940516902,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "pupil-auth.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-auth.service subject is defined",
          "location": null,
          "status": "passed",
          "title": "subject is defined"
        },
        {
          "ancestorTitles": [
            "pupil-auth.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-auth.service 401 returned if request body missing",
          "location": null,
          "status": "passed",
          "title": "401 returned if request body missing"
        },
        {
          "ancestorTitles": [
            "pupil-auth.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-auth.service 401 returned if pupilPin missing",
          "location": null,
          "status": "passed",
          "title": "401 returned if pupilPin missing"
        },
        {
          "ancestorTitles": [
            "pupil-auth.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-auth.service 401 returned if schoolPin missing",
          "location": null,
          "status": "passed",
          "title": "401 returned if schoolPin missing"
        },
        {
          "ancestorTitles": [
            "pupil-auth.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-auth.service options method returns 204",
          "location": null,
          "status": "passed",
          "title": "options method returns 204"
        },
        {
          "ancestorTitles": [
            "pupil-auth.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-auth.service post method attempts redis lookup of preparedCheck",
          "location": null,
          "status": "passed",
          "title": "post method attempts redis lookup of preparedCheck"
        },
        {
          "ancestorTitles": [
            "pupil-auth.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-auth.service invalid credentials returns 401",
          "location": null,
          "status": "passed",
          "title": "invalid credentials returns 401"
        },
        {
          "ancestorTitles": [
            "pupil-auth.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-auth.service valid credentials returns 200",
          "location": null,
          "status": "passed",
          "title": "valid credentials returns 200"
        },
        {
          "ancestorTitles": [
            "pupil-auth.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-auth.service expire if live check",
          "location": null,
          "status": "passed",
          "title": "expire if live check"
        },
        {
          "ancestorTitles": [
            "pupil-auth.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-auth.service pupilLogin message is put on the queue",
          "location": null,
          "status": "passed",
          "title": "pupilLogin message is put on the queue"
        },
        {
          "ancestorTitles": [
            "pupil-auth.service"
          ],
          "failureMessages": [],
          "fullName": "pupil-auth.service expected headers are set when returning prepared check",
          "location": null,
          "status": "passed",
          "title": "expected headers are set when returning prepared check"
        }
      ],
      "endTime": 1600940517514,
      "message": "",
      "name": "tslib/src/functions/pupil-auth/pupil-auth.service.spec.ts",
      "startTime": 1600940516875,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "check-started.service"
          ],
          "failureMessages": [],
          "fullName": "check-started.service should be defined",
          "location": null,
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": [
            "check-started.service"
          ],
          "failureMessages": [],
          "fullName": "check-started.service it appends the check-started entry to azure table storage output binding",
          "location": null,
          "status": "passed",
          "title": "it appends the check-started entry to azure table storage output binding"
        },
        {
          "ancestorTitles": [
            "check-started.service"
          ],
          "failureMessages": [],
          "fullName": "check-started.service it drops preparedCheck from redis if a live check",
          "location": null,
          "status": "passed",
          "title": "it drops preparedCheck from redis if a live check"
        },
        {
          "ancestorTitles": [
            "check-started.service"
          ],
          "failureMessages": [],
          "fullName": "check-started.service it does not drop preparedCheck from redis if a practice check",
          "location": null,
          "status": "passed",
          "title": "it does not drop preparedCheck from redis if a practice check"
        },
        {
          "ancestorTitles": [
            "check-started.service"
          ],
          "failureMessages": [],
          "fullName": "check-started.service it does not attempt to drop from redis if no prepared check found",
          "location": null,
          "status": "passed",
          "title": "it does not attempt to drop from redis if no prepared check found"
        }
      ],
      "endTime": 1600940517573,
      "message": "",
      "name": "tslib/src/functions/check-started/check-started.service.spec.ts",
      "startTime": 1600940516414,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "sas token service"
          ],
          "failureMessages": [],
          "fullName": "sas token service should be defined",
          "location": null,
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": [
            "sas token service"
          ],
          "failureMessages": [],
          "fullName": "sas token service should return url provided by queue service implementation",
          "location": null,
          "status": "passed",
          "title": "should return url provided by queue service implementation"
        },
        {
          "ancestorTitles": [
            "sas token service"
          ],
          "failureMessages": [],
          "fullName": "sas token service should return token provided by queue service implementation",
          "location": null,
          "status": "passed",
          "title": "should return token provided by queue service implementation"
        },
        {
          "ancestorTitles": [
            "sas token service"
          ],
          "failureMessages": [],
          "fullName": "sas token service should throw an error when expiryDate is invalid",
          "location": null,
          "status": "passed",
          "title": "should throw an error when expiryDate is invalid"
        }
      ],
      "endTime": 1600940517660,
      "message": "",
      "name": "tslib/src/azure/sas-token-service.spec.ts",
      "startTime": 1600940516361,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "random-generator"
          ],
          "failureMessages": [],
          "fullName": "random-generator subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "random-generator",
            "generateFromChars"
          ],
          "failureMessages": [],
          "fullName": "random-generator generateFromChars returns a random string",
          "location": null,
          "status": "passed",
          "title": "returns a random string"
        },
        {
          "ancestorTitles": [
            "random-generator",
            "generateFromChars"
          ],
          "failureMessages": [],
          "fullName": "random-generator generateFromChars throws an error if chars are not given",
          "location": null,
          "status": "passed",
          "title": "throws an error if chars are not given"
        },
        {
          "ancestorTitles": [
            "random-generator",
            "generateFromChars"
          ],
          "failureMessages": [],
          "fullName": "random-generator generateFromChars throws an error if chars are too long",
          "location": null,
          "status": "passed",
          "title": "throws an error if chars are too long"
        },
        {
          "ancestorTitles": [
            "random-generator",
            "generateNumberFromRange"
          ],
          "failureMessages": [],
          "fullName": "random-generator generateNumberFromRange should generate a random number in specific range",
          "location": null,
          "status": "passed",
          "title": "should generate a random number in specific range"
        }
      ],
      "endTime": 1600940517719,
      "message": "",
      "name": "tslib/src/functions/school-pin-generator/random-generator.spec.ts",
      "startTime": 1600940517187,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "multipart message parser"
          ],
          "failureMessages": [],
          "fullName": "multipart message parser subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "multipart message parser",
            "extractBoundaryIdFrom"
          ],
          "failureMessages": [],
          "fullName": "multipart message parser extractBoundaryIdFrom error thrown if content-type not found",
          "location": null,
          "status": "passed",
          "title": "error thrown if content-type not found"
        },
        {
          "ancestorTitles": [
            "multipart message parser",
            "extractBoundaryIdFrom"
          ],
          "failureMessages": [],
          "fullName": "multipart message parser extractBoundaryIdFrom throw error if response not multipart message",
          "location": null,
          "status": "passed",
          "title": "throw error if response not multipart message"
        },
        {
          "ancestorTitles": [
            "multipart message parser",
            "extractBoundaryIdFrom"
          ],
          "failureMessages": [],
          "fullName": "multipart message parser extractBoundaryIdFrom throw error if boundary id not defined",
          "location": null,
          "status": "passed",
          "title": "throw error if boundary id not defined"
        },
        {
          "ancestorTitles": [
            "multipart message parser",
            "extractBoundaryIdFrom"
          ],
          "failureMessages": [],
          "fullName": "multipart message parser extractBoundaryIdFrom boundary id is extracted when present in header",
          "location": null,
          "status": "passed",
          "title": "boundary id is extracted when present in header"
        },
        {
          "ancestorTitles": [
            "multipart message parser",
            "parse"
          ],
          "failureMessages": [],
          "fullName": "multipart message parser parse returns parts array",
          "location": null,
          "status": "pending",
          "title": "returns parts array"
        }
      ],
      "endTime": 1600940517731,
      "message": "",
      "name": "tslib/src/functions/gias-sync/multipart-message-parser.spec.ts",
      "startTime": 1600940517204,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "pupil feedback service"
          ],
          "failureMessages": [],
          "fullName": "pupil feedback service subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "pupil feedback service"
          ],
          "failureMessages": [],
          "fullName": "pupil feedback service unsupported message version throws error",
          "location": null,
          "status": "passed",
          "title": "unsupported message version throws error"
        },
        {
          "ancestorTitles": [
            "pupil feedback service"
          ],
          "failureMessages": [],
          "fullName": "pupil feedback service feedback message should be added to feedback table binding",
          "location": null,
          "status": "passed",
          "title": "feedback message should be added to feedback table binding"
        },
        {
          "ancestorTitles": [
            "pupil feedback service"
          ],
          "failureMessages": [],
          "fullName": "pupil feedback service all expected message properties should be inserted into feedback table",
          "location": null,
          "status": "passed",
          "title": "all expected message properties should be inserted into feedback table"
        }
      ],
      "endTime": 1600940517900,
      "message": "",
      "name": "tslib/src/functions/pupil-feedback/feedback.service.spec.ts",
      "startTime": 1600940517358,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "school-requires-new-pin-predicate"
          ],
          "failureMessages": [],
          "fullName": "school-requires-new-pin-predicate subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "school-requires-new-pin-predicate"
          ],
          "failureMessages": [],
          "fullName": "school-requires-new-pin-predicate indicates pin required when pin is undefined",
          "location": null,
          "status": "passed",
          "title": "indicates pin required when pin is undefined"
        },
        {
          "ancestorTitles": [
            "school-requires-new-pin-predicate"
          ],
          "failureMessages": [],
          "fullName": "school-requires-new-pin-predicate indicates pin required when pin is undefined",
          "location": null,
          "status": "passed",
          "title": "indicates pin required when pin is undefined"
        },
        {
          "ancestorTitles": [
            "school-requires-new-pin-predicate"
          ],
          "failureMessages": [],
          "fullName": "school-requires-new-pin-predicate indicates pin not required when expiry date in future",
          "location": null,
          "status": "passed",
          "title": "indicates pin not required when expiry date in future"
        },
        {
          "ancestorTitles": [
            "school-requires-new-pin-predicate"
          ],
          "failureMessages": [],
          "fullName": "school-requires-new-pin-predicate indicates pin required when expiry date in future but pin not defined",
          "location": null,
          "status": "passed",
          "title": "indicates pin required when expiry date in future but pin not defined"
        },
        {
          "ancestorTitles": [
            "school-requires-new-pin-predicate"
          ],
          "failureMessages": [],
          "fullName": "school-requires-new-pin-predicate indicates pin required when expiry date not defined",
          "location": null,
          "status": "passed",
          "title": "indicates pin required when expiry date not defined"
        },
        {
          "ancestorTitles": [
            "school-requires-new-pin-predicate"
          ],
          "failureMessages": [],
          "fullName": "school-requires-new-pin-predicate indicates pin required when expiry date has passed",
          "location": null,
          "status": "passed",
          "title": "indicates pin required when expiry date has passed"
        }
      ],
      "endTime": 1600940517963,
      "message": "",
      "name": "tslib/src/functions/school-pin-generator/school-requires-pin-predicate.spec.ts",
      "startTime": 1600940517441,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "attachmentId parser"
          ],
          "failureMessages": [],
          "fullName": "attachmentId parser subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "attachmentId parser"
          ],
          "failureMessages": [],
          "fullName": "attachmentId parser error is thrown when argument not provided",
          "location": null,
          "status": "passed",
          "title": "error is thrown when argument not provided"
        },
        {
          "ancestorTitles": [
            "attachmentId parser"
          ],
          "failureMessages": [],
          "fullName": "attachmentId parser error is thrown when extract data incomplete",
          "location": null,
          "status": "passed",
          "title": "error is thrown when extract data incomplete"
        },
        {
          "ancestorTitles": [
            "attachmentId parser"
          ],
          "failureMessages": [],
          "fullName": "attachmentId parser attachment id is returned when found",
          "location": null,
          "status": "passed",
          "title": "attachment id is returned when found"
        },
        {
          "ancestorTitles": [
            "attachmentId parser"
          ],
          "failureMessages": [],
          "fullName": "attachmentId parser html encoded @ char is decoded before return",
          "location": null,
          "status": "passed",
          "title": "html encoded @ char is decoded before return"
        }
      ],
      "endTime": 1600940518004,
      "message": "",
      "name": "tslib/src/functions/gias-sync/attachmentId.parser.spec.ts",
      "startTime": 1600940517490,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "school-pin-generator"
          ],
          "failureMessages": [],
          "fullName": "school-pin-generator subject is defined",
          "location": null,
          "status": "passed",
          "title": "subject is defined"
        },
        {
          "ancestorTitles": [
            "school-pin-generator"
          ],
          "failureMessages": [],
          "fullName": "school-pin-generator school pin must be 8 chars in length",
          "location": null,
          "status": "passed",
          "title": "school pin must be 8 chars in length"
        },
        {
          "ancestorTitles": [
            "school-pin-generator"
          ],
          "failureMessages": [],
          "fullName": "school-pin-generator school pin must be 3 char word + 2 digits + 3 char word",
          "location": null,
          "status": "passed",
          "title": "school pin must be 3 char word + 2 digits + 3 char word"
        },
        {
          "ancestorTitles": [
            "school-pin-generator"
          ],
          "failureMessages": [],
          "fullName": "school-pin-generator it sources 2 digit number and both random words from generator on each call",
          "location": null,
          "status": "passed",
          "title": "it sources 2 digit number and both random words from generator on each call"
        }
      ],
      "endTime": 1600940518047,
      "message": "",
      "name": "tslib/src/functions/school-pin-generator/school-pin-generator.spec.ts",
      "startTime": 1600940517527,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "prepared-check-merge.service"
          ],
          "failureMessages": [],
          "fullName": "prepared-check-merge.service subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "prepared-check-merge.service"
          ],
          "failureMessages": [],
          "fullName": "prepared-check-merge.service if no new AA config passed in, defaults are returned",
          "location": null,
          "status": "passed",
          "title": "if no new AA config passed in, defaults are returned"
        },
        {
          "ancestorTitles": [
            "prepared-check-merge.service"
          ],
          "failureMessages": [],
          "fullName": "prepared-check-merge.service creates a new config based on the new aa settings and the config supplied",
          "location": null,
          "status": "passed",
          "title": "creates a new config based on the new aa settings and the config supplied"
        }
      ],
      "endTime": 1600940518049,
      "message": "",
      "name": "tslib/src/functions/check-sync/prepared-check-merge.service.spec.ts",
      "startTime": 1600940516343,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "check-notifier/v1"
          ],
          "failureMessages": [],
          "fullName": "check-notifier/v1 should be defined",
          "location": null,
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": [
            "check-notifier/v1"
          ],
          "failureMessages": [],
          "fullName": "check-notifier/v1 checkComplete notification should update check as complete",
          "location": null,
          "status": "passed",
          "title": "checkComplete notification should update check as complete"
        },
        {
          "ancestorTitles": [
            "check-notifier/v1"
          ],
          "failureMessages": [],
          "fullName": "check-notifier/v1 checkInvalid notification should update check as processing failed",
          "location": null,
          "status": "passed",
          "title": "checkInvalid notification should update check as processing failed"
        },
        {
          "ancestorTitles": [
            "check-notifier/v1"
          ],
          "failureMessages": [],
          "fullName": "check-notifier/v1 checkReceived notification should update check as received",
          "location": null,
          "status": "passed",
          "title": "checkReceived notification should update check as received"
        }
      ],
      "endTime": 1600940518051,
      "message": "",
      "name": "tslib/src/functions/check-notifier/check-notifier.v1.spec.ts",
      "startTime": 1600940516357,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "primitiveToBoolean"
          ],
          "failureMessages": [],
          "fullName": "primitiveToBoolean should be true if its 1 / \"1\" or \"true\"",
          "location": null,
          "status": "passed",
          "title": "should be true if its 1 / \"1\" or \"true\""
        },
        {
          "ancestorTitles": [
            "primitiveToBoolean"
          ],
          "failureMessages": [],
          "fullName": "primitiveToBoolean should be false if its 0 / \"0\" or \"false\"",
          "location": null,
          "status": "passed",
          "title": "should be false if its 0 / \"0\" or \"false\""
        },
        {
          "ancestorTitles": [
            "primitiveToBoolean"
          ],
          "failureMessages": [],
          "fullName": "primitiveToBoolean should be false if its null or undefined",
          "location": null,
          "status": "passed",
          "title": "should be false if its null or undefined"
        },
        {
          "ancestorTitles": [
            "primitiveToBoolean"
          ],
          "failureMessages": [],
          "fullName": "primitiveToBoolean shoultoBool.d pass through booleans - useful for undefined checks",
          "location": null,
          "status": "passed",
          "title": "shoultoBool.d pass through booleans - useful for undefined checks"
        }
      ],
      "endTime": 1600940518071,
      "message": "",
      "name": "tslib/src/common/to-bool.spec.ts",
      "startTime": 1600940517579,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "school-pin-expiry-generator"
          ],
          "failureMessages": [],
          "fullName": "school-pin-expiry-generator subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "school-pin-expiry-generator"
          ],
          "failureMessages": [],
          "fullName": "school-pin-expiry-generator if current time between 0000 - 1600, set to 1600 same day",
          "location": null,
          "status": "passed",
          "title": "if current time between 0000 - 1600, set to 1600 same day"
        },
        {
          "ancestorTitles": [
            "school-pin-expiry-generator"
          ],
          "failureMessages": [],
          "fullName": "school-pin-expiry-generator if current time between 1600 - 2359, set to 1600 next day",
          "location": null,
          "status": "passed",
          "title": "if current time between 1600 - 2359, set to 1600 next day"
        },
        {
          "ancestorTitles": [
            "school-pin-expiry-generator"
          ],
          "failureMessages": [],
          "fullName": "school-pin-expiry-generator if override expiry flag set to true, expire at end of day",
          "location": null,
          "status": "passed",
          "title": "if override expiry flag set to true, expire at end of day"
        },
        {
          "ancestorTitles": [
            "school-pin-expiry-generator",
            "sce schools"
          ],
          "failureMessages": [],
          "fullName": "school-pin-expiry-generator sce schools if current time between 0000 - 1600, set to 1600 same day",
          "location": null,
          "status": "passed",
          "title": "if current time between 0000 - 1600, set to 1600 same day"
        },
        {
          "ancestorTitles": [
            "school-pin-expiry-generator",
            "sce schools"
          ],
          "failureMessages": [],
          "fullName": "school-pin-expiry-generator sce schools if current time between 1600 - 2359, set to 1600 next day",
          "location": null,
          "status": "passed",
          "title": "if current time between 1600 - 2359, set to 1600 next day"
        },
        {
          "ancestorTitles": [
            "school-pin-expiry-generator",
            "sce schools"
          ],
          "failureMessages": [],
          "fullName": "school-pin-expiry-generator sce schools if override expiry flag set to true, expire at end of day",
          "location": null,
          "status": "passed",
          "title": "if override expiry flag set to true, expire at end of day"
        }
      ],
      "endTime": 1600940518156,
      "message": "",
      "name": "tslib/src/functions/school-pin-generator/school-pin-expiry-generator.spec.ts",
      "startTime": 1600940517665,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "max-attemps-calculator"
          ],
          "failureMessages": [],
          "fullName": "max-attemps-calculator subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "max-attemps-calculator"
          ],
          "failureMessages": [],
          "fullName": "max-attemps-calculator returns zero if word count is zero",
          "location": null,
          "status": "passed",
          "title": "returns zero if word count is zero"
        },
        {
          "ancestorTitles": [
            "max-attemps-calculator"
          ],
          "failureMessages": [],
          "fullName": "max-attemps-calculator returns zero if number char count is zero",
          "location": null,
          "status": "passed",
          "title": "returns zero if number char count is zero"
        },
        {
          "ancestorTitles": [
            "max-attemps-calculator"
          ],
          "failureMessages": [],
          "fullName": "max-attemps-calculator calculates max attempts based upon combination of two word sets and two sets of chars",
          "location": null,
          "status": "passed",
          "title": "calculates max attempts based upon combination of two word sets and two sets of chars"
        }
      ],
      "endTime": 1600940518158,
      "message": "",
      "name": "tslib/src/functions/school-pin-generator/max-attempts-calculator.spec.ts",
      "startTime": 1600940517726,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PupilAllocationService"
          ],
          "failureMessages": [],
          "fullName": "PupilAllocationService subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "PupilAllocationService"
          ],
          "failureMessages": [],
          "fullName": "PupilAllocationService a pin should be generated for a pupil",
          "location": null,
          "status": "passed",
          "title": "a pin should be generated for a pupil"
        },
        {
          "ancestorTitles": [
            "PupilAllocationService"
          ],
          "failureMessages": [],
          "fullName": "PupilAllocationService a form should be allocated for a pupil",
          "location": null,
          "status": "passed",
          "title": "a form should be allocated for a pupil"
        },
        {
          "ancestorTitles": [
            "PupilAllocationService"
          ],
          "failureMessages": [],
          "fullName": "PupilAllocationService the allocation should be timestamped with current UTC",
          "location": null,
          "status": "passed",
          "title": "the allocation should be timestamped with current UTC"
        }
      ],
      "endTime": 1600940518180,
      "message": "",
      "name": "tslib/src/functions/check-allocator/pupil-allocation.service.spec.ts",
      "startTime": 1600940517739,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "check-window.service"
          ],
          "failureMessages": [],
          "fullName": "check-window.service should be defined",
          "location": null,
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": [
            "check-window.service"
          ],
          "failureMessages": [],
          "fullName": "check-window.service check window is retrieved from database when not found in cache",
          "location": null,
          "status": "passed",
          "title": "check window is retrieved from database when not found in cache"
        },
        {
          "ancestorTitles": [
            "check-window.service"
          ],
          "failureMessages": [],
          "fullName": "check-window.service check window is added to cache after retrieving from database",
          "location": null,
          "status": "passed",
          "title": "check window is added to cache after retrieving from database"
        },
        {
          "ancestorTitles": [
            "check-window.service"
          ],
          "failureMessages": [],
          "fullName": "check-window.service check window is returned straight from cache when present",
          "location": null,
          "status": "passed",
          "title": "check window is returned straight from cache when present"
        }
      ],
      "endTime": 1600940518204,
      "message": "",
      "name": "tslib/src/services/check-window.service.spec.ts",
      "startTime": 1600940516335,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "allowed-words.service"
          ],
          "failureMessages": [],
          "fullName": "allowed-words.service subject should be defined",
          "location": null,
          "status": "passed",
          "title": "subject should be defined"
        },
        {
          "ancestorTitles": [
            "allowed-words.service"
          ],
          "failureMessages": [],
          "fullName": "allowed-words.service allowed words must be a minimum set of 5",
          "location": null,
          "status": "passed",
          "title": "allowed words must be a minimum set of 5"
        },
        {
          "ancestorTitles": [
            "allowed-words.service"
          ],
          "failureMessages": [],
          "fullName": "allowed-words.service allowed words must be sanitised for banned words before use",
          "location": null,
          "status": "passed",
          "title": "allowed words must be sanitised for banned words before use"
        }
      ],
      "endTime": 1600940518256,
      "message": "",
      "name": "tslib/src/functions/school-pin-generator/allowed-words.service.spec.ts",
      "startTime": 1600940517905,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "CheckPinExpiryService"
          ],
          "failureMessages": [],
          "fullName": "CheckPinExpiryService instantiates an object",
          "location": null,
          "status": "passed",
          "title": "instantiates an object"
        },
        {
          "ancestorTitles": [
            "CheckPinExpiryService"
          ],
          "failureMessages": [],
          "fullName": "CheckPinExpiryService has a method called process",
          "location": null,
          "status": "passed",
          "title": "has a method called process"
        },
        {
          "ancestorTitles": [
            "CheckPinExpiryService"
          ],
          "failureMessages": [],
          "fullName": "CheckPinExpiryService modifies the database",
          "location": null,
          "status": "passed",
          "title": "modifies the database"
        }
      ],
      "endTime": 1600940518281,
      "message": "",
      "name": "tslib/src/functions/check-pin-expiry/check-pin-expiry.service.spec.ts",
      "startTime": 1600940517968,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "utc-offset-resolver"
          ],
          "failureMessages": [],
          "fullName": "utc-offset-resolver should be defined",
          "location": null,
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": [
            "utc-offset-resolver"
          ],
          "failureMessages": [],
          "fullName": "utc-offset-resolver it should resolve utc offset correctly",
          "location": null,
          "status": "passed",
          "title": "it should resolve utc offset correctly"
        }
      ],
      "endTime": 1600940518303,
      "message": "",
      "name": "tslib/src/functions/school-pin-generator/timezone-util.spec.ts",
      "startTime": 1600940518008,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "compression-service"
          ],
          "failureMessages": [],
          "fullName": "compression-service should be defined",
          "location": null,
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": [
            "compression-service"
          ],
          "failureMessages": [],
          "fullName": "compression-service should compress a string",
          "location": null,
          "status": "passed",
          "title": "should compress a string"
        }
      ],
      "endTime": 1600940518312,
      "message": "",
      "name": "tslib/src/common/compression-service.spec.ts",
      "startTime": 1600940518052,
      "status": "passed",
      "summary": ""
    }
  ],
  "wasInterrupted": false
}
