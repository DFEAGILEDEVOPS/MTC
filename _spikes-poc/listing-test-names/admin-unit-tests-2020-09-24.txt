"---------------------------"
"/admin/spec/back-end/helpers/school-home-feature-eligibility-presenter.spec.js"
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is disabled allows both familiarisation and live pin generation if within admin period and within check periods "
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is disabled disallows both familiarisation and live pin generation if check window is in the past"
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is disabled disallows both familiarisation and live pin generation if check window is in the future"
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is disabled disallow live pin generation and allows familiarisation pin generation if within only familiarisation period"
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is disabled disallows any familiarisation pin generation when date is within that period and outside of available times"
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is disabled disallows any live pin generation when date is within that period and outside of available times"
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is disabled disallows restarts and groups when outside of a live check window"
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is disabled disallows restarts when outside of a live check window"
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is disabled allows restarts when inside of a live check window"
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is disabled disallows groups when after live check end date"
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is disabled disallows groups when before admin start date"
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is disabled allow groups when within live check period"
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is disabled disallows hdf before live check period"
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is disabled allows hdf when within live check period"
"schoolHomeFeatureEligibilityPresenter getPresentationData when override is enabled allows both familiarisation and live pin generation if regardless of check window period"
"---------------------------"
"/admin/spec/back-end/lib/validator/check-window-v2/check-window-add-validator.spec.js"
"New check window add validator validate returns validationError object"
"New check window add validator validate calls addError with adminStartDateAfterFamiliarisationCheckStartDate and familiarisationCheckStartDateBeforeAdminStartDate if the admin start day is after familiarisation check start date"
"New check window add validator validate calls addError with adminStartDateAfterLiveCheckStartDate and liveCheckStartDateBeforeAdminStartDate if the admin start day is after live check start date"
"New check window add validator validate calls addError with adminEndDateBeforeAdminStartDate and adminStartDateAfterAdminEndDate if the admin end day is before admin start date"
"New check window add validator validate calls addError with adminEndDateBeforeLiveCheckEndDate if the admin end day is before live check end date"
"New check window add validator validate calls addError with adminEndDateBeforeFamiliarisationCheckEndDate, familiarisationCheckEndDateAfterAdminEndDate  and liveCheckEndDateAfterAdminEndDate if the admin end day is before familiarisation check end date"
"New check window add validator validate calls addError with familiarisationCheckStartDateAfterLiveCheckStartDate and liveCheckStartDateBeforeFamiliarisationCheckStartDate if the familiarisation check start day is after live check start date"
"New check window add validator validate calls addError with familiarisationCheckStartDateAfterFamiliarisationCheckEndDate and familiarisationCheckEndDateBeforeFamiliarisationCheckStartDate if the familiarisation check start day is after familiarisation check end date"
"New check window add validator validate calls addError with familiarisationCheckEndDateBeforeAdminStartDate if the familiarisation check end day is before admin start date"
"New check window add validator validate calls addError with liveCheckStartDateAfterLiveCheckEndDate and liveCheckEndDateBeforeLiveCheckStartDate if the live check start day is after live check end date"
"New check window add validator validate calls addError with liveCheckEndDateBeforeAdminStartDate if the live check end day is before admin start date"
"New check window add validator validate does not call addError if all dates are on the same date"
"New check window add validator validate calls addError with familiarisationCheckEndDateNotEqualLiveCheckEndDate if the familiarisation check end day is not equal to live check end date"
"New check window add validator validate should not call createUTCFromDayMonthYear and dateValidator validate methods if adminStartDateDisabled"
"New check window add validator validate should not call createUTCFromDayMonthYear and dateValidator validate methods if adminEndDateDisabled"
"New check window add validator validate should not call createUTCFromDayMonthYear and dateValidator validate methods if familiarisationCheckStartDateDisabled"
"New check window add validator validate should not call createUTCFromDayMonthYear and dateValidator validate methods if familiarisationCheckEndDateDisabled"
"New check window add validator validate should not call createUTCFromDayMonthYear and dateValidator validate methods if liveCheckStartDateDisabled"
"New check window add validator validate should not call createUTCFromDayMonthYear and dateValidator validate methods if liveCheckEndDateDisabled"
"---------------------------"
"/admin/spec/back-end/controllers/test-developer2.spec.js"
"test developer 2 controller: getViewFormsPage route renders upload and view forms view"
"test developer 2 controller: getUploadNewFormsPage route renders upload new form view"
"test developer 2 controller: getUploadNewFormsPage route returns next if service method throws an error"
"test developer 2 controller: postUpload route submits uploaded check form data processing"
"test developer 2 controller: postUpload route submits uploaded check form data processing"
"test developer 2 controller: getDelete route redirects to view forms page"
"test developer 2 controller: getDelete route returns next if service method throws an error"
"test developer 2 controller: getViewFormPage route redirects to view forms page"
"test developer 2 controller: getViewFormPage route returns next if service method throws an error"
"test developer 2 controller: getAssignFormsPage route render assign forms to check windows page"
"test developer 2 controller: getAssignFormsPage route returns next if service method throws an error"
"test developer 2 controller: getSelectFormPage route renders select check forms page"
"test developer 2 controller: getSelectFormPage route returns next if getCheckWindow service method throws an error"
"test developer 2 controller: getSelectFormPage route returns next if getCheckFormsByType service method throws an error"
"test developer 2 controller: getSelectFormPage route returns next if getCheckFormsByCheckWindowIdAndType service method throws an error"
"test developer 2 controller: postAssignForms route submits uploaded check form data processing"
"test developer 2 controller: postAssignForms route returns next if getCheckWindow service method throws an error"
"test developer 2 controller: postAssignForms route returns next if updateCheckWindowForms service method throws an error"
"test developer 2 controller: postAssignForms route redirects to select forms page if empty familiarisation check form payload is submitted and one is not already assigned"
"---------------------------"
"/admin/spec/back-end/lib/validator/pupil-validator.spec.js"
"pupil validator and the pupil uniqueness check passes allows a valid request"
"pupil validator and the pupil uniqueness check passes then foreName requires a foreName"
"pupil validator and the pupil uniqueness check passes then foreName allows latin chars, hyphen and apostrophe in the forename"
"pupil validator and the pupil uniqueness check passes then foreName allows spaces in and around the name"
"pupil validator and the pupil uniqueness check passes then foreName rejects only spaces"
"pupil validator and the pupil uniqueness check passes then foreName does not allow punctuation in the forename"
"pupil validator and the pupil uniqueness check passes then foreName foreName can include numbers"
"pupil validator and the pupil uniqueness check passes then middleNames is optional"
"pupil validator and the pupil uniqueness check passes then middleNames allows latin1 hyphen apostrophe and a space"
"pupil validator and the pupil uniqueness check passes then middleNames does not allow punctuation in the middlename"
"pupil validator and the pupil uniqueness check passes then middleNames middleNames can include numbers"
"pupil validator and the pupil uniqueness check passes then lastname is required"
"pupil validator and the pupil uniqueness check passes then lastname can include numbers"
"pupil validator and the pupil uniqueness check passes then lastname allows latin chars, hyphen and apostrophe"
"pupil validator and the pupil uniqueness check passes then lastname allows spaces in and around the name"
"pupil validator and the pupil uniqueness check passes then lastname rejects only spaces"
"pupil validator and the pupil uniqueness check passes then lastname does not allow punctuation"
"pupil validator and the pupil uniqueness check passes then foreNameAlias is optional"
"pupil validator and the pupil uniqueness check passes then foreNameAlias allows latin1 hyphen apostrophe and a space"
"pupil validator and the pupil uniqueness check passes then foreNameAlias does not allow punctuation in the middlename"
"pupil validator and the pupil uniqueness check passes then foreNameAlias foreNameAlias can include numbers"
"pupil validator and the pupil uniqueness check passes then lastNameAlias is optional"
"pupil validator and the pupil uniqueness check passes then lastNameAlias allows latin1 hyphen apostrophe and a space"
"pupil validator and the pupil uniqueness check passes then lastNameAlias does not allow punctuation in the middlename"
"pupil validator and the pupil uniqueness check passes then lastNameAlias lastNameAlias can include numbers"
"pupil validator and the pupil uniqueness check passes then date of birth: accepts single digit days and months"
"pupil validator and the pupil uniqueness check passes then date of birth: accepts single digit day"
"pupil validator and the pupil uniqueness check passes then date of birth: accepts single digit month"
"pupil validator and the pupil uniqueness check passes then date of birth: Can't be in the future"
"pupil validator and the pupil uniqueness check passes then date of birth: day: can't be blank"
"pupil validator and the pupil uniqueness check passes then date of birth: month: can't be blank"
"pupil validator and the pupil uniqueness check passes then date of birth: year: can't be blank"
"pupil validator and the pupil uniqueness check passes date of birth: Can't be in the future"
"pupil validator and the pupil uniqueness check passes date of birth: month: must be numerical"
"pupil validator and the pupil uniqueness check passes date of birth: year: must be numerical"
"pupil validator and the pupil uniqueness check passes date of birth: invalid date should be rejected"
"pupil validator and the pupil uniqueness check passes date of birth: day can't be more than 2 digits"
"pupil validator and the pupil uniqueness check passes date of birth: month can't be more than 2 digits"
"pupil validator and the pupil uniqueness check passes date of birth: year must be 4 digits"
"pupil validator and the pupil uniqueness check passes date of birth: should be out of accepted range if the input date is before 2nd September of 11 years before the academic year"
"pupil validator and the pupil uniqueness check passes date of birth: should be out of accepted range if the input date is after 1nd September of 7 years before the academic year"
"pupil validator and the pupil uniqueness check passes date of birth: should display for multiple pupils submission an error message when out of accepted range if the input date is after 1nd September of 7 years before the academic year"
"pupil validator and the pupil uniqueness check passes date of birth: should display for multiple pupils submission an error message when a pupil is 7 years on the academic year"
"pupil validator and the pupil uniqueness check passes date of birth: should be within the accepted range if the input date is after 2nd September of 11 years before the academic year"
"pupil validator and the pupil uniqueness check passes date of birth: should require age reason if the input date is at 2nd September of 11 years before the academic year"
"pupil validator and the pupil uniqueness check passes date of birth: should require age reason if the input date is at 31st August of 7 years before the academic year"
"pupil validator and the pupil uniqueness check passes date of birth: should not require age reason if the input date is before 2nd September of 11 years before the academic year"
"pupil validator and the pupil uniqueness check passes date of birth: should not require age reason if the input date is after 1nd September of 7 years before the academic year"
"pupil validator and the pupil uniqueness check passes then gender is required"
"pupil validator and the pupil uniqueness check passes then gender can be accepted in lowercase"
"pupil validator and the pupil uniqueness check passes then UPN validator: detects when the UPN is in invalid format"
"pupil validator and the pupil uniqueness check passes then UPN validator: detects when the UPN has an error in char 1 and 5"
"pupil validator and the pupil uniqueness check passes then UPN validator: detects when the UPN has an error in char 6"
"pupil validator and the pupil uniqueness check passes then UPN validator: detects when the UPN has an error in char 7"
"pupil validator and the pupil uniqueness check passes then UPN validator: detects when the UPN has an error in char 8"
"pupil validator and the pupil uniqueness check passes then UPN validator: detects when the UPN has an error in char 9"
"pupil validator and the pupil uniqueness check passes then UPN validator: detects when the UPN has an error in char 10"
"pupil validator and the pupil uniqueness check passes then UPN validator: detects when the UPN has an error in char 11"
"pupil validator and the pupil uniqueness check passes then UPN validator: detects when the UPN has an error in char 12"
"pupil validator and the pupil uniqueness check passes then UPN validator: detects when the UPN has more than one alphabetic characters between position 5 to 12"
"pupil validator and the pupil uniqueness check passes then UPN validator: validates the check letter"
"pupil validator and the pupil uniqueness check passes then UPN validator: provides an error message when the check letter is wrong"
"pupil validator and the pupil uniqueness check passes then UPN validator: provides an error message when the LA code is wrong"
"pupil validator and the pupil uniqueness check passes then UPN validator: it validates a temporary UPN"
"pupil validator and the pupil uniqueness check passes then UPN validator: validates a lowercase upn, and uppercases it for the user"
"pupil validator and the pupil uniqueness check passes then UPN validator: checks for invalid character 13 letter: S"
"pupil validator and the pupil uniqueness check passes then UPN validator: checks for invalid character 13 letter: I"
"pupil validator and the pupil uniqueness check passes then UPN validator: checks for invalid character 13 letter: O"
"pupil validator and the pupil uniqueness check passes then UPN validator: checks for valid character 13 letter: A"
"pupil validator and the pupil uniqueness check fails it ensures the UPN is unique when adding new pupil"
"pupil validator and the pupil uniqueness check fails it ensures the UPN is unique when editing pupil"
"---------------------------"
"/admin/spec/back-end/service/dfe-signin.service.spec.js"
"dfe-signin.service throws an error if dfeUser argument is missing"
"dfe-signin.service throws an error if tokenset argument is missing"
"dfe-signin.service throws an error if dfeUser object does not have a defined organisation property"
"dfe-signin.service throws an error if dfeUser object does not have a defined organisation.urn property"
"dfe-signin.service does look up school if role is teacher"
"dfe-signin.service does look up school if role is headteacher"
"dfe-signin.service does not look up school if role is not teacher or headteacher"
"dfe-signin.service creates a user entry if one does not exist"
"dfe-signin.service throws an error if it cannot find created user"
"dfe-signin.service updates user school if different to current one and refetches the object"
"dfe-signin.service maps role title to user object before it is returned"
"dfe-signin.service displayName is constructed from given name family name and email"
"dfe-signin.service id_token is set on user from token object"
"dfe-signin.service dfeNumber and schoolId are set on user from school record"
"dfe-signin.service sets timezone to assigned school timezone when provided"
"dfe-signin.service sets timezone to system default when no schoo timezone is set"
"dfe-signin.service sets externalUserId to the provided user id and id to the user record id"
"dfe-signin.service adds adminLogonEvent entry"
"dfe-signin.service updates user role if different to current one"
"---------------------------"
"/admin/spec/back-end/service/access-arrangements.service.spec.js"
"accessArrangementsService getAccessArrangements calls and returns access arrangements list"
"accessArrangementsService submit calls preparedCheckSync service and returns access arrangements list"
"accessArrangementsService submit throws a validation error if validation is unsuccessful"
"accessArrangementsService prepareData returns a processed access arrangements submission object"
"accessArrangementsService prepareData throws an error if accessArrangement are not found based on codes provided"
"accessArrangementsService prepareData throws an error if pupil record is not found"
"accessArrangementsService prepareData expects inputAssistanceInformation to be defined when the accessArrangements is matched"
"accessArrangementsService prepareData expects nextButtonInformation to be defined when the accessArrangements is matched"
"accessArrangementsService prepareData expects questionReaderReasons_id to be defined when the accessArrangements is matched"
"accessArrangementsService prepareData expects questionReaderOtherInformation to be defined when the accessArrangements and questionReaderReason is matched"
"accessArrangementsService prepareData expects pupilFontSizes_id property and pupilColourContrasts_id property to be set from existing "
"accessArrangementsService save calls sqlInsertAccessArrangements without isUpdated boolean if pupilAccessArrangement record does not exist"
"accessArrangementsService save calls sqlInsertAccessArrangements with isUpdated boolean if pupilAccessArrangement record exists"
"accessArrangementsService getCurrentViewMode should return 'edit' if current date within admin start and check end dates"
"accessArrangementsService getCurrentViewMode should return 'readonly' if current date past check end date but before admin end date"
"accessArrangementsService getCurrentViewMode should return 'unavailable' if current date before admin start date"
"accessArrangementsService getCurrentViewMode should return 'unavailable' if current date after admin end date"
"---------------------------"
"/admin/spec/back-end/service/headteacher-declaration.service.spec.js"
"headteacherDeclarationService #getEligibilityForSchool when check end date is in the future should call sqlFindPupilsBlockingHdfBeforeCheckEndDate"
"headteacherDeclarationService #getEligibilityForSchool when check end date is in the future should return true if no pupils blocking are detected"
"headteacherDeclarationService #getEligibilityForSchool when check end date is in the future should return false if no pupils blocking are detected"
"headteacherDeclarationService #getEligibilityForSchool when check end date is in the past should call sqlFindPupilsBlockingHdfBeforeCheckEndDate"
"headteacherDeclarationService #getEligibilityForSchool when check end date is in the past should return true if no pupils blocking are detected"
"headteacherDeclarationService #getEligibilityForSchool when check end date is in the past should return false if no pupils blocking are detected"
"headteacherDeclarationService #submitDeclaration when the school is found calls getEligibilityForSchool"
"headteacherDeclarationService #submitDeclaration when the school is found calls the headteacher data service"
"headteacherDeclarationService #submitDeclaration when the school is found adds a signedDate field to the form"
"headteacherDeclarationService #submitDeclaration when the school is found adds the userId to the form"
"headteacherDeclarationService #submitDeclaration when the school is found adds the dfeNumber to the form"
"headteacherDeclarationService #submitDeclaration when the school is not found throws an error"
"headteacherDeclarationService #submitDeclaration when not eligible throws an error"
"headteacherDeclarationService findLatestHdfForSchool finds the school using the dfeNumber"
"headteacherDeclarationService findLatestHdfForSchool returns null if the school is not found"
"headteacherDeclarationService findLatestHdfForSchool find the latest hdf and returns it"
"headteacherDeclarationService #isHdfSubmittedForCurrentCheck calls isHdfSubmittedForCheck"
"headteacherDeclarationService #isHdfSubmittedForCurrentCheck returns false if a check window id is not provided"
"headteacherDeclarationService #isHdfSubmittedForCheck throws an error when no dfeNumber is provided"
"headteacherDeclarationService #isHdfSubmittedForCheck throws an error when no checkWindowId is provided"
"headteacherDeclarationService #isHdfSubmittedForCheck calls findHdfForCheck"
"headteacherDeclarationService #isHdfSubmittedForCheck returns false if there isnt a current HDF for the school"
"headteacherDeclarationService #isHdfSubmittedForCheck returns true if there is a valid HDF for the school"
"headteacherDeclarationService #isHdfSubmittedForCheck returns false if the HDF is invalid"
"headteacherDeclarationService findPupilsForSchool throws an error when no schoolId is provided"
"headteacherDeclarationService findPupilsForSchool finds the pupils using the schoolId"
"headteacherDeclarationService findPupilBySlugAndSchoolId throws an error when no urlSlug is provided"
"headteacherDeclarationService findPupilBySlugAndSchoolId throws an error when no schoolId is provided"
"headteacherDeclarationService findPupilBySlugAndSchoolId finds the pupil using the urlSlug and schoolId"
"headteacherDeclarationService updatePupilsAttendanceCode throws an error when no pupilIds are provided"
"headteacherDeclarationService updatePupilsAttendanceCode throws an error when no code is provided"
"headteacherDeclarationService updatePupilsAttendanceCode throws an error when no userId is provided"
"headteacherDeclarationService updatePupilsAttendanceCode throws an error when an invalid attendance code is provided"
"headteacherDeclarationService updatePupilsAttendanceCode calls pupilAttendanceDataService.sqlUpdateBatch"
"headteacherDeclarationService updatePupilsAttendanceCode drops the school results cache"
"---------------------------"
"/admin/spec/back-end/controllers/access-arrangements.spec.js"
"access arrangements controller: getOverview route displays the access arrangements overview page"
"access arrangements controller: getOverview route displays the access arrangements unavailable page when the feature is not accessible"
"access arrangements controller: getOverview route displays the overview in readonly mode when editing is no longer permitted"
"access arrangements controller: getOverview route throws an error if pupilAccessArrangementsService getPupils is rejected"
"access arrangements controller: getSelectAccessArrangements route displays the select access arrangements page"
"access arrangements controller: getSelectAccessArrangements route calls next when an error occurs during service call"
"access arrangements controller: postSubmitAccessArrangements route should fail when edit mode unavailable"
"access arrangements controller: postSubmitAccessArrangements route submits pupils access arrangements"
"access arrangements controller: postSubmitAccessArrangements route calls next if accessArrangementsService submit throws an error"
"access arrangements controller: postSubmitAccessArrangements route calls getSelectAccessArrangements if accessArrangementsService submit throws a validation Error"
"access arrangements controller: postSubmitAccessArrangements route calls getEditAccessArrangements if accessArrangementsService submit throws a validation Error on edit view"
"access arrangements controller: getEditAccessArrangements route throws an error if edit mode not available"
"access arrangements controller: getEditAccessArrangements route displays the edit access arrangements page"
"access arrangements controller: getEditAccessArrangements route calls next when an error occurs during service call"
"access arrangements controller: getDeleteAccessArrangements route throws an error if edit mode not available"
"access arrangements controller: getDeleteAccessArrangements route redirects to overview page when successfully deleting"
"access arrangements controller: getDeleteAccessArrangements route calls next when an error occurs during service call"
"---------------------------"
"/admin/spec/back-end/controllers/pupils-not-taking-the-check.spec.js"
"pupils-not-taking-the-check controller: Check routes #getPupilNotTakingCheck: When there are pupils for the active school should display 'pupils not taking the check' initial page"
"pupils-not-taking-the-check controller: Check routes #getPupilNotTakingCheck: When there are pupils for the active school should execute next if initial page fails to render"
"pupils-not-taking-the-check controller: Check routes #getSelectPupilNotTakingCheck : Select reason for pupils happy path"
"pupils-not-taking-the-check controller: Check routes #getSelectPupilNotTakingCheck : Select reason for pupils unhappy path - attendanceCodeService.getAttendanceCodes fails"
"pupils-not-taking-the-check controller: Check routes #getSelectPupilNotTakingCheck : Select reason for pupils unhappy path - pupilsNotTakingCheckService.getPupilsWithoutReasons fails"
"pupils-not-taking-the-check controller: Check routes #getSelectPupilNotTakingCheck : Select reason for pupils unhappy path - groupService.getGroups fails"
"pupils-not-taking-the-check controller: Check routes #savePupilNotTakingCheck: Save reason for pupil should save and redirect"
"pupils-not-taking-the-check controller: Check routes #savePupilNotTakingCheck: Save reason for pupil should redirect because req.body has missing data"
"pupils-not-taking-the-check controller: Check routes #savePupilNotTakingCheck: Save reason for pupil should return next because attendanceCodeService.updatePupilAttendanceBySlug fails"
"pupils-not-taking-the-check controller: Check routes #removePupilNotTakingCheck: Remove:  reason for pupil should redirect to the select pupils page if pupilId is not supplied"
"pupils-not-taking-the-check controller: Check routes #removePupilNotTakingCheck: Remove:  reason for pupil should delete reason from pupils document and redirect"
"pupils-not-taking-the-check controller: Check routes #removePupilNotTakingCheck: Remove:  reason for pupil should execute next if attendanceCodeService.unsetAttendanceCode fails"
"pupils-not-taking-the-check controller: Check routes #removePupilNotTakingCheck: Remove:  reason for pupil should execute next if pupilDataService.sqlFindOneBySlugAndSchool fails"
"pupils-not-taking-the-check controller: Check routes #viewPupilsNotTakingTheCheck should make a call to get the pupils"
"pupils-not-taking-the-check controller: Check routes #viewPupilsNotTakingTheCheck should execute next if pupilsNotTakingCheckService.getPupilsWithReasons fails"
"---------------------------"
"/admin/spec/back-end/controllers/group.spec.js"
"group controller Check routes #groupPupilsPage (happy path) should render the initial groups page"
"group controller Check routes #groupPupilsPage (unhappy path) should render the initial groups page"
"group controller Check routes #manageGroupPage (happy path) should render the add page"
"group controller Check routes #manageGroupPage (happy path) should render the edit page"
"group controller Check routes #manageGroupPage (happy path) should render the add page"
"group controller Check routes #manageGroupPage (happy path) should render the edit page"
"group controller Check routes #manageGroupPage (unhappy path) should fail to render the edit page and execute next"
"group controller Check routes #manageGroupPage (unhappy path) should fail to render the add page and execute next"
"group controller Check routes #addGroup (happy path) should create a new group"
"group controller Check routes #addGroup (unhappy path) should fail to create a new group"
"group controller Check routes #addGroup (unhappy path) should fail when form has errors"
"group controller Check routes #addGroup (unhappy path) should fail when getPupils fails"
"group controller Check routes #addGroup (unhappy path) should redirect when name and/or pupil body are empty"
"group controller Check routes #editGroup (happy path) should edit a group"
"group controller Check routes #editGroup (unhappy path) should redirect the user when req.body is incomplete"
"group controller Check routes #editGroup (unhappy path) should execute next when getGroupById fails"
"group controller Check routes #editGroup (unhappy path) should execute next when form validation fails"
"group controller Check routes #editGroup (unhappy path) should execute next when getPupils fails"
"group controller Check routes #editGroup (unhappy path) should execute next when update fails"
"group controller Check routes #removeGroup (happy path) should soft-delete a group"
"group controller Check routes #removeGroup (unhappy path - missing parameter group id) should soft-delete a group"
"group controller Check routes #removeGroup (unhappy path - soft-delete fails ) should soft-delete a group"
"---------------------------"
"/admin/spec/back-end/service/test-developer.service.spec.js"
"test-developer.service saveCheckForms calls prepareData and sqlInsertCheckForms when no validation error is detected"
"test-developer.service saveCheckForms does not call prepareData and sqlInsertCheckForms when validation error is detected"
"test-developer.service prepareSubmissionData reads valid csv and extracts submission data"
"test-developer.service hasExistingFamiliarisationCheckForm finds a familiarisation check form and returns true to indicate it exists"
"test-developer.service hasExistingFamiliarisationCheckForm finds a familiarisation check form and returns true to indicate it exists"
"test-developer.service getSavedForms find non deleted check forms and converts the data for the presentation layer "
"test-developer.service getCheckFormName fetches the name of the check form based on urlSlug provided"
"test-developer.service getCheckForm fetches view single check form data for the presentation layer "
"test-developer.service getCheckFormsByType calls check forms for live check form type"
"test-developer.service getCheckFormsByType calls check forms for familiarisation check form type"
"test-developer.service getCheckFormsByCheckWindowIdAndType fetches check forms based on check window and live check form type"
"test-developer.service getCheckFormsByCheckWindowIdAndType fetches check forms based on check window and familiarisation check form type"
"test-developer.service updateCheckWindowForms fetches check window, check form records and assigns forms to check window"
"test-developer.service updateCheckWindowForms returns an error if no check window is found"
"test-developer.service updateCheckWindowForms returns an error if no check forms are found"
"test-developer.service updateCheckWindowForms returns an error if no fetching check forms call fails"
"test-developer.service updateCheckWindowForms returns an error if no assigning check forms call fails"
"test-developer.service updateCheckWindowForms calls sqlUnassignFamiliarisationForm if no check forms are passed in familiarisation type"
"test-developer.service hasAssignedFamiliarisationForm returns true if a familiarisation form is assigned to the check window"
"test-developer.service hasAssignedFamiliarisationForm returns false if a familiarisation form is not assigned to the check window"
"test-developer.service hasAssignedFamiliarisationForm throws an error if check window is not found"
"---------------------------"
"/admin/spec/back-end/controllers/pupil-pin.spec.js"
"pupilPin controller: getGeneratePinsOverview route for live pins displays the generate pins overview page if no active pins are present"
"pupilPin controller: getGeneratePinsOverview route for familiarisation pins displays the generate pins overview page if no active pins are present"
"pupilPin controller: getGeneratePinsOverview route if environment is not set should call next"
"pupilPin controller: getGeneratePinsList route for live pins when the school is found in the database displays the generate pins list page"
"pupilPin controller: getGeneratePinsList route for live pins when the school is found in the database calls next if pin generation environment is not set"
"pupilPin controller: getGeneratePinsList route for familiarisation pins when the school is found in the database displays the generate pins list page"
"pupilPin controller: getGeneratePinsList route for familiarisation pins when the school is not found in the database it throws an error"
"pupilPin controller: postGeneratePins route for live pins displays the generated pins list page after successful saving"
"pupilPin controller: postGeneratePins route for live pins calls next if pin generation environment is not set"
"pupilPin controller: postGeneratePins route for live pins displays the generate pins list page if no pupil list is provided"
"pupilPin controller: postGeneratePins route for live pins calls next with an error if school is not found"
"pupilPin controller: postGeneratePins route for familiarisation pins displays the generated pins list page after successful saving"
"pupilPin controller: postGeneratePins route for familiarisation pins displays the generate pins list page if no pupil list is provided"
"pupilPin controller: postGeneratePins route for familiarisation pins calls next with an error if school is not found"
"pupilPin controller: getViewAndCustomPrintPins route for live pins displays the generated pupils list and password"
"pupilPin controller: getViewAndCustomPrintPins route for live pins should not call groupService and pupilPinPresenter methods if no pupils are found"
"pupilPin controller: getViewAndCustomPrintPins route for live pins calls next if error occurs"
"pupilPin controller: getViewAndCustomPrintPins route for live pins calls next if no pin generation environment has been set"
"pupilPin controller: getViewAndCustomPrintPins route for familiarisation pins displays the generated pupils list and password"
"pupilPin controller: getViewAndCustomPrintPins route for familiarisation pins calls next if error occurs"
"---------------------------"
"/admin/services/check-start.service/check-start.service.spec.js"
"check-start.service #prepareCheck2 throws an error if the pupilIds are not provided"
"check-start.service #prepareCheck2 throws an error if the schoolId is not provided"
"check-start.service #prepareCheck2 throws an error if the userId is not provided"
"check-start.service #prepareCheck2 throws an error if provided with pupilIds that are not a part of the school"
"check-start.service #prepareCheck2 calls sqlFindPupilsEligibleForPinGenerationById to find pupils"
"check-start.service #prepareCheck2 calls initialisePupilCheck to randomly select a check form"
"check-start.service #prepareCheck2 adds config to the database"
"check-start.service prepareCheck2:school password generation attempts to generate school pin if error 50001 thrown and setting enabled"
"check-start.service prepareCheck2:school password generation does not attempt to generate school pin if error 50001 thrown and setting disabled"
"check-start.service prepareCheck2:school password generation does not attempt to generate school pin if error.number is not 50001"
"check-start.service prepareCheck2:school password generation does not attempt to generate school pin if sqlCreateBatch does not error"
"check-start.service #initialisePupilCheck calls generatePinTimestamp to generate pinExpiresAt for a pupil"
"check-start.service #initialisePupilCheck calls allocateCheckForm for a pupil"
"check-start.service #initialisePupilCheck throws an error if a checkform is not returned"
"check-start.service #initialisePupilCheck for live pins returns a check object, ready to be inserted into the db"
"check-start.service #initialisePupilCheck for test pins returns a check object, ready to be inserted into the db"
"check-start.service #createPupilCheckPayloads when live checks are generated throws an error if the check form allocation IDs are not supplied"
"check-start.service #createPupilCheckPayloads when live checks are generated throws an error if the check form allocation ID param is not an array"
"check-start.service #createPupilCheckPayloads when live checks are generated prepares the question data"
"---------------------------"
"/admin/spec/back-end/service/date.service.spec.js"
"date service #formatFullGdsDate correctly formats a date"
"date service #formatFullGdsDate can be given a moment object as input"
"date service #formatFullGdsDate returns an empty string if the parameter is an empty string"
"date service #formatFullGdsDate returns an empty string if the parameter is missing"
"date service #formatFullGdsDate returns an empty string if the parameter is null"
"date service #formatFullGdsDate returns an empty string if the date is invalid"
"date service #formatShortGdsdate correctly formats a date"
"date service #formatShortGdsdate returns an empty string if the parameter is an empty string"
"date service #formatShortGdsdate returns an empty string if the parameter is missing"
"date service #formatShortGdsdate returns an empty string if the parameter is null"
"date service #formatShortGdsdate returns an empty string if the date is invalid"
"date service #formatUKDate correctly formats a date"
"date service #formatUKDate returns an empty string if the parameter is an empty string"
"date service #formatUKDate returns an empty string if the parameter is missing"
"date service #formatUKDate returns an empty string if the parameter is null"
"date service #formatUKDate returns an empty string if the date is invalid"
"date service #reverseFormatNoSeparator correctly formats a date"
"date service #reverseFormatNoSeparator returns an empty string if the parameter is an empty string"
"date service #reverseFormatNoSeparator returns an empty string if the parameter is missing"
"date service #reverseFormatNoSeparator returns an empty string if the parameter is null"
"date service #reverseFormatNoSeparator returns an empty string if the date is invalid"
"date service #formatTimeWithSeconds formats the time correctly, with single digits"
"date service #formatTimeWithSeconds formats the time correctly, with double digits"
"date service #formatTimeWithSeconds returns an empty string if the parameter is an empty string"
"date service #formatTimeWithSeconds returns an empty string if the parameter is missing"
"date service #formatTimeWithSeconds returns an empty string if the parameter is null"
"date service #formatTimeWithSeconds returns an empty string if the date is invalid"
"date service #formatIso8601 only accept a moment date as the parameter"
"date service #formatIso8601 checks the moment param to make sure it is valid and throws if it isnt"
"date service #formatIso8601 returns the expected ISO date as a String"
"date service #formatIso8601WithoutTimezone correctly formats a date"
"date service #formatDayAndDate correctly formats a date"
"date service #formatDayDateAndYear correctly formats a date"
"date service #formatDateAndTime correctly formats a date"
"date service #formatDateFromRequest should return a date correctly formatted"
"date service #formatCheckPeriod should return a date correctly formatted"
"date service createUTCFromDayMonthYear creates a moment date object"
"date service createUTCFromDayMonthYear sets the date of month"
"date service createUTCFromDayMonthYear sets the month"
"date service createUTCFromDayMonthYear sets the year"
"date service createUTCFromDayMonthYear sets the hours to zero"
"date service createUTCFromDayMonthYear sets the minutes to zero"
"date service createUTCFromDayMonthYear sets the seconds to zero"
"date service createUTCFromDayMonthYear sets the milliseconds to zero"
"date service createUTCFromDayMonthYear creates a moment date object from strings"
"date service createUTCFromDayMonthYear returns null if given an invalid date"
"date service createUTCFromDayMonthYear returns null when arguments are missing"
"date service createUTCFromDayMonthYear returns null when an argument are null"
"date service createLocalTimeFromDayMonthYear creates a moment date object"
"date service createLocalTimeFromDayMonthYear sets the date of month"
"date service createLocalTimeFromDayMonthYear sets the month"
"date service createLocalTimeFromDayMonthYear sets the year"
"date service createLocalTimeFromDayMonthYear sets the hours to zero"
"date service createLocalTimeFromDayMonthYear sets the minutes to zero"
"date service createLocalTimeFromDayMonthYear sets the seconds to zero"
"date service createLocalTimeFromDayMonthYear sets the milliseconds to zero"
"date service createLocalTimeFromDayMonthYear returns null if given an invalid date"
"date service createLocalTimeFromDayMonthYear returns null when arguments are missing"
"date service createLocalTimeFromDayMonthYear returns null when an argument are null"
"date service createLocalTimeFromDayMonthYear returns null when the date is invalid"
"date service #formatFileName correctly formats a date"
"date service #formatFileName returns an empty string if the parameter is an empty string"
"date service #formatFileName returns an empty string if the parameter is missing"
"date service #formatFileName returns an empty string if the parameter is null"
"date service #formatFileName returns an empty string if the date is invalid"
"date service #isBetweenInclusive returns true if the date matches the start date"
"date service #isBetweenInclusive returns true if the date matches the end date"
"date service #isBetweenInclusive returns true if the date is between the start and end dates"
"date service #isBetweenInclusive returns false if the date is before the start date"
"---------------------------"
"/admin/spec/back-end/controllers/pupil.spec.js"
"pupil controller: getAddPupil() route when the school is found in the database displays an add pupil page"
"pupil controller: getAddPupil() route when the school is found in the database catches errors in the render() call"
"pupil controller: #postAddPupil route the pupilData is saved calls pupilAddService to add a new pupil to the database"
"pupil controller: #postAddPupil route the pupilData is saved redirects to the pupil register page"
"pupil controller: #postAddPupil route the pupilData is saved calls pupilRegisterCachingService.dropPupilRegisterCache if pupil has been successfully added"
"pupil controller: #postAddPupil route the pupilData is not saved then it shows the page again"
"pupil controller: getAddMultiplePupils() route displays an add multiple pupil page"
"pupil controller: getAddMultiplePupils() route catches errors in the render() call"
"pupil controller: postAddMultiplePupils() route when the school is found in the database saves the new pupil and redirects to the register pupils page"
"pupil controller: postAddMultiplePupils() route when the school is found in the database drops pupil register cache after a save"
"pupil controller: postAddMultiplePupils() route when the school is found in the database displays the add multiple pupils page when file errors have been found"
"pupil controller: postAddMultiplePupils() route when the school is found in the database calls next for any thrown errors within pupilUpload service"
"pupil controller: postAddMultiplePupils() route when the school is found in the database calls next for any error that is returned from pupilUpload service"
"pupil controller: postAddMultiplePupils() route when the school is found in the database displays the add multiple pupils page when csv validation returns errors"
"pupil controller: postAddMultiplePupils() route when the school is not found in the database it throws an error"
"pupil controller: getErrorCSVFile route writes csv file to response and calls end to begin download"
"pupil controller: #getEditPupilById retrieves the pupil data"
"pupil controller: #getEditPupilById bails out if the pupil is not found"
"pupil controller: #getEditPupilById bails out if any of the method raises an exception"
"pupil controller: postEditPupil makes a call to retrieve the pupil"
"pupil controller: postEditPupil bails out if the pupil if not found"
"pupil controller: postEditPupil makes a call to retrieve the school"
"pupil controller: postEditPupil calls pupilRegisterCachingService.dropPupilRegisterCache if pupil has been successfully edited"
"---------------------------"
"/admin/spec/back-end/service/result.service.spec.js"
"result.service getPupilResultDataFromDb returns an object"
"result.service getPupilResultDataFromDb has a generatedAt prop"
"result.service getPupilResultDataFromDb has a schoolId prop"
"result.service getPupilResultDataFromDb sorts the pupils alphabetically"
"result.service getPupilResultDataFromDb sorts the pupils alphabetically - if the lastNames are the same it then sorts by foreName"
"result.service getPupilResultDataFromDb sorts the pupils alphabetically - if the lastname and forenames are the same it sorts by dob"
"result.service getPupilResultDataFromDb sorts the pupils alphabetically - if the lastname, forename and dob are the same it sorts by middlenames"
"result.service getPupilResultDataFromDb returns the pupil group_id"
"result.service getPupilResultDataFromDb returns the pupil full name"
"result.service getPupilResultDataFromDb returns the pupil full name with middle names if pupil differentiation requires a middleName sort"
"result.service getPupilResultDataFromDb returns a status field for each pupil"
"result.service getPupilResultDataFromDb returns a score field for each pupil that took the check"
"result.service getPupilResultData calls redisCacheService get when school id is provided"
"result.service getPupilResultData throws an error if school id is not provided"
"result.service getPupilResultData returns undefined if parsing the redis response fails"
"result.service getPupilResultData saves the result to redis if it queried the database"
"result.service createPupilData assigns a score to a pupil with a completed check"
"result.service createPupilData returns the right shaped object"
"result.service assignStatus describes complete pupils with no status"
"result.service assignStatus describes incomplete pupils with an incomplete status"
"result.service assignStatus describes pupils who did not take a check"
"result.service assignStatus describes pupils who are marked as not attending"
"---------------------------"
"/admin/spec/back-end/controllers/service-manager.spec.js"
"service manager controller: getServiceManagerHome renders the service manager home page"
"service manager controller: getUpdateTiming renders the custom timings page"
"service manager controller: getUpdateTiming throws an error if settings call is rejected"
"service manager controller: setUpdateTiming calls redirect after successful update"
"service manager controller: setUpdateTiming renders check settings if validator error occurs"
"service manager controller: getUploadPupilCensus renders the upload pupil census page"
"service manager controller: getUploadPupilCensus throws an error if fetching existing pupil census fails"
"service manager controller: postUploadPupilCensus redirects to pupil census page when successfully uploaded a csv file"
"service manager controller: postUploadPupilCensus calls next when upload is rejected"
"service manager controller: postUploadPupilCensus calls getUploadPupilCensus with validation error when there is a file error"
"service manager controller: getRemovePupilCensus redirects to pupil census page when successfully removed the selected pupil"
"service manager controller: getRemovePupilCensus calls next when upload is rejected"
"service manager controller: getSceSettings should render after fetching schools"
"service manager controller: getSceSettings should throw an error when fetching schools call is rejected"
"service manager controller: cancelSceSettings redirect to the index page"
"service manager controller: postSceSettings redirects to the sce settings page when successfully applied changes"
"service manager controller: postSceSettings calls next when applying sce settings failed"
"service manager controller: getSceAddSchool calls render after fetching schools"
"service manager controller: getSceAddSchool throws an error when fetching schools call is rejected"
"service manager controller: postSceAddSchool redirects to the sce settings page when successfully added a school"
"service manager controller: postSceAddSchool calls next when insert or update failed"
"service manager controller: postSceAddSchool renders sce add school if validator error occurs"
"service manager controller: getSceRemoveSchool should flash the deleted message and call redirect after removing school"
"service manager controller: getSceRemoveSchool should throw an error when removing a school fails"
"---------------------------"
"/admin/services/ctf-service/ctf.service.spec.js"
"ctfService is defined"
"ctfService has a method to download the xml results to send to the pupil as a file"
"ctfService throws an error if the hdf has not been signed"
"ctfService throws an error if the results are not yet available to view"
"ctfService getCtfResult returns the score if they have taken the check"
"ctfService getCtfResult returns \"A\" if our system has marked them as not attending because of absence"
"ctfService getCtfResult returns \"B\" if our system has marked them as not attending because they are working below expectation"
"ctfService getCtfResult returns \"J\" if our system has marked them as not attending because they have just arrived"
"ctfService getCtfResult returns \"L\" if our system has marked them as not attending because they have left the school"
"ctfService getCtfResult returns \"U\" if our system has marked them as not attending because they are unable to access the check"
"ctfService getCtfResult returns \"Z\" if our system has marked them as not attending because they are incorrectly registered"
"ctfService getCtfResult returns \"X\" if our system has them attending but they have not had a pin generated"
"ctfService getCtfResult returns \"X\" if our system has them attending and they had a PIN generated but did not take the check"
"ctfService getCtfResult returns \"X\" if our system has them attending and they did not take the restart"
"ctfService getCtfResult returns \"X\" by default if we can't determine anything better"
"ctfService buildXmlString is defined"
"ctfService buildXmlString returns valid xml"
"ctfService buildXmlString has a first element called `CTfile`"
"ctfService buildXmlString the CTfile element children are present"
"ctfService buildXmlString the Header element has a DocumentName"
"ctfService buildXmlString the Header element has a CTFversion"
"ctfService buildXmlString the Header element has a DateTime"
"ctfService buildXmlString the Header element has a DocumentQualifier"
"ctfService buildXmlString the Header element has a SupplierID"
"ctfService buildXmlString the Header element has a SourceSchool"
"ctfService buildXmlString the SourceSchool element has a LEA"
"ctfService buildXmlString the SourceSchool element has a Estab"
"ctfService buildXmlString the SourceSchool element has a URN"
"ctfService buildXmlString the SourceSchool element has a SchoolName"
"ctfService buildXmlString the SourceSchool element has a AcademicYear"
"ctfService buildXmlString the Header element has a DestSchool"
"ctfService buildXmlString the DestSchool element has an LEA"
"ctfService buildXmlString the DestSchool element has an Estab"
"ctfService buildXmlString the DestSchool element has an URN"
"ctfService buildXmlString the CTFpupilData element has a pupil element"
"ctfService buildXmlString the Pupil element has a UPN"
"ctfService buildXmlString the Pupil element has a Surname"
"ctfService buildXmlString the Pupil element has a Forename"
"ctfService buildXmlString the Pupil element has a DOB"
"ctfService buildXmlString the Pupil element has a Gender"
"ctfService buildXmlString the Pupil element has a StageAssessments element"
"ctfService buildXmlString the StageAssessments element has a KeyStage element"
"ctfService buildXmlString the KeyStage element has a Stage element"
"ctfService buildXmlString the KeyStage element has child elements"
"ctfService buildXmlString the KeyStage element has a StageAssessment element"
"ctfService buildXmlString the StageAssessment element has a Locale"
"ctfService buildXmlString the StageAssessment element has a Year"
"ctfService buildXmlString the StageAssessment element has a Subject"
"ctfService buildXmlString the StageAssessment element has a Method"
"ctfService buildXmlString the StageAssessment element has a Component"
"ctfService buildXmlString the StageAssessment element has a ResultStatus"
"ctfService buildXmlString the StageAssessment element has a ResultQualifier"
"ctfService buildXmlString the StageAssessment element has a Result"
"---------------------------"
"/admin/spec/back-end/service/group.service.spec.js"
"group.service #getGroups should return groups"
"group.service #getGroupsWithPresentPupils should return groups"
"group.service #getGroupsAsArray happy path should return groups"
"group.service #getGroupsAsArray happy path should return an error if schoolId is missing"
"group.service #getPupils should return pupils"
"group.service #getPupils should return an error if schoolId is missing"
"group.service #getGroupById should return group document filtered by group id"
"group.service #getGroupById should return an error if schoolId or groupId are missing"
"group.service #update happy path should update group (including pupils)"
"group.service #update happy path should update group (including pupils) when sent as an object"
"group.service #update happy path should update group (excluding pupils when they are the same)"
"group.service #update happy path should trim whitespace from name"
"group.service #update unhappy path should return an error if schoolId is missing"
"group.service #update unhappy path should not update group"
"group.service #create happy path should create group"
"group.service #create happy path should trim whitespace from name"
"group.service #create unhappy path should return an error if groupName or schoolId are missing"
"group.service #create unhappy path should fail to create a group"
"group.service #findGroupsByPupil should return groups that have pupils"
"group.service #findGroupsByPupil should return an error if no pupil id"
"group.service #assignGroupsToPupils should return pupils with groups added"
"group.service #assignGroupsToPupils should return an empty array if there are no pupils"
"group.service #assignGroupsToPupils should return the pupils mock if there are no groups"
"group.service remove should throw if schoolId is not provided"
"group.service remove should throw if groupId is not provided"
"group.service remove should get the pupil register redis key, invalidate the relevant cache value and perform soft delete"
"---------------------------"
"/admin/spec/back-end/controllers/results.spec.js"
"results controller: getViewResultsPage route renders result view page"
"results controller: getViewResultsPage route calls next when getPupilResultData throws an error"
"results controller: getViewResultsPage route renders incomplete hdf page when hdf record for school is not found and current date is before second Monday after check end date"
"results controller: getViewResultsPage route renders results view page when hdf record for school is not found but datetime for unsubmitted hdfs has passed"
"results controller: getViewResultsPage route renders unavailable page when results page is not yet accessible"
"results controller: getViewResultsPage route renders unavailable page when getPupilResultData does not return data"
"results controller: getCtfDownload is defined"
"results controller: getCtfDownload calls next() if the schoolId is missing"
"results controller: getCtfDownload calls ctfService.getSchoolResultDataAsXmlString to get the data"
"results controller: getCtfDownload sends the download file as an attachment"
"results controller: getCtfDownload sets the Content-type to text/xml"
"results controller: getCtfDownload sends the XML file out as the attachment"
"results controller: getCtfDownload calls next() if there is an error thrown from processing"
"---------------------------"
"/admin/spec/back-end/controllers/hdf.spec.js"
"attendance controller: getDeclarationForm renders the declaration form page"
"attendance controller: getDeclarationForm redirects when the hdf has been submitted"
"attendance controller: getDeclarationForm renders section unavailable when hdf is not available"
"attendance controller: postDeclarationForm route redirects to the submit attendance page"
"attendance controller: postDeclarationForm route renders declaration form if validator error occurs"
"attendance controller: getReviewPupilDetails renders the pupil details list page"
"attendance controller: getEditReason renders the edit attendance reason page"
"attendance controller: postSubmitEditReason redirects to the review pupils page"
"attendance controller: getConfirmSubmit renders the confirm and submit page"
"attendance controller: getConfirmSubmit calls next if a service method throws"
"attendance controller: getConfirmSubmit renders declaration form page to display unavailable content when hdf eligibility is false "
"attendance controller: postConfirmSubmit redirects to the submitted page"
"attendance controller: postConfirmSubmit renders confirm and submit form if validator error occurs"
"attendance controller: getHDFSubmitted redirects to the submit page if there is no HDF"
"attendance controller: getHDFSubmitted renders the submitted page"
"attendance controller: getHDFSubmittedForm redirects to the submit page if there is no HDF"
"attendance controller: getHDFSubmittedForm renders the submitted form page"
"---------------------------"
"/admin/spec/back-end/controllers/restart.spec.js"
"restart controller: getRestartOverview route displays the restart overview page"
"restart controller: getRestartOverview route throws an error if getSubmittedResults has an error"
"restart controller: getSelectRestartList route displays the restart pupils list page"
"restart controller: getSelectRestartList route calls next if an error occurs within restart service"
"restart controller: postSubmitRestartList route redirects the restart list page if no pupils are provided"
"restart controller: postSubmitRestartList route renders again the restart list page if the validation fails"
"restart controller: postSubmitRestartList route renders the restart overview page when successfully submitted restarts"
"restart controller: postSubmitRestartList route renders a specific flash message for 1 pupil"
"restart controller: postDeleteRestart route redirects to restart overview page when successfully marking the pupil as deleted"
"restart controller: postDeleteRestart route calls next if error occurred while marking the pupil as deleted"
"---------------------------"
"/admin/spec/back-end/service/check-window-v2.service.spec.js"
"check-window-v2.service getCheckWindow should get check window based on urlSlug"
"check-window-v2.service getCheckWindow should throw an MtcCheckWindowNotFound error type if urlSlug is empty"
"check-window-v2.service getCheckWindow should throw an MtcCheckWindowNotFound error type if urlSlug is invalid"
"check-window-v2.service getCheckWindows should get check windows names with statuses and provide canRemove boolean flag"
"check-window-v2.service getPresentAndFutureCheckWindows should get check windows that are not in the past"
"check-window-v2.service markDeleted should mark the check window as deleted when it is in the future"
"check-window-v2.service markDeleted should throw an error if check window url slug is not found"
"check-window-v2.service markDeleted should throw an error if check window url slug is invalid"
"check-window-v2.service markDeleted should throw an error if check window is not found"
"check-window-v2.service markDeleted should throw an error if check window is active"
"check-window-v2.service markDeleted should throw an error if check window is a past one"
"check-window-v2.service prepareSubmissionData should prepare data for submission"
"check-window-v2.service getActiveCheckWindow should cache successive calls"
"check-window-v2.service getActiveCheckWindow only caches for 60 seconds"
"---------------------------"
"/admin/spec/back-end/service/config.service.spec.js"
"config service batch config returns a base config when no AA are set"
"config service batch config set audible sounds correctly"
"config service batch config set input assistance correctly"
"config service batch config set colour contrast correctly without a colour contrast code already set"
"config service batch config sets the font size correctly without a font size code already set"
"config service batch config sets the font size correctly with a font size code already set"
"config service batch config sets the next-between-questions flag correctly"
"config service batch config sets the question reader flag correctly"
"config service batch config sets the numpad removal flag correctly"
"config service batch config logs any unknown access arrangement code"
"config service batch config can set multiple access codes"
"config service #validateConfigDate throws if passed null"
"config service #validateConfigDate throws if passed undefined"
"config service #validateConfigDate throws if passed {}"
"config service #validateConfigDate throws if passed an empty array"
"config service #validateConfigDate throws if passed a 0 second questionTime"
"config service #validateConfigDate throws if passed a 0 second loadingTime"
"config service #validateConfigDate throws if passed a 0 second checkTime"
"---------------------------"
"/admin/spec/back-end/service/pupil-census.service.spec.js"
"pupilCensusService process calls file validator"
"pupilCensusService upload calls create then processes the data and finally calls update"
"pupilCensusService upload throws an error if create does not return insertId"
"pupilCensusService upload throws an error if bulk process does not return submission result"
"pupilCensusService upload rejects if process fails"
"pupilCensusService upload2 reads the file into stream, creates a job record and uploads to blob storage"
"pupilCensusService upload2 throws error if the job creation fails"
"pupilCensusService upload2 calls sqlUpdateStatus with failed status code if if blob uploading fails"
"pupilCensusService getUploadedFile fetches a pupil census record and related status"
"pupilCensusService getUploadedFile returns if no pupil census record is found"
"pupilCensusService getUploadedFile throws an error pupil census record does not have a job status code"
"pupilCensusService create calls sqlCreate method to create the pupil census record"
"pupilCensusService updateJobOutput calls sqlUpdate method to update the pupil census record"
"pupilCensusService remove calls sqlUpdate method to update the pupil census record with the deleted status"
"pupilCensusService remove throws an error when argument passed is undefined"
"---------------------------"
"/admin/spec/back-end/service/jwt.service.spec.js"
"JWT service #createToken creates a token"
"JWT service #createToken the token details look correct"
"JWT service #createToken throws an error when the pupil object is missing"
"JWT service #createToken throws an error when the expiry date is missing"
"JWT service #createToken throws an error when the expiry date is not a moment object"
"JWT service verifying a token and the pupil is found throws when not provided a token"
"JWT service verifying a token and the pupil is found then it is able to decode a valid token"
"JWT service verifying a token and the pupil is NOT found then it throws an error"
"JWT service verifying a token and the pupil has had the key revoked then it throws an error"
"JWT service verifying a token and the pupil has an incorrect jwtSecret then it throws an error"
"JWT service break-in tests denies a token that has expired 1 hour ago"
"JWT service break-in tests denies a token that has expired 1 second ago"
"JWT service break-in tests denies a token that is not yet active, but has not yet expired"
"JWT service break-in tests denies a token that is almost active, but has not yet expired"
"JWT service break-in tests denies a token that not active, and has expired"
"JWT service break-in tests denies a weird token"
"---------------------------"
"/admin/spec/back-end/service/pupil-status.service.spec.js"
"pupil-status.service #getProcessStatusV2 it is a function"
"pupil-status.service #getProcessStatusV2 it throws an error if pinExpiresAt is an object"
"pupil-status.service #getProcessStatusV2 it throws an error if pinExpiresAt is a number"
"pupil-status.service #getProcessStatusV2 does not throw if pinExpiresAt is null"
"pupil-status.service #getProcessStatusV2 it can detect a pupil not taking the check"
"pupil-status.service #getProcessStatusV2 it can detect a Not Started pupil"
"pupil-status.service #getProcessStatusV2 it can detect a PIN Generated pupil"
"pupil-status.service #getProcessStatusV2 it can detect a Logged In pupil"
"pupil-status.service #getProcessStatusV2 it can detect a pupil that has a check in processing phase"
"pupil-status.service #getProcessStatusV2 it can detect a pupil that has a check with error in processing"
"pupil-status.service #getProcessStatusV2 it can detect a Complete pupil"
"pupil-status.service #getProcessStatusV2 it can detect a restart"
"pupil-status.service #getProcessStatusV2 it can detect an Incomplete check"
"pupil-status.service #getProcessStatusV2 it can detect a pupil was allocated a check that then expired"
"pupil-status.service #getProcessStatusV2 a test that does not matches anything gets N/A"
"pupil-status.service #getProcessStatusV2 it detects a restart that was allocated a new check that then expired"
"pupil-status.service #getPupilStatusData throws an error if no school password is provided"
"pupil-status.service #getPupilStatusData calls the settingService get if school is provided"
"pupil-status.service #getPupilStatusData calls the pupilStatusDataService sqlFindPupilsFullStatus if school is provided"
"pupil-status.service #getPupilStatusData calls the pupilStatusService addStatus if school is provided"
"pupil-status.service #getPupilStatusData calls the pupilIdentificationFlagService addIdentificationFlags if school is provided"
"pupil-status.service #getPupilStatusData calls the tableSorting applySorting if school is provided"
"---------------------------"
"/admin/spec/back-end/service/pupil-access-arrangements.service.spec.js"
"pupilAccessArrangementsService getPupils successfully processes and returns a list of pupils with associated access arrangements"
"pupilAccessArrangementsService getPupils successfully processes and removes reason required phrase if exists on access arrangements description list"
"pupilAccessArrangementsService getPupils successfully processes and should not include description property"
"pupilAccessArrangementsService getPupilEditFormData returns pupil access arrangement data without question reader reason"
"pupilAccessArrangementsService getPupilEditFormData returns pupil access arrangement data with question reader reason"
"pupilAccessArrangementsService deletePupilAccessArrangements returns pupil data when successfully deleting relevant access arrangements"
"pupilAccessArrangementsService deletePupilAccessArrangements rejects if url slug is not present"
"pupilAccessArrangementsService #getEligiblePupilsWithFullNames it returns an object with combined name values and urlSlug"
"pupilAccessArrangementsService #getEligiblePupilsWithFullNames it throws an error when dfeNumber is not provided"
"---------------------------"
"/admin/spec/back-end/helpers/check-form-presenter.spec.js"
"checkFormPresenter getPresentationListData shapes the data in the appropriate format for the presentation view"
"checkFormPresenter getPresentationCheckFormData fetches data for presenting single check form"
"checkFormPresenter getFlashMessageData returns flash message data for the list view"
"checkFormPresenter getPresentationCheckWindowListData returns check window list data formatted"
"checkFormPresenter getPresentationCheckWindowData returns check window data formatted"
"checkFormPresenter getPresentationAvailableFormsData returns check window data formatted"
"checkFormPresenter getAssignFormsFlashMessage returns appropriate highlight message for the number of check forms assigned to the live check window"
"checkFormPresenter getAssignFormsFlashMessage returns appropriate highlight message for a single check form that has been assigned to the live check window"
"checkFormPresenter getAssignFormsFlashMessage returns appropriate highlight message for a single check form that has been assigned to the familiarisation check window"
"checkFormPresenter getAssignFormsFlashMessage returns appropriate highlight message for a single check form that has been unassigned to the familiarisation check window"
"---------------------------"
"/admin/spec/back-end/authentication/middleware.spec.js"
"isAuthenticated  if the request is authenticated authenticates a user against an allowed role of a string type"
"isAuthenticated  if the request is authenticated authenticates a user against an allowed list of roles"
"isAuthenticated  if the request is authenticated does not authenticate a user that is not matching a role of a string type"
"isAuthenticated  if the request is authenticated does not authenticate a user that is not included in the list of allowed roles"
"isAuthenticated  if the request is authenticated calls redirect if the role passed is undefined while the request is authenticated"
"isAuthenticated  if the request is authenticated calls redirect if the role passed is an empty string while the request is authenticated"
"isAuthenticated  if the request is authenticated calls redirect if the role passed is an object while the request is authenticated"
"isAuthenticated  if the request is authenticated calls redirect if the role passed is an object while the request is authenticated"
"isAuthenticated  if the request is authenticated calls redirect if the request user object does not have a role defined "
"isAuthenticated  if the request is authenticated prevents the programmer mis-use"
"isAuthenticated  if the request is authenticated redirects to unauthorised route if the user role is undefined and the allowed role is undefined"
"isAuthenticated  if the request is authenticated redirects to unauthorised route if the user role is undefined and the allowed role is an array with a value of undefined"
"isAuthenticated  if the request is not authenticated redirects to sign in route"
"---------------------------"
"/admin/spec/back-end/controllers/authentication.spec.js"
"authentication controller should be defined"
"authentication controller home unauthenticated requests should redirect to signin when requested url is not /sign-in"
"authentication controller home unauthenticated requests renders view if /sign-in is requested"
"authentication controller home unauthenticated requests redirect to /oidc-sign-in if in dsi auth mode"
"authentication controller home authenticated requests should redirect to correct home when teacher role is authenticated"
"authentication controller home authenticated requests should redirect to correct home when helpdesk role is authenticated"
"authentication controller home authenticated requests should redirect to correct home when test dev role is authenticated"
"authentication controller home authenticated requests should redirect to correct home when service manager is authenticated"
"authentication controller home authenticated requests should redirect to correct home when techsupport role is authenticated"
"authentication controller getSignIn redirects to /sign-in if unauthenticated"
"authentication controller getSignIn redirects to home if authenticated"
"authentication controller postSignIn redirects to home"
"authentication controller getSignOut logs the user out and regenerates a session"
"authentication controller getSignInFailure should render failure view"
"authentication controller getUnauthorised should render failure view"
"authentication controller getSignedOut should render signedout view"
"---------------------------"
"/admin/spec/back-end/service/administration-message.service.spec.js"
"administrationMessageService getMessage should call redis cache service to fetch the service message"
"administrationMessageService getMessage should not call administrationMessageDataService.sqlFindActiveServiceMessage if service message is fetched from redis"
"administrationMessageService getMessage should call administrationMessageDataService.sqlFindActiveServiceMessage if redis service returns false while attempting to fetch the serviceMessage"
"administrationMessageService getMessage should call administrationMessageDataService.sqlFindActiveServiceMessage if undefined is returned from redis service"
"administrationMessageService setMessage should not continue further if a user id is not present"
"administrationMessageService setMessage should call emptyFieldsValidator.validate"
"administrationMessageService setMessage should not continue further if a validation error occurs"
"administrationMessageService setMessage should call administrationMessageDataService.sqlCreate"
"administrationMessageService setMessage should call redisCacheService.set after a successful database transmission"
"administrationMessageService prepareSubmissionData should return an object that includes title, message and createdByUser_id when creating a record"
"administrationMessageService dropMessage should not continue further if a user id is not present"
"administrationMessageService dropMessage should call administrationMessageDataService.sqlDeleteServiceMessage if user id is present"
"administrationMessageService dropMessage should not call redisCacheService.drop if administrationMessageDataService.sqlDeleteServiceMessage fails"
"administrationMessageService dropMessage should call redisCacheService.drop if administrationMessageDataService.sqlDeleteServiceMessage is successful"
"---------------------------"
"/admin/spec/back-end/service/sas-token.service.spec.js"
"sas-token.service generateSasToken without redis throws an error if the expiryDate is not provided"
"sas-token.service generateSasToken without redis throws an error if the expiryDate is not a moment object"
"sas-token.service generateSasToken without redis throws an error if the expiryDate is not a moment object"
"sas-token.service generateSasToken without redis sets the start Date to more than 4.5 minutes in the past"
"sas-token.service generateSasToken without redis it generates the SAS token"
"sas-token.service generateSasToken without redis sets the permissions to add only"
"sas-token.service generateSasToken without redis makes a call to redis to fetch the cached token"
"sas-token.service generateSasToken without redis makes a call to redis to cache the token"
"sas-token.service generateSasToken with redis short-circuits when the token is found in cache"
"sas-token.service getTokens calls redis once to retrieve all the tokens"
"sas-token.service getTokens calls out to generate sas tokens if not found in redis"
"sas-token.service getTokens calls out to generate sas tokens if any are not found in redis"
"sas-token.service getTokens does not return the check-submitted token for tio checks"
"---------------------------"
"/admin/spec/back-end/helpers/check-window-presenter.spec.js"
"checkWindowHelper getViewModelData fetch the checkWindow record and shape the data for the UI"
"checkWindowHelper getViewModelData should have adminStartDateDisabled as false if admin start date is today"
"checkWindowHelper getViewModelData should have adminStartDateDisabled as true if admin start date is yesterday"
"checkWindowHelper getViewModelData should have adminEndDateDisabled as false if admin end date is today"
"checkWindowHelper getViewModelData should have adminEndDateDisabled as true if admin end date is yesterday"
"---------------------------"
"/admin/spec/back-end/lib/validator/check-form/multiple-check-forms-validator.spec.js"
"multipleCheckFormsValidator validate calls multiple check form validation and validates check form type and returns a validation error object with no errors"
"multipleCheckFormsValidator validate calls multiple check form validation and validates check form type and returns a validation error object with duplicate check form name error"
"multipleCheckFormsValidator validate calls multiple check form validation and validates check form type and returns a validation error object with max uploaded files reached error"
"multipleCheckFormsValidator validate calls multiple check form validation and validates check form type and returns a validation error object with multiple familiarisation forms error"
"multipleCheckFormsValidator validate calls multiple check form validation and validates check form type and returns a validation error object with assigned existing familiarisation form error"
"multipleCheckFormsValidator validate calls multiple check form validation and validates check form type and returns no validation error object with deleted assigned existing familiarisation form error"
"multipleCheckFormsValidator validate calls multiple check form validation and validates check form type and returns validation error object with assigned existing familiarisation form error that is not deleted"
"---------------------------"
"/admin/spec/back-end/helpers/table-sorting.spec.js"
"tableSort comparer should return 1 if second value needs to be sorted first on ascending order"
"tableSort comparer should return -1 if the first value needs to be sorted first on ascending order"
"tableSort comparer should return 1 if second value needs to be sorted first on descending order"
"tableSort comparer should return -1 if first value needs to be sorted first on descending order"
"tableSort comparer should return 0 if value are equal"
"tableSort comparer should return 1 if the second stringified number value needs to be sorted first on ascending order"
"tableSort comparer should call return 0 if the values are equal stringified numbers"
"tableSort comparer should call getNumberComparisonResult if the values are stringified numbers"
"tableSort comparer should call getStringComparisonResult if the values include combinations of letters and numbers"
"tableSort isEmpty should return false if value is not an empty string"
"tableSort isEmpty should return true if value is empty string"
"tableSort isEmpty should return true if value is null"
"tableSort isEmpty should return true if value is undefined"
"tableSort applySorting should call comparer to sort array values"
"tableSort isNumericValue returns true if the value is a stringified number"
"tableSort isNumericValue returns true if the value is a number"
"tableSort isNumericValue returns false if the value is a stringified combination of letters and numbers"
"tableSort isNumericValue returns false if the value is an empty string"
"tableSort getNumberComparisonResult returns negative number when the second value is greaer than the first in ascending order"
"tableSort getNumberComparisonResult returns positive number when the second value is greaer than the first in descending order"
"tableSort getNumberComparisonResult returns negative number when the first value is greater than the second in ascending order"
"tableSort getNumberComparisonResult returns positive number when the first value is greater than the second in descending order"
"tableSort getNumberComparisonResult returns 0 if they values are equal regardless of sorting type"
"tableSort sortByProps sorts strings"
"tableSort sortByProps sorts numbers"
"tableSort sortByProps does secondary and tertiary sort"
"---------------------------"
"/admin/spec/back-end/lib/validator/retro-input-assistant-validator.spec.js"
"retro input assistant validator should be defined"
"retro input assistant validator should return no validation errors if payload is valid"
"retro input assistant validator should invalidate if input assistant first name is undefined"
"retro input assistant validator should invalidate if input assistant first name is an empty string"
"retro input assistant validator should invalidate if input assistant first name is longer than 128 chars"
"retro input assistant validator should invalidate if input assistant first name contains special characters"
"retro input assistant validator should invalidate if input assistant last name is undefined"
"retro input assistant validator should invalidate if input assistant last name is an empty string"
"retro input assistant validator should invalidate if input assistant last name is longer than 128 chars"
"retro input assistant validator should invalidate if input assistant last name contains special characters"
"retro input assistant validator should invalidate if input assistant reason is undefined"
"retro input assistant validator should invalidate if input assistant reason is an empty string"
"retro input assistant validator should invalidate if pupilUuid is undefined"
"retro input assistant validator should invalidate if pupil id is not a valid UUID"
"retro input assistant validator should invalidate if userId is undefined"
"retro input assistant validator should invalidate if userId is less than 1"
"---------------------------"
"/admin/spec/back-end/lib/validator/common/date-validator.spec.js"
"New check window date validator validate should not call addError method if the validation is successful"
"New check window date validator validate calls addError with adminEndDayWrong message if the admin end day is missing"
"New check window date validator validate calls addError with adminEndDayWrong and adminEndDayInvalidChars messages if the admin end day is invalid"
"New check window date validator validate calls addError with adminEndMonthWrong, message if the admin end month is missing"
"New check window date validator validate calls addError with adminEndMonthWrong and adminEndMonthInvalidChars messages if the admin end month is invalid"
"New check window date validator validate calls addError with adminEndYearWrong, message if the admin end year is missing"
"New check window date validator validate calls addError with adminEndYearWrong and adminEndYearInvalidChars messages if the admin end year is invalid"
"New check window date validator validate calls addError with adminEndYearWrong and adminEndYearInvalidChars messages if the admin end year is invalid"
"New check window date validator validate calls addError with adminEndYearWrong and adminEndDateInThePast messages if the admin end year is in the past"
"New check window date validator validate does not call addError with adminEndYearWrong and adminEndDateInThePast messages if the admin end year is today"
"New check window date validator validate calls addError with adminEndDay message if the admin end day exceeds the maximum for the specific month"
"---------------------------"
"/admin/spec/back-end/lib/validator/check-form/single-check-form-validator.spec.js"
"singleCheckFormValidator validate calls single check form, multiple check form validation and validates check form type and returns a validation error object with no errors"
"singleCheckFormValidator validate calls single check form, multiple check form validation and validates check form type and returns a validation error object when no file is provided"
"singleCheckFormValidator validate calls single check form, multiple check form validation and validates check form type and returns a validation error object with incorrect file extension"
"singleCheckFormValidator validate calls single check form, multiple check form validation and validates check form type and returns a validation error object with incorrect integers"
"singleCheckFormValidator validate calls single check form, multiple check form validation and validates check form type and returns a validation error object with incorrect number of rows and integers"
"singleCheckFormValidator validate calls single check form, multiple check form validation and validates check form type and returns a validation error object with not a readable file"
"singleCheckFormValidator validate calls single check form, multiple check form validation and validates check form type and returns a validation error object with invalid number of columns"
"singleCheckFormValidator validate calls single check form, multiple check form validation and validates check form type and returns a validation error object when a value is null"
"singleCheckFormValidator validate calls single check form, multiple check form validation and validates check form type and returns a validation error object with invalid characters"
"singleCheckFormValidator validate calls single check form, multiple check form validation and validates check form type and returns no validation error object when two additional empty rows are found"
"singleCheckFormValidator validate calls single check form, multiple check form validation and validates check form type and returns validation errors object when one empty rows is found in the middle of the file"
"---------------------------"
"/admin/spec/back-end/controllers/check-window.spec.js"
"check window controller: getManageCheckWindows route displays the check windows hub page"
"check window controller: getManageCheckWindows route calls next if getCheckWindows method throws an error"
"check window controller: createCheckWindow route displays the new check windows form page"
"check window controller: submitCheckWindow route submits the new check windows form page"
"check window controller: submitCheckWindow route submits the edited check windows form page"
"check window controller: submitCheckWindow route calls next when checkWindowV2AddService submit throws an error"
"check window controller: submitCheckWindow route calls render when checkWindowV2AddService process throws a validation error"
"check window controller: removeCheckWindow route calls markDeleted to perform check window deletion marking"
"check window controller: removeCheckWindow route calls next if an error is thrown from markDeleted method"
"check window controller: removeCheckWindow route getCheckWindowEditForm route calls getCheckWindowEditData and renders check window form"
"check window controller: removeCheckWindow route getCheckWindowEditForm route calls next when getCheckWindowEditData throws an error"
"---------------------------"
"/admin/spec/back-end/service/check-window-v2-update.service.spec.js"
"check-window-v2-update.service submit when validation is successful should process data and perform db record update"
"check-window-v2-update.service submit when checkWindowAddValidator validation is unsuccessful should throw a validation error"
"check-window-v2-update.service submit when checkWindowAddValidator validation is unsuccessful should not proceed with active check window validation"
"check-window-v2-update.service submit when activeCheckWindowValidator validation is unsuccessful should throw a validation error and prevent sqlUpdate call"
"check-window-v2-update.service getValidationConfig should return no disabled attributes if all dates are in the future back to the caller"
"check-window-v2-update.service getValidationConfig should return no disabled attributes if all dates are set to the current date"
"check-window-v2-update.service getValidationConfig should return a disabled attribute if it is in the past back to the caller"
"---------------------------"
"/admin/spec/back-end/service/business-availability.service.spec.js"
"businessAvailabilityService #isPinGenerationAllowed should return true if live pin generation is allowed"
"businessAvailabilityService #isPinGenerationAllowed should return false if familiarisation pin generation is disallowed"
"businessAvailabilityService #areRestartsAllowed should return true if restarts are allowed"
"businessAvailabilityService #areRestartsAllowed should return false if restarts are not allowed"
"businessAvailabilityService #areGroupsAllowed should return true if groups are allowed"
"businessAvailabilityService #areGroupsAllowed should return false if groups are not allowed"
"businessAvailabilityService #areAccessArrangementsAllowed should return true if access arrangements are allowed"
"businessAvailabilityService #areAccessArrangementsAllowed should return false if access arrangements are not allowed"
"businessAvailabilityService #determinePinGenerationEligibility should not throw an error if eligibility is true"
"businessAvailabilityService #determinePinGenerationEligibility should throw an error if eligibility is false"
"businessAvailabilityService #determineRestartsEligibility should not throw an error if eligibility is true"
"businessAvailabilityService #determineRestartsEligibility should throw an error if eligibility is false"
"businessAvailabilityService #determineGroupsEligibility should not throw an error if eligibility is true"
"businessAvailabilityService #determineGroupsEligibility should throw an error if eligibility is false"
"businessAvailabilityService #determineAccessArrangementsEligibility should not throw an error if eligibility is true"
"businessAvailabilityService #determineAccessArrangementsEligibility should throw an error if eligibility is false"
"---------------------------"
"/admin/spec/back-end/service/school-impersonation.service.spec.js"
"schoolImpersonationService setSchoolImpersonation calls schoolImpersonationService.impersonateSchool if no validation occurred"
"schoolImpersonationService setSchoolImpersonation returns a validation error if schoolImpersonationValidator.isDfeNumberValid returned a validation error"
"schoolImpersonationService setSchoolImpersonation returns a validation error if schoolImpersonationValidator.isSchoolRecordValid returned a validation error"
"schoolImpersonationService setSchoolImpersonation detects and trims leading spaces in the dfeNumber"
"schoolImpersonationService setSchoolImpersonation detects and trims trailing spaces in the dfeNumber"
"schoolImpersonationService setSchoolImpersonation detects and removes non digits within the dfe number"
"schoolImpersonationService impersonateSchool populates the user session object without school related data"
"schoolImpersonationService removeImpersonation returns the user session object without school related data"
"---------------------------"
"/admin/spec/back-end/lib/validator/access-arrangements-validator.spec.js"
"Access arrangements validator validate returns validationError object with no errors if the validation is successful"
"Access arrangements validator validate requires a pupil UrlSlug"
"Access arrangements validator validate requires an access arrangement selection"
"Access arrangements validator validate requires input assistance information when relevant access arrangement is selected"
"Access arrangements validator validate requires next button information when relevant access arrangement is selected"
"Access arrangements validator validate requires question reader reason when relevant access arrangement is selected"
"Access arrangements validator validate requires additional information to be filled when other reader reason is selected"
"Access arrangements validator validate ignores pupilUrlSlug value when isEditView is true "
"Access arrangements validator validate ignores accessArrangementsCodes array when isEditView is true "
"---------------------------"
"/admin/spec/back-end/service/data-access/retry-async.spec.js"
"async-retry default behaviour should execute and return as expected when no error is thrown"
"async-retry default behaviour subsequent attempts should not be made by default"
"async-retry default behaviour total number of attempts should match retry strategy"
"async-retry default behaviour should complete if retry attempts do not exceed maximum number of retries in strategy"
"async-retry default behaviour should fail if retries made exceeds configured maximum number of retries"
"async-retry sql timeout retry predicate should not attempt retry if does not have a name property"
"async-retry sql timeout retry predicate should not attempt retry if name is not TimeoutError"
"async-retry sql timeout retry predicate should attempt retry if name is TimeoutError"
"async-retry sql azure resource limit reached predicate should not attempt retry if error does not have a number property"
"async-retry sql azure resource limit reached predicate should not attempt retry if error.number is not 10928"
"async-retry sql azure resource limit reached predicate should attempt retry if error.number is 10928"
"---------------------------"
"/admin/spec/back-end/service/results-page-availability.service.spec.js"
"results-page-availability.service isResultsFeatureAccessible disallows access to results feature when live check period is active"
"results-page-availability.service isResultsFeatureAccessible disallows access to results feature if attempted to be accessed before the opening Monday time on the allowed day"
"results-page-availability.service isResultsFeatureAccessible allows access to results feature if live check period is in the past"
"results-page-availability.service isResultsPageAccessibleForIncompleteHdfs providing hdf is not submitted disallows results before the second Monday after check end date"
"results-page-availability.service isResultsPageAccessibleForIncompleteHdfs providing hdf is not submitted allows results after the second Monday after check end date"
"---------------------------"
"/admin/spec/back-end/helpers/access-arrangements-descriptions-presenter.spec.js"
"accessArrangementsDescriptionsPresenter getPresentationData returns alphabetically sorted access arrangements descriptions data by description"
"accessArrangementsDescriptionsPresenter addReasonRequiredIndication returns access arrangements descriptions data with reason required indications"
"---------------------------"
"/admin/spec/back-end/service/restart.service.spec.js"
"restart.service restart throws an error if the schoolId is not provided"
"restart.service restart it should call restartTransactionForPupils if the pupil can be restarted"
"restart.service restart it should throw an error if the pupil cannot be restarted"
"restart.service markDeleted returns the pupil object of the pupil who is mark as deleted"
"restart.service markDeleted if no pupil is found it throws an error"
"restart.service markDeleted find the open restart for the pupil"
"restart.service markDeleted throws an error if the restart is not found"
"restart.service markDeleted does not remove any preparedChecks if the restart does not have any"
"restart.service markDeleted does removes preparedChecks if the restart has one"
"restart.service getReasons ensures data service method was called"
"---------------------------"
"/admin/spec/back-end/helpers/pupil-status-presenter.spec.js"
"pupilStatusPresenter getPresentationData collects pupils with errors"
"pupilStatusPresenter getPresentationData collects pupils that have not started"
"pupilStatusPresenter getPresentationData collects pupils that are not attending"
"pupilStatusPresenter getPresentationData collects pupils that are complete"
"pupilStatusPresenter getPresentationData displays pupils that have pin generated as not started"
"pupilStatusPresenter getPresentationData displays pupils that have logged in as not started"
"pupilStatusPresenter getPresentationData displays pupils that have unused restarts as not started"
"pupilStatusPresenter getPresentationData displays pupils with incomplete status as \"Pupil check not received\""
"pupilStatusPresenter getPresentationData collects total pupil count"
"pupilStatusPresenter getPresentationData collects formatted checkEndDate"
"pupilStatusPresenter getPresentationData collects remaining live check days"
"---------------------------"
"/admin/spec/back-end/controllers/service-message.spec.js"
"service message controller: getServiceMessage should render the service message overview page"
"service message controller: getServiceMessage should call administrationMessageService.getMessage"
"service message controller: getServiceMessageForm should render the create service message page"
"service message controller: postSubmitServiceMessage should call administrationMessageService.setMessage"
"service message controller: postSubmitServiceMessage should call controller.getServiceMessageForm if a validation error is present"
"service message controller: postSubmitServiceMessage should call serviceMessagePresenter.getFlashMessage to identify the appropriate flash message"
"service message controller: postSubmitServiceMessage should redirect to the overview page if a validation error is not present"
"service message controller: postSubmitServiceMessage should call req.flash"
"service message controller: postRemoveServiceMessage should call administrationMessageService.dropMessage"
"service message controller: postRemoveServiceMessage should call req.flash"
"---------------------------"
"/admin/spec/back-end/service/retro-input-assistant.service.spec.js"
"retro input assistant service should be defined"
"retro input assistant service save should throw an error when validation fails"
"retro input assistant service save should throw when pupilUuid is undefined"
"retro input assistant service save should throw when pupilUuid is not a valid UUID"
"retro input assistant service save should lookup pupil id and current check id from url slug"
"retro input assistant service save should persist valid input"
"retro input assistant service save should throw if pupil details cannot be found"
"retro input assistant service save should throw if lookedup pupil id is not a number greater than zero"
"retro input assistant service save should throw if lookedup current check id is not a number greater than zero"
"retro input assistant service save should mark existing live check as added retrospectively"
"retro input assistant service getEligiblePupilsWithFullNames should throw an error if school id not provided"
"---------------------------"
"/admin/spec/back-end/lib/validator/check-window-v2/active-check-window-validator.spec.js"
"Active check window validator returns no errors if no active check window is found"
"Active check window validator returns a validation error if a date is found in between the administration period"
"Active check window validator returns a validation error if a date is found in between the try-out period"
"Active check window validator returns a validation error if a date is found in between the live period"
"Active check window validator returns no validation error if the request admin start date matches the active check window admin end date"
"Active check window validator returns no validation error if active check window urlSlug matches the requestData urlSlug"
"---------------------------"
"/admin/spec/back-end/lib/validator/common/DateValidationData.spec.js"
"DateValidationData day returns the object with populated day"
"DateValidationData day returns the object with populated month"
"DateValidationData day returns the object with populated year"
"DateValidationData day returns the object with populated dayHTMLAttributeId"
"DateValidationData day returns the object with populated monthHTMLAttributeId"
"DateValidationData day returns the object with populated yearHTMLAttributeId"
"DateValidationData day returns the object with populated wrongDayMessage"
"DateValidationData day returns the object with populated wrongMonthMessage"
"DateValidationData day returns the object with populated wrongYearMessage"
"DateValidationData day returns the object with populated dayInvalidChars"
"DateValidationData day returns the object with populated monthInvalidChars"
"DateValidationData day returns the object with populated yearInvalidChars"
"DateValidationData day returns the object with populated dateInThePast"
"---------------------------"
"/admin/spec/back-end/service/setting.service.spec.js"
"setting.service get should call redis cache service to fetch the settings"
"setting.service get should not call settingDataService.sqlFindOne if settings are fetched from redis"
"setting.service get should call settingDataService.sqlFindOne if redis service returns false while attempting to fetch the settings"
"setting.service get should call redisCacheService.set if redis service returns false while attempting to fetch the settings"
"setting.service get should call settingDataService.sqlFindOne if undefined is returned from redis service"
"setting.service get should call redisCacheService.set if undefined is returned from redis service"
"setting.service get returns settings from settings data service"
"setting.service get returns config data (if present) if data service does not have any data"
"setting.service update records the setting change in the settingsLog table"
"setting.service update should call redisCacheService.set after a successful database transmission"
"---------------------------"
"/admin/spec/back-end/lib/validation-error.spec.js"
"validation error class returns the right object type on new"
"validation error class accepts constructor arguments"
"validation error class accepts new errors using addError"
"validation error class can tell if a field is valid or not using `isError()`"
"validation error class can retrieve an error message using `get()`"
"validation error class can be queried to see if there are errors or not"
"validation error class can return an array of fields that have errored"
"validation error class asking for a non-existent error behaves as expected"
"validation error class allows an error to be deleted"
"validation error class can return a set of unique fields and errors"
"validation error class allows us to sort the unique fields"
"validation error class does not drop fields when the sort array is a subset of the array to be sorted"
"---------------------------"
"/admin/spec/back-end/service/check-form.service.spec.js"
"check-form.service #allocateCheckForm  it should return a check-form"
"check-form.service #allocateCheckForm  should throw when available form param is not an array"
"check-form.service #allocateCheckForm  should throw when available form param is not an array"
"check-form.service #allocateCheckForm  should throw when the used forms param is not an array"
"check-form.service #allocateCheckForm  should throw when the used forms param is not an array"
"check-form.service #allocateCheckForm  should throw when the available forms param is an empty array"
"check-form.service #allocateCheckForm  randomly selects a form if there are two or more unseen forms to choose"
"check-form.service #allocateCheckForm  selects the last unseen form if there is only 1 unseen form to choose from"
"check-form.service #allocateCheckForm  randomly chooses a seen form if there are no unseen forms"
"check-form.service #allocateCheckForm  selects the only seen form available when there is only one form provided"
"check-form.service #allocateCheckForm  throws a meaningful error if the underlying library throws"
"check-form.service #prepareQuestionData() should prepare the question data"
"---------------------------"
"/admin/spec/back-end/controllers/school.spec.js"
"school controller: Check routes #getSchoolLandingPage should display the 'school landing page'"
"school controller: Check routes #getSchoolLandingPage should throw an error if getActiveCheckWindow method throws an error"
"school controller: Check routes #getSchoolLandingPage should redirect to school impersonation form if a helpdesk user with no impersonation lands attempts to access school home page"
"school controller: Check routes #getSchoolLandingPage should call administrationMessageService.getMessage to fetch a potential service message"
"---------------------------"
"/admin/spec/back-end/service/pupil-upload.service.spec.js"
"pupil-upload service upload returns an object after utilizing the promisified csv library"
"pupil-upload service attempts to save csv errors and returns an object with pupils when saved successfully"
"pupil-upload service attempts to save csv errors and returns an object with an error if save fails when saved successfully"
"---------------------------"
"/admin/spec/back-end/service/pupil.service.spec.js"
"pupil service #fetchOnePupil it makes a call to the pupilDataService"
"pupil service #fetchOnePupilBySlug it makes a call to the pupilDataService"
"pupil service #getPupilsWithFullNames it returns a sorted object with combined name values and urlSlug"
"pupil service #getPupilsWithFullNames it throws an error when schoolId is not provided"
"pupil service #findPupilsBySchoolId sorts the pupils before returning them"
"pupil service #findPupilsBySchoolId it throws an error when schoolId is not provided"
"pupil service #findOneBySlugAndSchool it throws an error when schoolId is not provided"
"---------------------------"
"/admin/spec/back-end/service/pupil-add-service.spec.js"
"pupil-add-service #addPupil throws if the school is not supplied"
"pupil-add-service #addPupil throws if the pupil params are not supplied"
"pupil-add-service #addPupil validates the pupil data"
"pupil-add-service #addPupil throws a validation error if the pupil data does not validate"
"pupil-add-service #addPupil saves the pupil data"
"pupil-add-service #addPupil calls sqlInsertPupilAgeReason before it saves the pupil data if ageReason is supplied"
"---------------------------"
"/admin/spec/back-end/service/check-window-v2-add.service.spec.js"
"check-window-v2-add.service submit when validation is successful should process data and perform db insertion"
"check-window-v2-add.service submit when checkWindowAddValidator validation is unsuccessful should throw a validation error"
"check-window-v2-add.service submit when checkWindowAddValidator validation is unsuccessful should not proceed with active check window validation"
"check-window-v2-add.service submit when activeCheckWindowValidator validation is unsuccessful should throw a validation error and prevent sqlCreate call"
"---------------------------"
"/admin/spec/back-end/service/pin.service.spec.js"
"pin.service getActiveSchool if pin is valid it should return school object"
"pin.service getActiveSchool if pin is invalid it should return null"
"pin.service generatePinTimestamp when timezone is not supplied should return the override value if override is enabled"
"pin.service generatePinTimestamp when timezone is not supplied should return the default value if override is disabled"
"pin.service generatePinTimestamp when timezone is supplied should return the override value based on the timezone if override is enabled"
"pin.service generatePinTimestamp when timezone is supplied should return the default value based on the timezone if override is disabled"
"---------------------------"
"/admin/spec/back-end/lib/validator/settings-validator.spec.js"
"Settings validator should allow a valid request"
"Settings validator should require questionTimeLimit as mandatory"
"Settings validator should require questionTimeLimit to be at least 1"
"Settings validator should require questionTimeLimit to be not greater than 60"
"Settings validator should require loadingTimeLimit as mandatory"
"Settings validator should require loadingTimeLimit to be at least 1"
"Settings validator should require loadingTimeLimit to be no more than 5"
"Settings validator should require checkTimeLimit as mandatory"
"Settings validator should require checkTimeLimit to be at least 10"
"Settings validator should require checkTimeLimit to be not greater than 90"
"---------------------------"
"/admin/spec/back-end/service/attendance.service.spec.js"
"attendanceService #updatePupilAttendanceBySlug just calls the data service"
"attendanceService #unsetAttendanceCode makes a call to get the pupil"
"attendanceService #unsetAttendanceCode throws if the pupil is not found"
"attendanceService #unsetAttendanceCode makes a call to delete the pupilAttendance record if the pupil is found"
"attendanceService #hasAttendance for live env returns valid if pupil has any attendance"
"attendanceService #hasAttendance for live env returns invalid if there is no attendance"
"attendanceService #hasAttendance for familiarisation env returns valid if pupil has left school attendance"
"attendanceService #hasAttendance for familiarisation env returns invalid if pupil has other attendance than left school"
"attendanceService #hasAttendance for familiarisation env returns invalid if there is no attendance"
"---------------------------"
"/admin/spec/back-end/lib/validator/school-impersonation-validator.spec.js"
"schoolImpersonationDfeNumberValidator.isDfeNumberValid should validate a 7 digit number"
"schoolImpersonationDfeNumberValidator.isDfeNumberValid should fail a 6 digit number"
"schoolImpersonationDfeNumberValidator.isDfeNumberValid should fail an 8 digit number"
"schoolImpersonationDfeNumberValidator.isDfeNumberValid should validate 7 char numeric string"
"schoolImpersonationDfeNumberValidator.isDfeNumberValid should not validate 6 char numeric string"
"schoolImpersonationDfeNumberValidator.isDfeNumberValid should not validate 8 char numeric string"
"schoolImpersonationDfeNumberValidator.isDfeNumberValid should not validate special characters"
"schoolImpersonationDfeNumberValidator.isDfeNumberValid should not validate undefined"
"schoolImpersonationDfeNumberValidator.isDfeNumberValid should not validate null"
"schoolImpersonationDfeNumberValidator.isDfeNumberValid should not validate empty string"
"schoolImpersonationDfeNumberValidator.isSchoolRecordValid should not add a validation error if school object is valid"
"schoolImpersonationDfeNumberValidator.isSchoolRecordValid should add a validation error if school object is undefined"
"schoolImpersonationDfeNumberValidator.isSchoolRecordValid should add a validation error if school object is not valid"
"schoolImpersonationDfeNumberValidator.isSchoolRecordValid should add a validation error if school object is not valid"
"---------------------------"
"/admin/spec/back-end/service/data-access/pupil.data.service.spec.js"
"pupil.data.service #sqlFindPupilsBySchoolId it makes the expected calls"
"pupil.data.service #sqlFindOneBySlug it makes the expected calls"
"pupil.data.service #sqlFindOneByUpn it makes the expected calls"
"pupil.data.service #sqlFindOneById it makes the expected calls"
"pupil.data.service #sqlFindOneByIdAndSchool it makes the expected calls"
"pupil.data.service #sqlUpdate it makes the expected calls"
"pupil.data.service #sqlCreate it makes the expected calls"
"pupil.data.service #sqlFindOneByPinAndSchool it makes the expected calls"
"---------------------------"
"/admin/spec/back-end/service/pupils-not-taking-check.service.spec.js"
"Pupils are not taking the check. Service #sortPupilsByReason should return a list ordered by reason not equal to the original (as per mock order)"
"Pupils are not taking the check. Service #sortPupilsByReason returns list ordered by reason asc"
"Pupils are not taking the check. Service #sortPupilsByReason returns list ordered by reason desc"
"Pupils are not taking the check. Service #getPupilsWithReasons should return a list of pupils"
"Pupils are not taking the check. Service #getPupilsWithoutReasons should return a list of pupils"
"Pupils are not taking the check. Service #getPupilSlugs should return a slugUrl when reqBody is a string"
"Pupils are not taking the check. Service #getPupilSlugs should return a slugUrl when reqBody is an object"
"Pupils are not taking the check. Service #getPupilSlugs should return a slugUrl when reqBody is an array"
"---------------------------"
"/admin/spec/back-end/controllers/helpdesk-impersonation.spec.js"
"helpdesk impersonation controller getSchoolImpersonation should render the school impersonation form"
"helpdesk impersonation controller postAddSchoolImpersonation should call schoolImpersonationService.setSchoolImpersonation method to validate dfeNumber given and create an impersonation"
"helpdesk impersonation controller postAddSchoolImpersonation should render the helpdesk home if no validation error occurred"
"helpdesk impersonation controller postAddSchoolImpersonation should re-render the helpdesk impersonation form if a validation error occurred"
"helpdesk impersonation controller postRemoveSchoolImpersonation should call schoolImpersonationService.removeImpersonation"
"helpdesk impersonation controller postRemoveSchoolImpersonation should add a flash message and redirect to school impersonation form"
"---------------------------"
"/admin/spec/back-end/helpers/pupil-pin-presenter.spec.js"
"pupilPinPresenter getPupilPinViewData adds pupilViewForeName and pupilViewLastName based on alias fields when they are present"
"pupilPinPresenter getPupilPinViewData adds pupilViewForeName and pupilViewLastName based on actual foreName and LastName fields when aliases are not present"
"pupilPinPresenter getPupilPinViewData returns additional fields that are part of the original object"
"pupilPinPresenter getPupilPinViewData returns sorted data in an ascending order alphabetically by group then by last name"
"pupilPinPresenter getPupilPinViewData returns sorted data alphabetically by last name if none of the pupils have groups assigned"
"---------------------------"
"/admin/spec/back-end/service/prepare-check.service.spec.js"
"prepare-check.service should be defined"
"prepare-check.service rejects an argument that is not an array"
"prepare-check.service should add each check with the expected cache key and a lookup item"
"prepare-check.service should cache each item with the expected structure"
"prepare-check.service should cache each item with the expected ttl"
"---------------------------"
"/admin/spec/back-end/lib/validator/hdf-validation.spec.js"
"HDF validator validate returns validationError object with no errors if the validation is successful"
"HDF validator validate requires firstName to be non-empty"
"HDF validator validate requires firstName to be up to 128 chars long"
"HDF validator validate allows latin chars, hyphen and apostrophe in firstName"
"HDF validator validate requires lastName to be non-empty"
"HDF validator validate requires lastName to be up to 128 chars long"
"HDF validator validate allows latin chars, hyphen and apostrophe in lastName"
"HDF validator validate when not a headteacher requires jobTitle to be non-empty"
"HDF validator validate when not a headteacher requires jobTitle to be up to 128 chars long"
"HDF validator validate when a headteacher ignores jobTitle"
"---------------------------"
"/admin/spec/back-end/service/payload.service.spec.js"
"payload.service #getPayload throws an error when called without a checkCode"
"payload.service #getPayload throws an error when checkCode is not valid UUID"
"payload.service #getPayload adds relativeTimings"
"payload.service #addRelativeTimingsToSection passes through objects without a `clientTimestamp` prop"
"payload.service #addRelativeTimingsToSection sets relativeTiming to \"+0.00\" for the first element"
"payload.service #addRelativeTimingsToSection returns a new array"
"payload.service #addRelativeTimingsToSection adds relativeTimings for elements after the first one"
"payload.service #addRelativeTimingsToSection timings are not reset by an obj without a timestamp prop"
"payload.service #addRelativeTimingsToSection can handle non-object input"
"payload.service #addRelativeTimingsToSection can handle times that go backward"
"payload.service #addRelativeTimings adds timings to the inputs and audit sections"
"---------------------------"
"/admin/spec/back-end/controllers/retro-input-assistant.spec.js"
"retro input assistant controller: getAddRetroInputAssistant route displays the retro input assistant page"
"retro input assistant controller: getAddRetroInputAssistant route throws an error if access is attempted when the hdf has been signed"
"retro input assistant controller: getAddRetroInputAssistant route calls next when an error occurs during service call"
"retro input assistant controller: postSubmitRetroInputAssistant route passes the request body to service for processing and redirects"
"---------------------------"
"/admin/spec/back-end/lib/validator/csv-validator.spec.js"
"CSV validator received valid data and allows a valid request"
"CSV validator received invalid data and detected invalid header"
"CSV validator received invalid data and detected invalid header and invalid column number on a row"
"CSV validator received invalid data and detected only one data row"
"CSV validator received invalid data and detected a dataset which exceeds allowed max rows"
"---------------------------"
"/admin/spec/back-end/service/pupil-register-v2.service.spec.js"
"pupil-register-v2.service #getPupilRegister throws an error if no school password is provided"
"pupil-register-v2.service #getPupilRegister calls redisCacheService get if school is provided"
"pupil-register-v2.service #getPupilRegister does not call getPupilRegisterViewData if there are results from redis"
"pupil-register-v2.service #getPupilRegister calls the getPupilRegisterViewData if there is no result from redis"
"pupil-register-v2.service #getPupilRegisterViewData calls the pupil register data service to get the raw data"
"pupil-register-v2.service #getPupilRegisterViewData calls the tableSorting applySorting method to sort the raw data"
"pupil-register-v2.service #getPupilRegisterViewData calls the pupil register identification flag service to get the view data"
"pupil-register-v2.service #getPupilRegisterViewData calls the redis cache service to cache the view data for the particular school"
"---------------------------"
"/admin/spec/back-end/helpers/access-arrangements-overview-presenter.spec.js"
"accessArrangementsOverviewPresenter getPresentationData adds verticalBarStyle property if the pupil requires highlighting"
"accessArrangementsOverviewPresenter getPresentationData returns hasAAEditDisabled as true if user is not allowed to edit access arrangements for the particular pupil"
"accessArrangementsOverviewPresenter getPresentationData returns hasAAEditDisabled as true if the pupil has a completed check"
"accessArrangementsOverviewPresenter getPresentationData returns hasAAEditDisabled as true if the pupil cannot take the check"
"accessArrangementsOverviewPresenter getPresentationData returns hasAAEditDisabled as false if the user can edit access arrangements for a particular pupil, current check is incomplete and the pupil is taking the check"
"---------------------------"
"/admin/spec/back-end/service/pin-generation-v2.service.spec.js"
"pin-generation-v2.service #getPupilsEligibleForPinGeneration makes a call to the data service to fetch the pupils"
"pin-generation-v2.service #getPupilsEligibleForPinGeneration makes a call to the pupil identification service to get display information for the GUI"
"pin-generation-v2.service #getPupilsEligibleForPinGeneration sorts the pupils"
"pin-generation-v2.service #getPupilsWithActivePins makes a call to the data service to get pupils with active pins"
"pin-generation-v2.service #getPupilsWithActivePins makes a call to the pupil identification service to get display information for the GUI"
"---------------------------"
"/admin/spec/back-end/controllers/tech-support.spec.js"
"tech-support controller should be defined"
"tech-support controller /home GET: should render the home page"
"tech-support controller /checkview GET: should render the checkcode input box"
"tech-support controller /checkview POST: should render the check summary"
"tech-support controller /checkview POST: should call getCheckViewPage when validation fails"
"tech-support controller /received-check-payload GET: should send payload as JSON response"
"---------------------------"
"/admin/spec/back-end/authentication/local-strategy.spec.js"
"localStrategy validateAndSave validates and saves a valid helpdesk user"
"localStrategy validateAndSave validates and saves a valid teacher user"
"localStrategy validateAndSave registers an invalid logon event if user is not found"
"---------------------------"
"/admin/spec/back-end/lib/array-utils.spec.js"
"arrayUtils isEmptyArray identifies an array of empty strings as being empty"
"arrayUtils isEmptyArray arrays with a non-empty string are not empty #1"
"arrayUtils isEmptyArray arrays with a non-empty string are not empty #2"
"arrayUtils isEmptyArray arrays with a non-empty string are not empty #3"
"arrayUtils omitEmptyArrays removes empty arrays from a list of arrays"
"arrayUtils countNonEmptyRows counts arrays that are not empty according to isEmptyArray()"
"arrayUtils countNonEmptyRows throws an error if passed a string as argument"
"arrayUtils countNonEmptyRows throws an error if passed null as an argument"
"arrayUtils countNonEmptyRows throws an error if passed undefined as an argument"
"arrayUtils countNonEmptyRows throws an error if passed a number as an argument"
"arrayUtils countNonEmptyRows throws an error if passed an object as an argument"
"---------------------------"
"/admin/spec/back-end/service/score.service.spec.js"
"score.service getScorePercentage returns the score in percentage value if the latest check has results"
"score.service getScorePercentage returns not available if the latest check has no results"
"score.service calculateScore returns undefined if results undefined"
"score.service calculateScore returns error message if results do not contain marks"
"score.service calculateScore returns error message if results do not contain maxMarks"
"score.service calculateScore returns error message if score out of range"
"score.service calculateScore returns 100% when all answers are correct"
"score.service calculateScore returns 50% when half the answers are correct"
"score.service calculateScore returns 0% when no answers are correct"
"score.service calculateScore rounds to the nearest 1 decimal point when necessary"
"---------------------------"
"/admin/spec/back-end/service/single-pupil-validation.service.spec.js"
"single-pupil-validation.service generate with valid arguments returns a pupil with no errors"
"single-pupil-validation.service generate with valid arguments detects duplicate upns in the upload file"
"single-pupil-validation.service generate with invalid arguments returns a pupil with errors"
"---------------------------"
"/admin/spec/back-end/lib/validator/check-form/check-forms-validator.spec.js"
"checkFormValidator validate calls single check form, multiple check form validation and validates check form type and returns a validation error object with no errors"
"checkFormValidator validate calls single check form, multiple check form validation and validates check form type and returns a validation error object with errors occurring from singleCheckFormValidator and multipleCheckFormsValidator validators"
"checkFormValidator validate calls single check form, multiple check form validation and validates check form type and returns a validation error object with errors occurring from singleCheckFormValidator and multipleCheckFormsValidator validators"
"---------------------------"
"/admin/spec/back-end/service/school-summary.service.spec.js"
"schoolSummaryService should be defined"
"schoolSummaryService should transform register data correctly"
"schoolSummaryService should transform live check data correctly"
"schoolSummaryService should transform tio check data correctly"
"---------------------------"
"/admin/spec/back-end/controllers/pupil-status.spec.js"
"pupil status controller getViewPupilStatus if all calls are successful should render the school pupil status"
"pupil status controller getViewPupilStatus if all calls are successful should call checkWindowV2Service getActiveCheckWindow method"
"pupil status controller getViewPupilStatus if all calls are successful should call pupilStatusService getPupilStatusData method"
"pupil status controller getViewPupilStatus if all calls are successful should call pupilStatusPresenter getPresentationData method"
"pupil status controller getViewPupilStatus if calls are unsuccessful should call next if pupilStatusService getPupilStatusData throws an error"
"---------------------------"
"/admin/spec/back-end/lib/validator/common/empty-fields-validator.spec.js"
"emptyFieldValidator validate returns a validationError object with errors if the value is an empty string"
"emptyFieldValidator validate returns a validationError object with errors if the value is a spaced string"
"emptyFieldValidator validate returns a validationError object with errors if the value is undefined"
"emptyFieldValidator validate returns a validationError object with errors if the value is null"
"emptyFieldValidator validate returns a validationError object with no errors if the value contains special characters"
"emptyFieldValidator validate returns a validationError object with no errors if the value contains no special characters"
"---------------------------"
"/admin/spec/back-end/lib/validator/file-validator.spec.js"
"File validator received valid data and allows a valid request"
"File validator received empty data and detects no file"
"File validator received empty data and detects empty file on unreadable file"
"File validator received empty data and detects not acceptable file"
"---------------------------"
"/admin/spec/back-end/lib/validator/check-window-v2/check-window-name-validator.spec.js"
"Check window name validator validate should not call addError method if the validation is successful"
"Check window name validator validate should call addError method with checkWindowName and checkWindowNameLength errors if the check window name is missing"
"Check window name validator validate should call addError method with checkWindowName and checkWindowNameLength errors if the check window name is only 1 character"
"Check window name validator validate should call addError method checkWindowNameLength errors if the check window name exceeds allowed length"
"---------------------------"
"/admin/spec/back-end/helpers/attendance-codes-presenter.spec.js"
"attendanceCodesPresenter getPresentationData returns alphabetically sorted attendance codes data by reason"
"---------------------------"
"/admin/spec/back-end/lib/validator/restart-validator.spec.js"
"restart-validator validateReason returns true if reason value is did not complete and further information textarea has at least one character"
"restart-validator validateReason returns true if reason value is classroom disruption and further information textarea has at least one character"
"restart-validator validateReason returns false if reason value is did not complete and further information textarea is empty"
"restart-validator validateReason returns false if reason value is classroom disruption and further information textarea is empty"
"restart-validator validateReason returns true if any reason is provided apart from did not complete and classroom disruption"
"---------------------------"
"/admin/spec/back-end/lib/validator/hdf-confirm-validator.spec.js"
"HDF confirm validator validate returns validationError object with no errors if the validation is successful"
"HDF confirm validator validate requires pupilDetails to be checked"
"HDF confirm validator validate requires uniquePins to be checked"
"HDF confirm validator validate requires staffConfirm to be checked"
"HDF confirm validator validate when not confirmed returns validationError object with no errors if the validation is successful"
"---------------------------"
"/admin/spec/back-end/service/pupil-age-reason.service.spec.js"
"pupilAgeReasonService refreshPupilAgeReason calls sqlInsertPupilAgeReason if new age reason is supplied and previous does not exist"
"pupilAgeReasonService refreshPupilAgeReason calls sqlUpdatePupilAgeReason if new age reason is supplied and previous does exist"
"pupilAgeReasonService refreshPupilAgeReason calls sqlUpdatePupilAgeReason if new age reason is not supplied and previous reason exist"
"---------------------------"
"/admin/spec/back-end/service/data-access/check.data.service.spec.js"
"check.data.service #sqlFindOneByCheckCode makes the expected calls"
"check.data.service #sqlFindLatestCheck should makes the expected call"
"check.data.service #sqlFindFullyPopulated makes the expected calls"
"check.data.service #sqlFindNumberOfChecksStartedByPupil makes the expected calls"
"---------------------------"
"/admin/spec/back-end/lib/validator/group-validator.spec.js"
"groupValidation happy path should return false if all is OK"
"groupValidation unhappy paths should return an error if group name is missing"
"groupValidation unhappy paths should return an error if group name is longer than 35 characters"
"groupValidation unhappy paths should return an error if group name contains special character"
"groupValidation unhappy paths should return an error if pupils are missing"
"---------------------------"
"/admin/spec/back-end/service/data-access/pupil-restart.data.service.spec.js"
"pupil-restart.data.service #sqlGetNumberOfRestartsByPupil it makes the expected calls"
"pupil-restart.data.service #sqlFindLatestRestart it makes the expected calls"
"pupil-restart.data.service #sqlFindRestartCodes it makes the expected calls"
"pupil-restart.data.service #sqlMarkRestartAsDeleted it makes the expected calls"
"---------------------------"
"/admin/spec/back-end/service/data-access/school.data.service.spec.js"
"school.data.service #sqlFindOneBySchoolPin it makes the expected calls"
"school.data.service #sqlFindOneByDfeNumber it makes the expected calls"
"school.data.service #sqlUpdate it makes the expected calls"
"---------------------------"
"/admin/spec/back-end/service/pupil-edit.service.spec.js"
"pupilEditService should call refreshPupilAgeReason"
"pupilEditService should call createUTCFromDayMonthYear"
"pupilEditService should call sqlUpdate from the data service"
"pupilEditService should drop pupil register cache"
"---------------------------"
"/admin/spec/back-end/service/pupil-identification-flag.service.spec.js"
"addIdentificationFlags returns showDoB property as true for pupils with same fullname"
"addIdentificationFlags returns showDoB property as false for pupils with different fullname"
"addIdentificationFlags returns showMiddleNames property as true for pupils with same fullname and DoB"
"addIdentificationFlags returns showMiddleNames property as false for pupils with different fullname and Dob"
"---------------------------"
"/admin/spec/back-end/controllers/cookies.spec.js"
"cookies page controller Cookies MTC Form should render the initial cookies form page"
"cookies page controller Cookies MTC should render the mtc cookies report page"
"---------------------------"
"/admin/spec/back-end/service/pin-generation.service.spec.js"
"pin-generation.service generateSchoolPassword if schoolPin is not valid should generate school password"
"pin-generation.service generateSchoolPassword if the pin expiration date is before same day 4pm should not generate school password"
"pin-generation.service generateSchoolPassword if the pin expiration date is after same day 4pm it should generate school password "
"pin-generation.service generateCryptoRandomNumber should generate a random number in specific range"
"---------------------------"
"/admin/spec/back-end/service/redis-key.service.spec.js"
"redis-key.service getPupilRegisterViewDataKey returns the pupil register view key based on school id"
"redis-key.service getPupilRegisterViewDataKey throws an error if school id is not provided"
"redis-key.service getSasTokenKey is defined"
"redis-key.service getSasTokenKey returns the redis key value for the queue"
"redis-key.service getSchoolResultsKey is defined"
"redis-key.service getSchoolResultsKey returns the redis key for the school"
"---------------------------"
"/admin/spec/back-end/models/logger.spec.js"
"logger class can initialise"
"logger class has a #log function"
"logger class has a #alert function"
"logger class has a #error function"
"logger class has a #warn function"
"logger class has a #info function"
"logger class has a #debug function"
"---------------------------"
"/admin/spec/back-end/service/check-window-sanity-check.service.spec.js"
"check-window-sanity-check.service returns an error if there is no active checkwindow"
"check-window-sanity-check.service returns an error if there are no check forms assigned"
"check-window-sanity-check.service returns undefined if there is an active check window and check forms assigned"
"---------------------------"
"/admin/spec/back-end/lib/validator/common/uuid-validator.spec.js"
"UUID validator should be defined"
"UUID validator should fail when value is empty string"
"UUID validator should fail when value is not a uuid"
"UUID validator should fail when value is a uuid of incorrect length"
"UUID validator should pass when value is a valid uuid"
"---------------------------"
"/admin/spec/back-end/service/school.service.spec.js"
"school.service findSchoolByDfeNumber should throw an error if school not found"
"school.service findSchoolByDfeNumber should return school name if found"
"school.service findOneById should  throw an error if id not provided"
"school.service findOneById returns school if found"
"---------------------------"
"/admin/spec/back-end/service/pupil-access-arrangements-edit.service.spec.js"
"pupilAccessArrangementsEditService getEditData calls pupilAccessArrangementsService getPupilEditFormData when request data are not present and returns edit form data"
"pupilAccessArrangementsEditService getEditData calls pupilService fetchOnePupilBySlug when request data are present and returns additional missing properties"
"---------------------------"
"/admin/spec/back-end/service/queue-name.service.spec.js"
"queue-name.service has read-only queue names"
"queue-name.service returns the prefixed queue name"
"queue-name.service does not knacker the config for other tests"
"queue-name.service throws an error if an unknown queue name is provided"
"---------------------------"
"/admin/spec/back-end/service/data-access/headteacher-declaration.data.service.spec.js"
"headteacher-declaration.data.service #sqlCreate calls sqlService"
"headteacher-declaration.data.service #sqlFindLatestHdfBySchoolId calls the sqlService"
"headteacher-declaration.data.service #findHdfForCheck calls sqlService.query to find the hdf"
"headteacher-declaration.data.service #findHdfForCheck returns the hdf as an object"
"---------------------------"
"/admin/spec/back-end/lib/validator/pin-validator.spec.js"
"pin-validator isActivePin returns true if the pin is active if pinExpiredAt date field is later than current time"
"pin-validator isActivePin returns false if the pin is inactive if pinExpiredAt date field is earlier than current time"
"---------------------------"
"/admin/spec/back-end/helpers/pupil-presenter.spec.js"
"pupilPresenter getPupilExampleYear fetches the example pupil year"
"pupilPresenter getPupilsSortedWithIdentificationFlags sorts the pupils and adds identification flags"
"---------------------------"
"/admin/spec/back-end/service/table-name.service.spec.js"
"table-name.service has read-only table names"
"table-name.service returns the prefixed queue name"
"table-name.service does not knacker the config for other tests"
"table-name.service throws an error if an unknown queue name is provided"
"---------------------------"
"/admin/spec/back-end/service/check-diagnostic.service.spec.js"
"check diagnostics service should be defined"
"check diagnostics service should return check record when exists"
"check diagnostics service should return undefined when check not found"
"check diagnostics service should throw error when checkCode not provided"
"check diagnostics service should trim spaces from checkCode before passing to data service"
"---------------------------"
"/admin/spec/back-end/lib/error-converter.spec.js"
"ErrorConverter class : fromExpressValidator() has a function to convert from express validator"
"ErrorConverter class : fromExpressValidator() returns a ValidationError"
"ErrorConverter class : fromExpressValidator() contains all the expected errors"
"---------------------------"
"/admin/spec/back-end/service/helpdesk.service.spec.js"
"helpdeskService isHelpdeskRole should return false if user is not a helpdesk"
"helpdeskService isHelpdeskRole should return true if user is a helpdesk"
"helpdeskService isImpersonating should return false if user is missing impersonation attributes"
"helpdeskService isImpersonating should return true if the user has impersonation attributes"
"---------------------------"
"/admin/spec/back-end/lib/random-generator.spec.js"
"random-generator returns a random string"
"random-generator throws an error if chars are not given"
"random-generator throws an error if chars are too long"
"---------------------------"
"/admin/spec/back-end/service/set-validation.service.spec.js"
"setValidationService finds differences when there are some"
"setValidationService does not find differences when there arent any"
"setValidationService it finds differences when comparing strings with numbers"
"---------------------------"
"/admin/spec/back-end/controllers/test-developer.spec.js"
"test-developer controller: Test develope routes #getTestDeveloperHomePage - Happy path should render the 'test-developer's the landing page"
"---------------------------"
"/admin/spec/back-end/service/generate-error-csv.service.spec.js"
"generate-error-csv.service generate returns a file object with a name attribute if the request was valid"
"---------------------------"
"/admin/spec/back-end/service/restart-v2.service.spec.js"
"restart-v2.service #getPupilsEligibleForRestart calls the restart data service to find the pupils"
"restart-v2.service #getPupilsEligibleForRestart makes a call to the pupil identification service to get display information for the GUI"
"---------------------------"
"/admin/spec/back-end/controllers/helpdesk-summary.spec.js"
"helpdesk summary controller should render the school summary"
"---------------------------"
"/admin/spec/back-end/service/role.service.spec.js"
"role.service findByName throws an error when name not provided"
"role.service findByName returns entry provided by data service"
"---------------------------"
"/admin/spec/back-end/helpers/result-presenter.spec.js"
"resultPresenter presentPupilData is defined"
"resultPresenter presentPupilData returns a dash for a null score"
"resultPresenter presentPupilData returns a dash for an undefined score"
"resultPresenter presentPupilData handles a zero score"
"resultPresenter presentPupilData handles a positive score"
"---------------------------"
"/admin/spec/back-end/controllers/accessibility-statement.spec.js"
"accessibility-statement page controller should render the initial accessibility-statement page"
"---------------------------"
"/admin/spec/back-end/lib/deep-freeze.spec.js"
"deep-freeze performs a standard freeze if no child objects are present"
"deep-freeze freezes child objects"
"deep-freeze freezes recursively"
"---------------------------"
"/admin/spec/back-end/controllers/contact.spec.js"
"contact page simple controller should render the initial groups page"
"---------------------------"
"/admin/spec/back-end/controllers/privacy.spec.js"
"privacy page controller should render the initial groups page"
"---------------------------"
"/admin/spec/back-end/service/data-access/setting.data.service.spec.js"
"pupil.data.service #sqlUpdate calls the model"
"---------------------------"
"/admin/spec/back-end/service/data-access/user.data.service.spec.js"
"user.data.service #sqlFindOneByIdentifier makes the expected calls"
"---------------------------"
"/admin/spec/back-end/service/data-access/admin-logon-event.data.service.spec.js"
"admin-logon-event.data.service #sqlCreate makes the expected calls"
"---------------------------"
"/admin/spec/back-end/service/qr.service.spec.js"
"qr.service getDataURL returns a data url when config url parameter is defined"
"qr.service getDataURL returns null when url parameter is not defined"
"---------------------------"
"/admin/services/check-start.service/school-pin.service.spec.js"
"school-pin-service subject should be defined"
"school-pin-service it should throw an error if urlSlug parameter is not defined"
"---------------------------"
"/admin/spec/back-end/helpers/incomplete-checks-presenter.spec.js"
"incompleteChecksPresenter getPupilWithIncompleteChecks fetches pupils which status is incomplete"
"---------------------------"
"/admin/spec/back-end/service/pupil-census-processing.service.spec.js"
"pupilCensusProcessingService process bulk imports pupil census data"
"---------------------------"
"/admin/spec/back-end/helpers/service-message-presenter.spec.js"
"serviceMessagePresenter getFlashMessage returns the created flash message on the request data"
"---------------------------"
"/admin/spec/back-end/service/data-access/role.data.service.spec.js"
"role.data.service #sqlFindOneById makes the expected calls"
"---------------------------"
"/admin/spec/back-end/service/question-reader-reasons.service.spec.js"
"question-reader-reason.service getQuestionReaderReasons should call sqlFindQuestionReaderReasons"
"---------------------------"
"/admin/spec/back-end/service/data-access/attendance-code.data.service.spec.js"
"attendanceCodeDataService:  #sqlFindAttendanceCodes calls sqlService.readonlyQuery"
"---------------------------"
"/admin/spec/back-end/service/uploaded-file.service.spec.js"
"uploadedFileService getFilesize fetches the file size in KB"
