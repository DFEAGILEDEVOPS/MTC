resources:
- repo: self
  clean: true
phases:
- phase: Phase_1
  displayName: Admin Image

  condition: succeeded()
  queue:
    name: MTC LIVE
    demands: sh

  steps:
  - task: ShellScript@2
    displayName: 'create build and commit details file'
    inputs:
      scriptPath: 'admin/vso-add-build-and-commit.sh'

      failOnStandardError: true

  - task: Docker@1
    displayName: 'Create Image'
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'

      azureContainerRegistry: '$(CONTAINER_REGISTRY_URL)'

      dockerFile: admin/Dockerfile

      imageName: '$(DOCKER_IMAGE_ADMIN):$(Build.BuildNumber)'

      includeSourceTags: true

      includeLatestTag: true

  - task: Docker@1
    displayName: 'Publish Admin Image'
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'

      azureContainerRegistry: '$(CONTAINER_REGISTRY_URL)'

      action: 'Push an image'

      imageName: '$(DOCKER_IMAGE_ADMIN):$(Build.BuildNumber)'

      includeSourceTags: true

      includeLatestTag: true

    timeoutInMinutes: 30

- phase: Phase_2
  displayName: Pupil Image

  condition: succeeded()
  queue:
    name: MTC LIVE
    demands: sh

  steps:
  - task: ShellScript@2
    displayName: 'Inject build number and commit details to meta tag'
    inputs:
      scriptPath: 'pupil-spa/vso-add-build-and-commit-details.sh'


  - task: Docker@0
    displayName: 'Create Image'
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'

      azureContainerRegistry: '$(CONTAINER_REGISTRY_URL)'

      dockerFile: 'pupil-spa/Dockerfile'

      imageName: '$(DOCKER_IMAGE_PUPIL):$(Build.BuildNumber)'

      includeSourceTags: true

      includeLatestTag: true


  - task: Docker@0
    displayName: 'Publish Pupil SPA Image'
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'

      azureContainerRegistry: '$(CONTAINER_REGISTRY_URL)'

      action: 'Push an image'

      imageName: '$(DOCKER_IMAGE_PUPIL):$(Build.BuildNumber)'

      includeSourceTags: true

      includeLatestTag: true

    timeoutInMinutes: 30


- phase: Phase_6
  displayName: Pupil API Image

  condition: succeeded()
  queue:
    name: MTC LIVE
    demands: sh

  steps:
  - task: ShellScript@2
    displayName: 'create build and commit details file'
    inputs:
      scriptPath: 'pupil-api/vso-add-build-and-commit.sh'

      failOnStandardError: true


  - task: Docker@0
    displayName: 'Create Image'
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'

      azureContainerRegistry: '$(CONTAINER_REGISTRY_URL)'

      dockerFile: 'pupil-api/Dockerfile'

      imageName: '$(DOCKER_IMAGE_API):$(Build.BuildNumber)'

      includeSourceTags: true

      includeLatestTag: true


  - task: Docker@0
    displayName: 'Publish Pupil API Image'
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'

      azureContainerRegistry: '$(CONTAINER_REGISTRY_URL)'

      action: 'Push an image'

      imageName: '$(DOCKER_IMAGE_API):$(Build.BuildNumber)'

      includeSourceTags: true

      includeLatestTag: true

    timeoutInMinutes: 30


- phase: Phase_3
  displayName: Assets Image

  condition: succeeded()
  queue:
    name: MTC LIVE
    demands: sh

  steps:
  - task: ShellScript@2
    displayName: 'Prepare Assets'
    inputs:
      scriptPath: 'admin-assets/copy-assets.sh'


  - task: Docker@0
    displayName: 'Create Image'
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'

      azureContainerRegistry: '$(CONTAINER_REGISTRY_URL)'

      dockerFile: 'admin-assets/Dockerfile'

      imageName: '$(DOCKER_IMAGE_ASSETS):$(Build.BuildNumber)'

      includeSourceTags: true

      includeLatestTag: true


  - task: Docker@0
    displayName: 'Publish Assets Image'
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'

      azureContainerRegistry: '$(CONTAINER_REGISTRY_URL)'

      action: 'Push an image'

      imageName: '$(DOCKER_IMAGE_ASSETS):$(Build.BuildNumber)'

      includeSourceTags: true

      includeLatestTag: true

    timeoutInMinutes: 30


- phase: Phase_5
  displayName: Deploy Functions

  condition: succeeded()
  queue:
    name: MTC LIVE
    demands: npm

  steps:
  - task: Npm@1
    displayName: 'npm install'
    inputs:
      workingDir: functions

      verbose: false


  - bash: 'func extensions install'
    workingDirectory: functions

    displayName: 'Install bindings extensions'

  - task: CopyFiles@2
    displayName: 'Copy Files to staging folder'
    inputs:
      SourceFolder: functions

      TargetFolder: '$(Build.ArtifactStagingDirectory)/functions'


  - task: ArchiveFiles@2
    displayName: 'Create Zip'
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/functions'

      includeRootFolder: false

      archiveFile: '$(Build.ArtifactStagingDirectory)/Functions.zip'


  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/Functions.zip'


  - task: AzureCLI@1
    displayName: 'Deploy as Package'
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'

      scriptLocation: inlineScript

      inlineScript: 'az functionapp deployment source config-zip  -g $(FUNCTION_RESOURCE_GROUP) -n $(FUNCTION_APP_NAME) --src $(Build.ArtifactStagingDirectory)/Functions.zip'


- phase: Phase_4
  displayName: Database Update

  dependsOn:
   - Phase_1
   - Phase_2
   - Phase_6
   - Phase_3
   - Phase_5
  condition: succeeded()
  queue:
    name: MTC LIVE
    demands: sh

  steps:
  - task: ShellScript@2
    displayName: 'Apply migrations'
    inputs:
      scriptPath: 'deploy/sql-migrations/migrate-db.sh'

      args: '$(SQL_ADMIN_USER) $(SQL_ADMIN_USER_PASSWORD) $(SQL_APP_USER_PASSWORD)'


  - task: AzureCLI@1
    displayName: 'Create storage queues and tables and set CORS'
    inputs:
      azureSubscription: '$(AZURE_SUBSCRIPTION)'

      scriptPath: 'deploy/storage/create-items.sh'

      arguments: 'devsamtc $(STORAGE_ACCOUNT_KEY) $(PUPIL_APP_URL)'



- phase: Phase_7
  displayName: Annotate Release in Application Insights

  dependsOn: Phase_4
  condition: succeeded()
  queue:
    name: Hosted VS2017
  steps:
  - task: ms-appinsights.appinsightsreleaseannotations.release-task.ms-appinsights.ReleaseAnnotation@1
    displayName: 'Annotate Release'
    inputs:
      applicationId: '$(APP_INSIGHTS_INSTRUMENTATION_KEY)'

      apiKey: '$(APP_INSIGHTS_API_KEY)'



