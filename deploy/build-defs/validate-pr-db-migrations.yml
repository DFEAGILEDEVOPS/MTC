# AzureDevops build defintion for PR database migration validation checks
resources:
  - repo: self

name: PR-$(date:yyyyMMdd)$(rev:.r)

# to be defined
variables:
  var1: value1

# do not trigger on master commits
trigger: none

# trigger this build for PRs targeting master
pr:
  branches:
    include: [ master ]

pool:
  name: MTC LIVE

jobs:
- job: FastFail
  steps:
  - bash: 'deploy/pr-label-check.sh'
    env:
      PULL_REQUEST_ID: $(System.PullRequest.PullRequestNumber)
    failOnStderr: true
- job: ValidateMigrations
  dependsOn: FastFail
# TODO: define secret variables and inputs for TARGET_DB_RESOURCE_GROUP, TARGET_DB_SERVER, TARGET_AZURE_SUBSCRIPTION
# Your build pipeline references a secret variable named ‘SQL_ADMIN_USER_PASSWORD’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
# Your build pipeline references a secret variable named ‘SQL_APP_USER_PASSWORD’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
# Your build pipeline references a secret variable named SQL_ADMIN_USER. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
  steps:
  - bash: |
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
      nvm use
      yarn install --frozen-lockfile

    workingDirectory: admin
    displayName: 'admin: yarn install'

  - task: Bash@3
    displayName: 'Migrate Database Up'
    inputs:
      targetType: filePath
      filePath: 'deploy/sql/vso-validate-migrations/vso-migrate-up.sh'
      arguments: '$(SQL_ADMIN_USER) $(SQL_ADMIN_USER_PASSWORD) $(SQL_APP_USER_PASSWORD) $(Build.BuildNumber)'

  - task: Bash@3
    displayName: 'Migrate Database Down'
    inputs:
      targetType: filePath
      filePath: 'deploy/sql/vso-validate-migrations/vso-migrate-down.sh'
      arguments: '$(SQL_ADMIN_USER) $(SQL_ADMIN_USER_PASSWORD) $(SQL_APP_USER_PASSWORD) $(Build.BuildNumber)'

  - task: AzureCLI@2
    displayName: 'Delete Database'
    inputs:
      azureSubscription: $(TARGET_AZURE_SUBSCRIPTION)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az sql db delete --name $(Build.BuildNumber) --resource-group $(TARGET_DB_RESOURCE_GROUP) --server $(TARGET_DB_SERVER) --yes

    condition: always()


