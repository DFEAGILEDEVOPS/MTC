resources:
- repo: self
  clean: true

jobs:

- job: Job_3
  displayName: Delete Database
  condition: succeeded()
  pool:
    vmImage: 'Hosted VS2017'
  variables:
    SQL_SERVER: $(SQL_SERVER)
    SQL_ADMIN_USER: $(SQL_ADMIN_USER)
    SQL_ADMIN_USER_PASSWORD: $(SQL_ADMIN_USER_PASSWORD)

  steps:
  - task: Damutu.DamutuDatabaseTools.damutu-AzureExecuteSQL-task.Execute SQL@1
    displayName: 'Delete existing database'
    inputs:
      databaseserverinput: '$(SQL_SERVER)'
      databasenamestring: master
      adminusertring: '$(SQL_ADMIN_USER)'
      adminpasswordstring: '$(SQL_ADMIN_USER_PASSWORD)'
      sqlquerystring: 'DROP DATABASE IF EXISTS [mtc-dev]'

  - task: Damutu.DamutuDatabaseTools.damutu-AzureExecuteSQL-task.Execute SQL@1
    displayName: 'Create database'
    inputs:
      databaseserverinput: '$(SQL_SERVER)'
      databasenamestring: master
      adminusertring: '$(SQL_ADMIN_USER)'
      adminpasswordstring: '$(SQL_ADMIN_USER_PASSWORD)'
      sqlquerystring: 'CREATE DATABASE [mtc-dev]'


- job: Job_1
  displayName: Prepare Database
  dependsOn: Job_3
  condition: succeeded()
  pool:
    name: MTC LIVE
#Your build pipeline references a secret variable named ‘SQL_APP_USER_PASSWORD’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references a secret variable named ‘SQL_APP_USER_PASSWORD’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
  variables:
    SQL_ADMIN_USER: $(SQL_ADMIN_USER)
    SQL_ADMIN_USER_PASSWORD: $(SQL_ADMIN_USER_PASSWORD)

  steps:
  - task: Bash@3
    displayName: 'Create Database'
    inputs:
      targetType: ./
      filePath: 'deploy/sql-migrations/migrate-db.sh'
      arguments: '$(SQL_ADMIN_USER) $(SQL_ADMIN_USER_PASSWORD) $(SQL_APP_USER_PASSWORD)'

  - task: Bash@3
    displayName: 'Seed Database'
    inputs:
      targetType: ./
      filePath: 'deploy/sql-migrations/seed-db.sh'
      arguments: '$(SQL_ADMIN_USER) $(SQL_ADMIN_USER_PASSWORD) $(SQL_APP_USER_PASSWORD)'


- job: Phase_1
  displayName: Run Pupil Tests
  dependsOn: Job_1
  condition: succeeded()
  pool:
    name: MTC LIVE
  steps:
  - bash: |
       source ~/.profile
       gem install bundler
       bundle install
       rake features
    workingDirectory: 'test/pupil-hpa'
    displayName: 'PUPIL: Run End to End Tests'

  - task: CopyFiles@2
    displayName: 'Copy screenshots to staging folder'
    inputs:
      SourceFolder: 'test/pupil-hpa'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/pupil-tests'
    condition: succeededOrFailed()

  - task: ArchiveFiles@2
    displayName: 'Archive $(Build.ArtifactStagingDirectory)/pupil-tests'
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/pupil-tests'
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: mtc-nightly-build-PUPIL'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      ArtifactName: 'mtc-nightly-build-PUPIL'
    condition: succeededOrFailed()


- job: Phase_2
  displayName: Run Admin Tests
  dependsOn: Job_1
  condition: succeeded()
  pool:
    name: MTC LIVE
  steps:
  - bash: |
       source ~/.profile
       gem install bundler
       bundle install
       rake features
    workingDirectory: 'test/admin-hpa'
    displayName: 'ADMIN: Run End to End Tests'

  - task: CopyFiles@2
    displayName: 'Copy screenshots to staging folder'
    inputs:
      SourceFolder: 'test/admin-hpa'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/admin-tests'
    condition: succeededOrFailed()

  - task: ArchiveFiles@2
    displayName: 'Archive $(Build.ArtifactStagingDirectory)/admin-tests'
    inputs:
      rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/admin-tests'
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: mtc-nightly-build'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      ArtifactName: 'mtc-nightly-build-ADMIN'
    condition: succeededOrFailed()


- job: Job_2
  displayName: Reset Database
  dependsOn:
  - Job_1
  - Phase_1
  - Phase_2
  condition: succeededOrFailed()
  pool:
    name: MTC LIVE
#Your build pipeline references a secret variable named ‘SQL_APP_USER_PASSWORD’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references a secret variable named ‘SQL_APP_USER_PASSWORD’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
  variables:
    SQL_SERVER: $(SQL_SERVER)
    SQL_ADMIN_USER: $(SQL_DATABASE)
    SQL_ADMIN_USER_PASSWORD: $(SQL_ADMIN_USER_PASSWORD)

  steps:
  - task: Damutu.DamutuDatabaseTools.damutu-AzureExecuteSQL-task.Execute SQL@1
    displayName: 'Delete existing database'
    inputs:
      databaseserverinput: '$(SQL_SERVER)'
      databasenamestring: master
      adminusertring: '$(SQL_ADMIN_USER)'
      adminpasswordstring: '$(SQL_ADMIN_USER_PASSWORD)'
      sqlquerystring: 'DROP DATABASE IF EXISTS [mtc-dev]'

  - task: Damutu.DamutuDatabaseTools.damutu-AzureExecuteSQL-task.Execute SQL@1
    displayName: 'Create database'
    inputs:
      databaseserverinput: '$(SQL_SERVER)'
      databasenamestring: master
      adminusertring: '$(SQL_ADMIN_USER)'
      adminpasswordstring: '$(SQL_ADMIN_USER_PASSWORD)'
      sqlquerystring: 'CREATE DATABASE [mtc-dev]'

  - task: Bash@3
    displayName: 'Create Database'
    inputs:
      targetType: ./
      filePath: 'deploy/sql-migrations/migrate-db.sh'
      arguments: '$(SQL_ADMIN_USER) $(SQL_ADMIN_USER_PASSWORD) $(SQL_APP_USER_PASSWORD)'

  - task: Bash@3
    displayName: 'Seed Database'
    inputs:
      targetType: ./
      filePath: 'deploy/sql-migrations/seed-db.sh'
      arguments: '$(SQL_ADMIN_USER) $(SQL_ADMIN_USER_PASSWORD) $(SQL_APP_USER_PASSWORD)'
